{
  "version": 3,
  "sources": ["../three/examples/jsm/loaders/GLTFLoader.js"],
  "sourcesContent": ["/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nimport {\n\tAnimationClip,\n\tBone,\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tDefaultLoadingManager,\n\tDirectionalLight,\n\tDoubleSide,\n\tFileLoader,\n\tFrontSide,\n\tGroup,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tInterpolant,\n\tInterpolateDiscrete,\n\tInterpolateLinear,\n\tLine,\n\tLineBasicMaterial,\n\tLineLoop,\n\tLineSegments,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearMipmapNearestFilter,\n\tLoader,\n\tLoaderUtils,\n\tMaterial,\n\tMath as _Math,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshStandardMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tNearestMipmapLinearFilter,\n\tNearestMipmapNearestFilter,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tPoints,\n\tPointsMaterial,\n\tPropertyBinding,\n\tQuaternionKeyframeTrack,\n\tRGBAFormat,\n\tRGBFormat,\n\tRepeatWrapping,\n\tScene,\n\tShaderLib,\n\tShaderMaterial,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTextureLoader,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tUniformsUtils,\n\tVector2,\n\tVectorKeyframeTrack,\n\tVertexColors,\n\tsRGBEncoding\n} from \"../../../build/three.module.js\";\n\nvar GLTFLoader = ( function () {\n\n\tfunction GLTFLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.dracoLoader = null;\n\t\tthis.ddsLoader = null;\n\n\t}\n\n\tGLTFLoader.prototype = {\n\n\t\tconstructor: GLTFLoader,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar resourcePath;\n\n\t\t\tif ( this.resourcePath !== undefined ) {\n\n\t\t\t\tresourcePath = this.resourcePath;\n\n\t\t\t} else if ( this.path !== undefined ) {\n\n\t\t\t\tresourcePath = this.path;\n\n\t\t\t} else {\n\n\t\t\t\tresourcePath = LoaderUtils.extractUrlBase( url );\n\n\t\t\t}\n\n\t\t\t// Tells the LoadingManager to track an extra item, which resolves after\n\t\t\t// the model is fully loaded. This means the count of items loaded will\n\t\t\t// be incorrect, but ensures manager.onLoad() does not fire early.\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tvar _onError = function ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t};\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tif ( scope.crossOrigin === 'use-credentials' ) {\n\n\t\t\t\tloader.setWithCredentials( true );\n\n\t\t\t}\n\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tscope.parse( data, resourcePath, function ( gltf ) {\n\n\t\t\t\t\t\tonLoad( gltf );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, _onError );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t_onError( e );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, _onError );\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( value ) {\n\n\t\t\tthis.resourcePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDRACOLoader: function ( dracoLoader ) {\n\n\t\t\tthis.dracoLoader = dracoLoader;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDDSLoader: function ( ddsLoader ) {\n\n\t\t\tthis.ddsLoader = ddsLoader;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( data, path, onLoad, onError ) {\n\n\t\t\tvar content;\n\t\t\tvar extensions = {};\n\n\t\t\tif ( typeof data === 'string' ) {\n\n\t\t\t\tcontent = data;\n\n\t\t\t} else {\n\n\t\t\t\tvar magic = LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );\n\n\t\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontent = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontent = LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar json = JSON.parse( content );\n\n\t\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead.' ) );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( json.extensionsUsed ) {\n\n\t\t\t\tfor ( var i = 0; i < json.extensionsUsed.length; ++ i ) {\n\n\t\t\t\t\tvar extensionName = json.extensionsUsed[ i ];\n\t\t\t\t\tvar extensionsRequired = json.extensionsRequired || [];\n\n\t\t\t\t\tswitch ( extensionName ) {\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFLightsExtension( json );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_UNLIT:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsUnlitExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.MSFT_TEXTURE_DDS:\n\t\t\t\t\t\t\textensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] = new GLTFTextureDDSExtension( this.ddsLoader );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n\t\t\t\t\t\t\textensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] = new GLTFTextureTransformExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tif ( extensionsRequired.indexOf( extensionName ) >= 0 ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar parser = new GLTFParser( json, extensions, {\n\n\t\t\t\tpath: path || this.resourcePath || '',\n\t\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\t\tmanager: this.manager\n\n\t\t\t} );\n\n\t\t\tparser.parse( onLoad, onError );\n\n\t\t}\n\n\t};\n\n\t/* GLTFREGISTRY */\n\n\tfunction GLTFRegistry() {\n\n\t\tvar objects = {};\n\n\t\treturn\t{\n\n\t\t\tget: function ( key ) {\n\n\t\t\t\treturn objects[ key ];\n\n\t\t\t},\n\n\t\t\tadd: function ( key, object ) {\n\n\t\t\t\tobjects[ key ] = object;\n\n\t\t\t},\n\n\t\t\tremove: function ( key ) {\n\n\t\t\t\tdelete objects[ key ];\n\n\t\t\t},\n\n\t\t\tremoveAll: function () {\n\n\t\t\t\tobjects = {};\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/*********************************/\n\t/********** EXTENSIONS ***********/\n\t/*********************************/\n\n\tvar EXTENSIONS = {\n\t\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\t\tKHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n\t\tKHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n\t\tKHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n\t\tKHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n\t\tKHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n\t\tMSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n\t};\n\n\t/**\n\t * DDS Texture Extension\n\t *\n\t * Specification:\n\t * https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n\t *\n\t */\n\tfunction GLTFTextureDDSExtension( ddsLoader ) {\n\n\t\tif ( ! ddsLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n\t\tthis.ddsLoader = ddsLoader;\n\n\t}\n\n\t/**\n\t * Lights Extension\n\t *\n\t * Specification: PENDING\n\t */\n\tfunction GLTFLightsExtension( json ) {\n\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n\t\tvar extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};\n\t\tthis.lightDefs = extension.lights || [];\n\n\t}\n\n\tGLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {\n\n\t\tvar lightDef = this.lightDefs[ lightIndex ];\n\t\tvar lightNode;\n\n\t\tvar color = new Color( 0xffffff );\n\t\tif ( lightDef.color !== undefined ) color.fromArray( lightDef.color );\n\n\t\tvar range = lightDef.range !== undefined ? lightDef.range : 0;\n\n\t\tswitch ( lightDef.type ) {\n\n\t\t\tcase 'directional':\n\t\t\t\tlightNode = new DirectionalLight( color );\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tcase 'point':\n\t\t\t\tlightNode = new PointLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\tbreak;\n\n\t\t\tcase 'spot':\n\t\t\t\tlightNode = new SpotLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\t// Handle spotlight properties.\n\t\t\t\tlightDef.spot = lightDef.spot || {};\n\t\t\t\tlightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n\t\t\t\tlightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n\t\t\t\tlightNode.angle = lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".' );\n\n\t\t}\n\n\t\t// Some lights (e.g. spot) default to a position other than the origin. Reset the position\n\t\t// here, because node-level parsing will only override position if explicitly specified.\n\t\tlightNode.position.set( 0, 0, 0 );\n\n\t\tlightNode.decay = 2;\n\n\t\tif ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;\n\n\t\tlightNode.name = lightDef.name || ( 'light_' + lightIndex );\n\n\t\treturn Promise.resolve( lightNode );\n\n\t};\n\n\t/**\n\t * Unlit Materials Extension (pending)\n\t *\n\t * PR: https://github.com/KhronosGroup/glTF/pull/1163\n\t */\n\tfunction GLTFMaterialsUnlitExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n\n\t}\n\n\tGLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n\n\t\treturn MeshBasicMaterial;\n\n\t};\n\n\tGLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {\n\n\t\tvar pending = [];\n\n\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\tmaterialParams.opacity = 1.0;\n\n\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\tif ( metallicRoughness ) {\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/* BINARY EXTENSION */\n\tvar BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n\tvar BINARY_EXTENSION_HEADER_LENGTH = 12;\n\tvar BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\n\tfunction GLTFBinaryExtension( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\tthis.content = null;\n\t\tthis.body = null;\n\n\t\tvar headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\n\t\tthis.header = {\n\t\t\tmagic: LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true )\n\t\t};\n\n\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.' );\n\n\t\t}\n\n\t\tvar chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tvar chunkIndex = 0;\n\n\t\twhile ( chunkIndex < chunkView.byteLength ) {\n\n\t\t\tvar chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tvar chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\tvar contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\tthis.content = LoaderUtils.decodeText( contentArray );\n\n\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\tvar byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t}\n\n\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\tchunkIndex += chunkLength;\n\n\t\t}\n\n\t\tif ( this.content === null ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * DRACO Mesh Compression Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/pull/874\n\t */\n\tfunction GLTFDracoMeshCompressionExtension( json, dracoLoader ) {\n\n\t\tif ( ! dracoLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n\t\tthis.json = json;\n\t\tthis.dracoLoader = dracoLoader;\n\n\t}\n\n\tGLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {\n\n\t\tvar json = this.json;\n\t\tvar dracoLoader = this.dracoLoader;\n\t\tvar bufferViewIndex = primitive.extensions[ this.name ].bufferView;\n\t\tvar gltfAttributeMap = primitive.extensions[ this.name ].attributes;\n\t\tvar threeAttributeMap = {};\n\t\tvar attributeNormalizedMap = {};\n\t\tvar attributeTypeMap = {};\n\n\t\tfor ( var attributeName in gltfAttributeMap ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tthreeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];\n\n\t\t}\n\n\t\tfor ( attributeName in primitive.attributes ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tif ( gltfAttributeMap[ attributeName ] !== undefined ) {\n\n\t\t\t\tvar accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];\n\t\t\t\tvar componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\tattributeTypeMap[ threeAttributeName ] = componentType;\n\t\t\t\tattributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {\n\n\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\tdracoLoader.decodeDracoFile( bufferView, function ( geometry ) {\n\n\t\t\t\t\tfor ( var attributeName in geometry.attributes ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\t\tvar normalized = attributeNormalizedMap[ attributeName ];\n\n\t\t\t\t\t\tif ( normalized !== undefined ) attribute.normalized = normalized;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( geometry );\n\n\t\t\t\t}, threeAttributeMap, attributeTypeMap );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Texture Transform Extension\n\t *\n\t * Specification:\n\t */\n\tfunction GLTFTextureTransformExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n\n\t}\n\n\tGLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {\n\n\t\ttexture = texture.clone();\n\n\t\tif ( transform.offset !== undefined ) {\n\n\t\t\ttexture.offset.fromArray( transform.offset );\n\n\t\t}\n\n\t\tif ( transform.rotation !== undefined ) {\n\n\t\t\ttexture.rotation = transform.rotation;\n\n\t\t}\n\n\t\tif ( transform.scale !== undefined ) {\n\n\t\t\ttexture.repeat.fromArray( transform.scale );\n\n\t\t}\n\n\t\tif ( transform.texCoord !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.' );\n\n\t\t}\n\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t};\n\n\t/**\n\t * Specular-Glossiness Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n\t */\n\tfunction GLTFMaterialsPbrSpecularGlossinessExtension() {\n\n\t\treturn {\n\n\t\t\tname: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n\n\t\t\tspecularGlossinessParams: [\n\t\t\t\t'color',\n\t\t\t\t'map',\n\t\t\t\t'lightMap',\n\t\t\t\t'lightMapIntensity',\n\t\t\t\t'aoMap',\n\t\t\t\t'aoMapIntensity',\n\t\t\t\t'emissive',\n\t\t\t\t'emissiveIntensity',\n\t\t\t\t'emissiveMap',\n\t\t\t\t'bumpMap',\n\t\t\t\t'bumpScale',\n\t\t\t\t'normalMap',\n\t\t\t\t'displacementMap',\n\t\t\t\t'displacementScale',\n\t\t\t\t'displacementBias',\n\t\t\t\t'specularMap',\n\t\t\t\t'specular',\n\t\t\t\t'glossinessMap',\n\t\t\t\t'glossiness',\n\t\t\t\t'alphaMap',\n\t\t\t\t'envMap',\n\t\t\t\t'envMapIntensity',\n\t\t\t\t'refractionRatio',\n\t\t\t],\n\n\t\t\tgetMaterialType: function () {\n\n\t\t\t\treturn ShaderMaterial;\n\n\t\t\t},\n\n\t\t\textendParams: function ( materialParams, materialDef, parser ) {\n\n\t\t\t\tvar pbrSpecularGlossiness = materialDef.extensions[ this.name ];\n\n\t\t\t\tvar shader = ShaderLib[ 'standard' ];\n\n\t\t\t\tvar uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\t\tvar specularMapParsFragmentChunk = [\n\t\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t\t'\tuniform sampler2D specularMap;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar glossinessMapParsFragmentChunk = [\n\t\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t\t'\tuniform sampler2D glossinessMap;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar specularMapFragmentChunk = [\n\t\t\t\t\t'vec3 specularFactor = specular;',\n\t\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n\t\t\t\t\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\n\t\t\t\t\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t\t'\tspecularFactor *= texelSpecular.rgb;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar glossinessMapFragmentChunk = [\n\t\t\t\t\t'float glossinessFactor = glossiness;',\n\t\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n\t\t\t\t\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t\t'\tglossinessFactor *= texelGlossiness.a;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar lightPhysicalFragmentChunk = [\n\t\t\t\t\t'PhysicalMaterial material;',\n\t\t\t\t\t'material.diffuseColor = diffuseColor.rgb;',\n\t\t\t\t\t'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',\n\t\t\t\t\t'material.specularColor = specularFactor.rgb;',\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar fragmentShader = shader.fragmentShader\n\t\t\t\t\t.replace( 'uniform float roughness;', 'uniform vec3 specular;' )\n\t\t\t\t\t.replace( 'uniform float metalness;', 'uniform float glossiness;' )\n\t\t\t\t\t.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )\n\t\t\t\t\t.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )\n\t\t\t\t\t.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )\n\t\t\t\t\t.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )\n\t\t\t\t\t.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );\n\n\t\t\t\tdelete uniforms.roughness;\n\t\t\t\tdelete uniforms.metalness;\n\t\t\t\tdelete uniforms.roughnessMap;\n\t\t\t\tdelete uniforms.metalnessMap;\n\n\t\t\t\tuniforms.specular = { value: new Color().setHex( 0x111111 ) };\n\t\t\t\tuniforms.glossiness = { value: 0.5 };\n\t\t\t\tuniforms.specularMap = { value: null };\n\t\t\t\tuniforms.glossinessMap = { value: null };\n\n\t\t\t\tmaterialParams.vertexShader = shader.vertexShader;\n\t\t\t\tmaterialParams.fragmentShader = fragmentShader;\n\t\t\t\tmaterialParams.uniforms = uniforms;\n\t\t\t\tmaterialParams.defines = { 'STANDARD': '' }\n\n\t\t\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {\n\n\t\t\t\t\tvar array = pbrSpecularGlossiness.diffuseFactor;\n\n\t\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );\n\n\t\t\t\t}\n\n\t\t\t\tmaterialParams.emissive = new Color( 0.0, 0.0, 0.0 );\n\t\t\t\tmaterialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n\t\t\t\tmaterialParams.specular = new Color( 1.0, 1.0, 1.0 );\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {\n\n\t\t\t\t\tmaterialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {\n\n\t\t\t\t\tvar specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t},\n\n\t\t\tcreateMaterial: function ( params ) {\n\n\t\t\t\t// setup material properties based on MeshStandardMaterial for Specular-Glossiness\n\n\t\t\t\tvar material = new ShaderMaterial( {\n\t\t\t\t\tdefines: params.defines,\n\t\t\t\t\tvertexShader: params.vertexShader,\n\t\t\t\t\tfragmentShader: params.fragmentShader,\n\t\t\t\t\tuniforms: params.uniforms,\n\t\t\t\t\tfog: true,\n\t\t\t\t\tlights: true,\n\t\t\t\t\topacity: params.opacity,\n\t\t\t\t\ttransparent: params.transparent\n\t\t\t\t} );\n\n\t\t\t\tmaterial.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t\tmaterial.color = params.color;\n\n\t\t\t\tmaterial.map = params.map === undefined ? null : params.map;\n\n\t\t\t\tmaterial.lightMap = null;\n\t\t\t\tmaterial.lightMapIntensity = 1.0;\n\n\t\t\t\tmaterial.aoMap = params.aoMap === undefined ? null : params.aoMap;\n\t\t\t\tmaterial.aoMapIntensity = 1.0;\n\n\t\t\t\tmaterial.emissive = params.emissive;\n\t\t\t\tmaterial.emissiveIntensity = 1.0;\n\t\t\t\tmaterial.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;\n\n\t\t\t\tmaterial.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;\n\t\t\t\tmaterial.bumpScale = 1;\n\n\t\t\t\tmaterial.normalMap = params.normalMap === undefined ? null : params.normalMap;\n\n\t\t\t\tif ( params.normalScale ) material.normalScale = params.normalScale;\n\n\t\t\t\tmaterial.displacementMap = null;\n\t\t\t\tmaterial.displacementScale = 1;\n\t\t\t\tmaterial.displacementBias = 0;\n\n\t\t\t\tmaterial.specularMap = params.specularMap === undefined ? null : params.specularMap;\n\t\t\t\tmaterial.specular = params.specular;\n\n\t\t\t\tmaterial.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;\n\t\t\t\tmaterial.glossiness = params.glossiness;\n\n\t\t\t\tmaterial.alphaMap = null;\n\n\t\t\t\tmaterial.envMap = params.envMap === undefined ? null : params.envMap;\n\t\t\t\tmaterial.envMapIntensity = 1.0;\n\n\t\t\t\tmaterial.refractionRatio = 0.98;\n\n\t\t\t\tmaterial.extensions.derivatives = true;\n\n\t\t\t\treturn material;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can\n\t\t\t * copy only properties it knows about or inherits, and misses many properties that would\n\t\t\t * normally be defined by MeshStandardMaterial.\n\t\t\t *\n\t\t\t * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of\n\t\t\t * loading a glTF model, but cloning later (e.g. by the user) would require these changes\n\t\t\t * AND also updating `.onBeforeRender` on the parent mesh.\n\t\t\t *\n\t\t\t * @param  {ShaderMaterial} source\n\t\t\t * @return {ShaderMaterial}\n\t\t\t */\n\t\t\tcloneMaterial: function ( source ) {\n\n\t\t\t\tvar target = source.clone();\n\n\t\t\t\ttarget.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t\tvar params = this.specularGlossinessParams;\n\n\t\t\t\tfor ( var i = 0, il = params.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar value = source[ params[ i ] ];\n\t\t\t\t\ttarget[ params[ i ] ] = ( value && value.isColor ) ? value.clone() : value;\n\n\t\t\t\t}\n\n\t\t\t\treturn target;\n\n\t\t\t},\n\n\t\t\t// Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.\n\t\t\trefreshUniforms: function ( renderer, scene, camera, geometry, material ) {\n\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial !== true ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms = material.uniforms;\n\t\t\t\tvar defines = material.defines;\n\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t\t// uv repeat and offset setting priorities\n\t\t\t\t// 1. color map\n\t\t\t\t// 2. specular map\n\t\t\t\t// 3. normal map\n\t\t\t\t// 4. bump map\n\t\t\t\t// 5. alpha map\n\t\t\t\t// 6. emissive map\n\n\t\t\t\tvar uvScaleMap;\n\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t\t} else if ( material.glossinessMap ) {\n\n\t\t\t\t\tuvScaleMap = material.glossinessMap;\n\n\t\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.envMap ) {\n\n\t\t\t\t\tuniforms.envMap.value = material.envMap;\n\t\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\t\tuniforms.maxMipLevel.value = renderer.properties.get( material.envMap ).__maxMipLevel;\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\t\tuniforms.glossiness.value = material.glossiness;\n\n\t\t\t\tuniforms.glossinessMap.value = material.glossinessMap;\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\tif ( uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined ) {\n\n\t\t\t\t\tdefines.USE_GLOSSINESSMAP = '';\n\t\t\t\t\t// set USE_ROUGHNESSMAP to enable vUv\n\t\t\t\t\tdefines.USE_ROUGHNESSMAP = '';\n\n\t\t\t\t}\n\n\t\t\t\tif ( uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined ) {\n\n\t\t\t\t\tdelete defines.USE_GLOSSINESSMAP;\n\t\t\t\t\tdelete defines.USE_ROUGHNESSMAP;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/*********************************/\n\t/********** INTERPOLATION ********/\n\t/*********************************/\n\n\t// Spline Interpolation\n\t// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n\tfunction GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tGLTFCubicSplineInterpolant.prototype = Object.create( Interpolant.prototype );\n\tGLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n\n\tGLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {\n\n\t\t// Copies a sample value to the result buffer. See description of glTF\n\t\t// CUBICSPLINE values layout in interpolate_() function below.\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tvalueSize = this.valueSize,\n\t\t\toffset = index * valueSize * 3 + valueSize;\n\n\t\tfor ( var i = 0; i !== valueSize; i ++ ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\tGLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\tGLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\tGLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer;\n\t\tvar values = this.sampleValues;\n\t\tvar stride = this.valueSize;\n\n\t\tvar stride2 = stride * 2;\n\t\tvar stride3 = stride * 3;\n\n\t\tvar td = t1 - t0;\n\n\t\tvar p = ( t - t0 ) / td;\n\t\tvar pp = p * p;\n\t\tvar ppp = pp * p;\n\n\t\tvar offset1 = i1 * stride3;\n\t\tvar offset0 = offset1 - stride3;\n\n\t\tvar s2 = - 2 * ppp + 3 * pp;\n\t\tvar s3 = ppp - pp;\n\t\tvar s0 = 1 - s2;\n\t\tvar s1 = s3 - pp + p;\n\n\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\t\tfor ( var i = 0; i !== stride; i ++ ) {\n\n\t\t\tvar p0 = values[ offset0 + i + stride ]; // splineVertex_k\n\t\t\tvar m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)\n\t\t\tvar p1 = values[ offset1 + i + stride ]; // splineVertex_k+1\n\t\t\tvar m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n\t\t\tresult[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\t/*********************************/\n\t/********** INTERNALS ************/\n\t/*********************************/\n\n\t/* CONSTANTS */\n\n\tvar WEBGL_CONSTANTS = {\n\t\tFLOAT: 5126,\n\t\t//FLOAT_MAT2: 35674,\n\t\tFLOAT_MAT3: 35675,\n\t\tFLOAT_MAT4: 35676,\n\t\tFLOAT_VEC2: 35664,\n\t\tFLOAT_VEC3: 35665,\n\t\tFLOAT_VEC4: 35666,\n\t\tLINEAR: 9729,\n\t\tREPEAT: 10497,\n\t\tSAMPLER_2D: 35678,\n\t\tPOINTS: 0,\n\t\tLINES: 1,\n\t\tLINE_LOOP: 2,\n\t\tLINE_STRIP: 3,\n\t\tTRIANGLES: 4,\n\t\tTRIANGLE_STRIP: 5,\n\t\tTRIANGLE_FAN: 6,\n\t\tUNSIGNED_BYTE: 5121,\n\t\tUNSIGNED_SHORT: 5123\n\t};\n\n\tvar WEBGL_COMPONENT_TYPES = {\n\t\t5120: Int8Array,\n\t\t5121: Uint8Array,\n\t\t5122: Int16Array,\n\t\t5123: Uint16Array,\n\t\t5125: Uint32Array,\n\t\t5126: Float32Array\n\t};\n\n\tvar WEBGL_FILTERS = {\n\t\t9728: NearestFilter,\n\t\t9729: LinearFilter,\n\t\t9984: NearestMipmapNearestFilter,\n\t\t9985: LinearMipmapNearestFilter,\n\t\t9986: NearestMipmapLinearFilter,\n\t\t9987: LinearMipmapLinearFilter\n\t};\n\n\tvar WEBGL_WRAPPINGS = {\n\t\t33071: ClampToEdgeWrapping,\n\t\t33648: MirroredRepeatWrapping,\n\t\t10497: RepeatWrapping\n\t};\n\n\tvar WEBGL_TYPE_SIZES = {\n\t\t'SCALAR': 1,\n\t\t'VEC2': 2,\n\t\t'VEC3': 3,\n\t\t'VEC4': 4,\n\t\t'MAT2': 4,\n\t\t'MAT3': 9,\n\t\t'MAT4': 16\n\t};\n\n\tvar ATTRIBUTES = {\n\t\tPOSITION: 'position',\n\t\tNORMAL: 'normal',\n\t\tTANGENT: 'tangent',\n\t\tTEXCOORD_0: 'uv',\n\t\tTEXCOORD_1: 'uv2',\n\t\tCOLOR_0: 'color',\n\t\tWEIGHTS_0: 'skinWeight',\n\t\tJOINTS_0: 'skinIndex',\n\t};\n\n\tvar PATH_PROPERTIES = {\n\t\tscale: 'scale',\n\t\ttranslation: 'position',\n\t\trotation: 'quaternion',\n\t\tweights: 'morphTargetInfluences'\n\t};\n\n\tvar INTERPOLATION = {\n\t\tCUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n\t\t                        // keyframe track will be initialized with a default interpolation type, then modified.\n\t\tLINEAR: InterpolateLinear,\n\t\tSTEP: InterpolateDiscrete\n\t};\n\n\tvar ALPHA_MODES = {\n\t\tOPAQUE: 'OPAQUE',\n\t\tMASK: 'MASK',\n\t\tBLEND: 'BLEND'\n\t};\n\n\tvar MIME_TYPE_FORMATS = {\n\t\t'image/png': RGBAFormat,\n\t\t'image/jpeg': RGBFormat\n\t};\n\n\t/* UTILITY FUNCTIONS */\n\n\tfunction resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\t\t\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i , '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n\tvar defaultMaterial;\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n\t */\n\tfunction createDefaultMaterial() {\n\n\t\tdefaultMaterial = defaultMaterial || new MeshStandardMaterial( {\n\t\t\tcolor: 0xFFFFFF,\n\t\t\temissive: 0x000000,\n\t\t\tmetalness: 1,\n\t\t\troughness: 1,\n\t\t\ttransparent: false,\n\t\t\tdepthTest: true,\n\t\t\tside: FrontSide\n\t\t} );\n\n\t\treturn defaultMaterial;\n\n\t}\n\n\tfunction addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {\n\n\t\t// Add unknown glTF extensions to an object's userData.\n\n\t\tfor ( var name in objectDef.extensions ) {\n\n\t\t\tif ( knownExtensions[ name ] === undefined ) {\n\n\t\t\t\tobject.userData.gltfExtensions = object.userData.gltfExtensions || {};\n\t\t\t\tobject.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {Object3D|Material|BufferGeometry} object\n\t * @param {GLTF.definition} gltfDef\n\t */\n\tfunction assignExtrasToUserData( object, gltfDef ) {\n\n\t\tif ( gltfDef.extras !== undefined ) {\n\n\t\t\tif ( typeof gltfDef.extras === 'object' ) {\n\n\t\t\t\tObject.assign( object.userData, gltfDef.extras );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n\t *\n\t * @param {BufferGeometry} geometry\n\t * @param {Array<GLTF.Target>} targets\n\t * @param {GLTFParser} parser\n\t * @return {Promise<BufferGeometry>}\n\t */\n\tfunction addMorphTargets( geometry, targets, parser ) {\n\n\t\tvar hasMorphPosition = false;\n\t\tvar hasMorphNormal = false;\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\n\t\t\tif ( target.POSITION !== undefined ) hasMorphPosition = true;\n\t\t\tif ( target.NORMAL !== undefined ) hasMorphNormal = true;\n\n\t\t\tif ( hasMorphPosition && hasMorphNormal ) break;\n\n\t\t}\n\n\t\tif ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );\n\n\t\tvar pendingPositionAccessors = [];\n\t\tvar pendingNormalAccessors = [];\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\n\t\t\tif ( hasMorphPosition ) {\n\n\t\t\t\tvar pendingAccessor = target.POSITION !== undefined\n\t\t\t\t\t? parser.getDependency( 'accessor', target.POSITION )\n\t\t\t\t\t: geometry.attributes.position;\n\n\t\t\t\tpendingPositionAccessors.push( pendingAccessor );\n\n\t\t\t}\n\n\t\t\tif ( hasMorphNormal ) {\n\n\t\t\t\tvar pendingAccessor = target.NORMAL !== undefined\n\t\t\t\t\t? parser.getDependency( 'accessor', target.NORMAL )\n\t\t\t\t\t: geometry.attributes.normal;\n\n\t\t\t\tpendingNormalAccessors.push( pendingAccessor );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( [\n\t\t\tPromise.all( pendingPositionAccessors ),\n\t\t\tPromise.all( pendingNormalAccessors )\n\t\t] ).then( function ( accessors ) {\n\n\t\t\tvar morphPositions = accessors[ 0 ];\n\t\t\tvar morphNormals = accessors[ 1 ];\n\n\t\t\t// Clone morph target accessors before modifying them.\n\n\t\t\tfor ( var i = 0, il = morphPositions.length; i < il; i ++ ) {\n\n\t\t\t\tif ( geometry.attributes.position === morphPositions[ i ] ) continue;\n\n\t\t\t\tmorphPositions[ i ] = cloneBufferAttribute( morphPositions[ i ] );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( geometry.attributes.normal === morphNormals[ i ] ) continue;\n\n\t\t\t\tmorphNormals[ i ] = cloneBufferAttribute( morphNormals[ i ] );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\t\tvar target = targets[ i ];\n\t\t\t\tvar attributeName = 'morphTarget' + i;\n\n\t\t\t\tif ( hasMorphPosition ) {\n\n\t\t\t\t\t// Three.js morph position is absolute value. The formula is\n\t\t\t\t\t//   basePosition\n\t\t\t\t\t//     + weight0 * ( morphPosition0 - basePosition )\n\t\t\t\t\t//     + weight1 * ( morphPosition1 - basePosition )\n\t\t\t\t\t//     ...\n\t\t\t\t\t// while the glTF one is relative\n\t\t\t\t\t//   basePosition\n\t\t\t\t\t//     + weight0 * glTFmorphPosition0\n\t\t\t\t\t//     + weight1 * glTFmorphPosition1\n\t\t\t\t\t//     ...\n\t\t\t\t\t// then we need to convert from relative to absolute here.\n\n\t\t\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\t\t\tvar positionAttribute = morphPositions[ i ];\n\t\t\t\t\t\tpositionAttribute.name = attributeName;\n\n\t\t\t\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = positionAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpositionAttribute.setXYZ(\n\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t\tpositionAttribute.getX( j ) + position.getX( j ),\n\t\t\t\t\t\t\t\tpositionAttribute.getY( j ) + position.getY( j ),\n\t\t\t\t\t\t\t\tpositionAttribute.getZ( j ) + position.getZ( j )\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasMorphNormal ) {\n\n\t\t\t\t\t// see target.POSITION's comment\n\n\t\t\t\t\tif ( target.NORMAL !== undefined ) {\n\n\t\t\t\t\t\tvar normalAttribute = morphNormals[ i ];\n\t\t\t\t\t\tnormalAttribute.name = attributeName;\n\n\t\t\t\t\t\tvar normal = geometry.attributes.normal;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = normalAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tnormalAttribute.setXYZ(\n\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t\tnormalAttribute.getX( j ) + normal.getX( j ),\n\t\t\t\t\t\t\t\tnormalAttribute.getY( j ) + normal.getY( j ),\n\t\t\t\t\t\t\t\tnormalAttribute.getZ( j ) + normal.getZ( j )\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;\n\t\t\tif ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;\n\n\t\t\treturn geometry;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * @param {Mesh} mesh\n\t * @param {GLTF.Mesh} meshDef\n\t */\n\tfunction updateMorphTargets( mesh, meshDef ) {\n\n\t\tmesh.updateMorphTargets();\n\n\t\tif ( meshDef.weights !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// .extras has user-defined data, so check that .extras.targetNames is an array.\n\t\tif ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {\n\n\t\t\tvar targetNames = meshDef.extras.targetNames;\n\n\t\t\tif ( mesh.morphTargetInfluences.length === targetNames.length ) {\n\n\t\t\t\tmesh.morphTargetDictionary = {};\n\n\t\t\t\tfor ( var i = 0, il = targetNames.length; i < il; i ++ ) {\n\n\t\t\t\t\tmesh.morphTargetDictionary[ targetNames[ i ] ] = i;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createPrimitiveKey( primitiveDef ) {\n\n\t\tvar dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];\n\t\tvar geometryKey;\n\n\t\tif ( dracoExtension ) {\n\n\t\t\tgeometryKey = 'draco:' + dracoExtension.bufferView\n\t\t\t\t+ ':' + dracoExtension.indices\n\t\t\t\t+ ':' + createAttributesKey( dracoExtension.attributes );\n\n\t\t} else {\n\n\t\t\tgeometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;\n\n\t\t}\n\n\t\treturn geometryKey;\n\n\t}\n\n\tfunction createAttributesKey( attributes ) {\n\n\t\tvar attributesKey = '';\n\n\t\tvar keys = Object.keys( attributes ).sort();\n\n\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\tattributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';\n\n\t\t}\n\n\t\treturn attributesKey;\n\n\t}\n\n\tfunction cloneBufferAttribute( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tvar count = attribute.count;\n\t\t\tvar itemSize = attribute.itemSize;\n\t\t\tvar array = attribute.array.slice( 0, count * itemSize );\n\n\t\t\tfor ( var i = 0, j = 0; i < count; ++ i ) {\n\n\t\t\t\tarray[ j ++ ] = attribute.getX( i );\n\t\t\t\tif ( itemSize >= 2 ) array[ j ++ ] = attribute.getY( i );\n\t\t\t\tif ( itemSize >= 3 ) array[ j ++ ] = attribute.getZ( i );\n\t\t\t\tif ( itemSize >= 4 ) array[ j ++ ] = attribute.getW( i );\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array, itemSize, attribute.normalized );\n\n\t\t}\n\n\t\treturn attribute.clone();\n\n\t}\n\n\t/* GLTF PARSER */\n\n\tfunction GLTFParser( json, extensions, options ) {\n\n\t\tthis.json = json || {};\n\t\tthis.extensions = extensions || {};\n\t\tthis.options = options || {};\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t\t// BufferGeometry caching\n\t\tthis.primitiveCache = {};\n\n\t\tthis.textureLoader = new TextureLoader( this.options.manager );\n\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\n\t\tthis.fileLoader = new FileLoader( this.options.manager );\n\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.options.crossOrigin === 'use-credentials' ) {\n\n\t\t\tthis.fileLoader.setWithCredentials( true );\n\n\t\t}\n\n\t}\n\n\tGLTFParser.prototype.parse = function ( onLoad, onError ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\n\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\tthis.markDefs();\n\n\t\tPromise.all( [\n\n\t\t\tthis.getDependencies( 'scene' ),\n\t\t\tthis.getDependencies( 'animation' ),\n\t\t\tthis.getDependencies( 'camera' ),\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar result = {\n\t\t\t\tscene: dependencies[ 0 ][ json.scene || 0 ],\n\t\t\t\tscenes: dependencies[ 0 ],\n\t\t\t\tanimations: dependencies[ 1 ],\n\t\t\t\tcameras: dependencies[ 2 ],\n\t\t\t\tasset: json.asset,\n\t\t\t\tparser: parser,\n\t\t\t\tuserData: {}\n\t\t\t};\n\n\t\t\taddUnknownExtensionsToUserData( extensions, result, json );\n\n\t\t\tassignExtrasToUserData( result, json );\n\n\t\t\tonLoad( result );\n\n\t\t} ).catch( onError );\n\n\t};\n\n\t/**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t */\n\tGLTFParser.prototype.markDefs = function () {\n\n\t\tvar nodeDefs = this.json.nodes || [];\n\t\tvar skinDefs = this.json.skins || [];\n\t\tvar meshDefs = this.json.meshes || [];\n\n\t\tvar meshReferences = {};\n\t\tvar meshUses = {};\n\n\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\tfor ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\tvar joints = skinDefs[ skinIndex ].joints;\n\n\t\t\tfor ( var i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n\t\t// avoid having more than one Mesh with the same name, count\n\t\t// references and rename instances below.\n\t\t//\n\t\t// Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t\tfor ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tvar nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tif ( meshReferences[ nodeDef.mesh ] === undefined ) {\n\n\t\t\t\t\tmeshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tmeshReferences[ nodeDef.mesh ] ++;\n\n\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.json.meshReferences = meshReferences;\n\t\tthis.json.meshUses = meshUses;\n\n\t};\n\n\t/**\n\t * Requests the specified dependency asynchronously, with caching.\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<Object3D|Material|THREE.Texture|AnimationClip|ArrayBuffer|Object>}\n\t */\n\tGLTFParser.prototype.getDependency = function ( type, index ) {\n\n\t\tvar cacheKey = type + ':' + index;\n\t\tvar dependency = this.cache.get( cacheKey );\n\n\t\tif ( ! dependency ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'scene':\n\t\t\t\t\tdependency = this.loadScene( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tdependency = this.loadNode( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mesh':\n\t\t\t\t\tdependency = this.loadMesh( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'accessor':\n\t\t\t\t\tdependency = this.loadAccessor( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bufferView':\n\t\t\t\t\tdependency = this.loadBufferView( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'buffer':\n\t\t\t\t\tdependency = this.loadBuffer( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'material':\n\t\t\t\t\tdependency = this.loadMaterial( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'texture':\n\t\t\t\t\tdependency = this.loadTexture( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'skin':\n\t\t\t\t\tdependency = this.loadSkin( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'animation':\n\t\t\t\t\tdependency = this.loadAnimation( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'camera':\n\t\t\t\t\tdependency = this.loadCamera( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'light':\n\t\t\t\t\tdependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'Unknown type: ' + type );\n\n\t\t\t}\n\n\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t}\n\n\t\treturn dependency;\n\n\t};\n\n\t/**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */\n\tGLTFParser.prototype.getDependencies = function ( type ) {\n\n\t\tvar dependencies = this.cache.get( type );\n\n\t\tif ( ! dependencies ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t} ) );\n\n\t\t\tthis.cache.add( type, dependencies );\n\n\t\t}\n\n\t\treturn dependencies;\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBuffer = function ( bufferIndex ) {\n\n\t\tvar bufferDef = this.json.buffers[ bufferIndex ];\n\t\tvar loader = this.fileLoader;\n\n\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t}\n\n\t\t// If present, GLB container is required to be the first buffer.\n\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t}\n\n\t\tvar options = this.options;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tloader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {\n\n\t\tvar bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\tvar byteLength = bufferViewDef.byteLength || 0;\n\t\t\tvar byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t * @param {number} accessorIndex\n\t * @return {Promise<BufferAttribute|InterleavedBufferAttribute>}\n\t */\n\tGLTFParser.prototype.loadAccessor = function ( accessorIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\n\t\tvar accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\tif ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {\n\n\t\t\t// Ignore empty accessors, which may be used to declare runtime\n\t\t\t// information about attributes coming from another source (e.g. Draco\n\t\t\t// compression extension).\n\t\t\treturn Promise.resolve( null );\n\n\t\t}\n\n\t\tvar pendingBufferViews = [];\n\n\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t} else {\n\n\t\t\tpendingBufferViews.push( null );\n\n\t\t}\n\n\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t}\n\n\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\tvar bufferView = bufferViews[ 0 ];\n\n\t\t\tvar itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tvar TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\tvar elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\tvar itemBytes = elementBytes * itemSize;\n\t\t\tvar byteOffset = accessorDef.byteOffset || 0;\n\t\t\tvar byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;\n\t\t\tvar normalized = accessorDef.normalized === true;\n\t\t\tvar array, bufferAttribute;\n\n\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t// Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n\t\t\t\t// This makes sure that IBA.count reflects accessor.count properly\n\t\t\t\tvar ibSlice = Math.floor( byteOffset / byteStride );\n\t\t\t\tvar ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n\t\t\t\tvar ib = parser.cache.get( ibCacheKey );\n\n\t\t\t\tif ( ! ib ) {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );\n\n\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\tib = new InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\t\tparser.cache.add( ibCacheKey, ib );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( ib, itemSize, (byteOffset % byteStride) / elementBytes, normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tvar itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\tvar TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\tvar byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\tvar byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\tvar sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\tvar sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\tbufferAttribute.setArray( bufferAttribute.array.slice() );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar index = sparseIndices[ i ];\n\n\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bufferAttribute;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t * @param {number} textureIndex\n\t * @return {Promise<THREE.Texture>}\n\t */\n\tGLTFParser.prototype.loadTexture = function ( textureIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar options = this.options;\n\t\tvar textureLoader = this.textureLoader;\n\n\t\tvar URL = window.URL || window.webkitURL;\n\n\t\tvar textureDef = json.textures[ textureIndex ];\n\n\t\tvar textureExtensions = textureDef.extensions || {};\n\n\t\tvar source;\n\n\t\tif ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {\n\n\t\t\tsource = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];\n\n\t\t} else {\n\n\t\t\tsource = json.images[ textureDef.source ];\n\n\t\t}\n\n\t\tvar sourceURI = source.uri;\n\t\tvar isObjectURL = false;\n\n\t\tif ( source.bufferView !== undefined ) {\n\n\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\tsourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\tisObjectURL = true;\n\t\t\t\tvar blob = new Blob( [ bufferView ], { type: source.mimeType } );\n\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\treturn sourceURI;\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\t// Load Texture resource.\n\n\t\t\tvar loader = Loader.Handlers.get( sourceURI );\n\n\t\t\tif ( ! loader ) {\n\n\t\t\t\tloader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]\n\t\t\t\t\t? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader\n\t\t\t\t\t: textureLoader;\n\n\t\t\t}\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tloader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t} ).then( function ( texture ) {\n\n\t\t\t// Clean up resources and configure Texture.\n\n\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t}\n\n\t\t\ttexture.flipY = false;\n\n\t\t\tif ( textureDef.name !== undefined ) texture.name = textureDef.name;\n\n\t\t\t// Ignore unknown mime types, like DDS files.\n\t\t\tif ( source.mimeType in MIME_TYPE_FORMATS ) {\n\n\t\t\t\ttexture.format = MIME_TYPE_FORMATS[ source.mimeType ];\n\n\t\t\t}\n\n\t\t\tvar samplers = json.samplers || {};\n\t\t\tvar sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || LinearFilter;\n\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || LinearMipmapLinearFilter;\n\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || RepeatWrapping;\n\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || RepeatWrapping;\n\n\t\t\treturn texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t * @param {Object} materialParams\n\t * @param {string} mapName\n\t * @param {Object} mapDef\n\t * @return {Promise}\n\t */\n\tGLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {\n\n\t\tvar parser = this;\n\n\t\treturn this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {\n\n\t\t\tif ( ! texture.isCompressedTexture ) {\n\n\t\t\t\tswitch ( mapName ) {\n\n\t\t\t\t\tcase 'aoMap':\n\t\t\t\t\tcase 'emissiveMap':\n\t\t\t\t\tcase 'metalnessMap':\n\t\t\t\t\tcase 'normalMap':\n\t\t\t\t\tcase 'roughnessMap':\n\t\t\t\t\t\ttexture.format = RGBFormat;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {\n\n\t\t\t\tvar transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\ttexture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmaterialParams[ mapName ] = texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t * already has a material (generated from the glTF material options alone)\n\t * but reuse of the same glTF material may require multiple threejs materials\n\t * to accomodate different primitive types, defines, etc. New materials will\n\t * be created if necessary, and reused from a cache.\n\t * @param  {Object3D} mesh Mesh, Line, or Points instance.\n\t */\n\tGLTFParser.prototype.assignFinalMaterial = function ( mesh ) {\n\n\t\tvar geometry = mesh.geometry;\n\t\tvar material = mesh.material;\n\t\tvar extensions = this.extensions;\n\n\t\tvar useVertexTangents = geometry.attributes.tangent !== undefined;\n\t\tvar useVertexColors = geometry.attributes.color !== undefined;\n\t\tvar useFlatShading = geometry.attributes.normal === undefined;\n\t\tvar useSkinning = mesh.isSkinnedMesh === true;\n\t\tvar useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;\n\t\tvar useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n\n\t\tif ( mesh.isPoints ) {\n\n\t\t\tvar cacheKey = 'PointsMaterial:' + material.uuid;\n\n\t\t\tvar pointsMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! pointsMaterial ) {\n\n\t\t\t\tpointsMaterial = new PointsMaterial();\n\t\t\t\tMaterial.prototype.copy.call( pointsMaterial, material );\n\t\t\t\tpointsMaterial.color.copy( material.color );\n\t\t\t\tpointsMaterial.map = material.map;\n\t\t\t\tpointsMaterial.lights = false; // PointsMaterial doesn't support lights yet\n\t\t\t\tpointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n\t\t\t\tthis.cache.add( cacheKey, pointsMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = pointsMaterial;\n\n\t\t} else if ( mesh.isLine ) {\n\n\t\t\tvar cacheKey = 'LineBasicMaterial:' + material.uuid;\n\n\t\t\tvar lineMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! lineMaterial ) {\n\n\t\t\t\tlineMaterial = new LineBasicMaterial();\n\t\t\t\tMaterial.prototype.copy.call( lineMaterial, material );\n\t\t\t\tlineMaterial.color.copy( material.color );\n\t\t\t\tlineMaterial.lights = false; // LineBasicMaterial doesn't support lights yet\n\n\t\t\t\tthis.cache.add( cacheKey, lineMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = lineMaterial;\n\n\t\t}\n\n\t\t// Clone the material if it will be modified\n\t\tif ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {\n\n\t\t\tvar cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';\n\t\t\tif ( useSkinning ) cacheKey += 'skinning:';\n\t\t\tif ( useVertexTangents ) cacheKey += 'vertex-tangents:';\n\t\t\tif ( useVertexColors ) cacheKey += 'vertex-colors:';\n\t\t\tif ( useFlatShading ) cacheKey += 'flat-shading:';\n\t\t\tif ( useMorphTargets ) cacheKey += 'morph-targets:';\n\t\t\tif ( useMorphNormals ) cacheKey += 'morph-normals:';\n\n\t\t\tvar cachedMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! cachedMaterial ) {\n\n\t\t\t\tcachedMaterial = material.isGLTFSpecularGlossinessMaterial\n\t\t\t\t\t? extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].cloneMaterial( material )\n\t\t\t\t\t: material.clone();\n\n\t\t\t\tif ( useSkinning ) cachedMaterial.skinning = true;\n\t\t\t\tif ( useVertexTangents ) cachedMaterial.vertexTangents = true;\n\t\t\t\tif ( useVertexColors ) cachedMaterial.vertexColors = VertexColors;\n\t\t\t\tif ( useFlatShading ) cachedMaterial.flatShading = true;\n\t\t\t\tif ( useMorphTargets ) cachedMaterial.morphTargets = true;\n\t\t\t\tif ( useMorphNormals ) cachedMaterial.morphNormals = true;\n\n\t\t\t\tthis.cache.add( cacheKey, cachedMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = cachedMaterial;\n\n\t\t}\n\n\t\t// workarounds for mesh and geometry\n\n\t\tif ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {\n\n\t\t\tconsole.log( 'THREE.GLTFLoader: Duplicating UVs to support aoMap.' );\n\t\t\tgeometry.addAttribute( 'uv2', new BufferAttribute( geometry.attributes.uv.array, 2 ) );\n\n\t\t}\n\n\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t// for GLTFSpecularGlossinessMaterial(ShaderMaterial) uniforms runtime update\n\t\t\tmesh.onBeforeRender = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].refreshUniforms;\n\n\t\t}\n\n\t\tmesh.material = material;\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t * @param {number} materialIndex\n\t * @return {Promise<Material>}\n\t */\n\tGLTFParser.prototype.loadMaterial = function ( materialIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar materialDef = json.materials[ materialIndex ];\n\n\t\tvar materialType;\n\t\tvar materialParams = {};\n\t\tvar materialExtensions = materialDef.extensions || {};\n\n\t\tvar pending = [];\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {\n\n\t\t\tvar sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];\n\t\t\tmaterialType = sgExtension.getMaterialType();\n\t\t\tpending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {\n\n\t\t\tvar kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];\n\t\t\tmaterialType = kmuExtension.getMaterialType();\n\t\t\tpending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else {\n\n\t\t\t// Specification:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\tmaterialType = MeshStandardMaterial;\n\n\t\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t}\n\n\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\tmaterialParams.side = DoubleSide;\n\n\t\t}\n\n\t\tvar alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\tmaterialParams.transparent = true;\n\n\t\t} else {\n\n\t\t\tmaterialParams.transparent = false;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.normalTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );\n\n\t\t\tmaterialParams.normalScale = new Vector2( 1, 1 );\n\n\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\tmaterialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.occlusionTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );\n\n\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveFactor !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tmaterialParams.emissive = new Color().fromArray( materialDef.emissiveFactor );\n\n\t\t}\n\n\t\tif ( materialDef.emissiveTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\tvar material;\n\n\t\t\tif ( materialType === ShaderMaterial ) {\n\n\t\t\t\tmaterial = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new materialType( materialParams );\n\n\t\t\t}\n\n\t\t\tif ( materialDef.name !== undefined ) material.name = materialDef.name;\n\n\t\t\t// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n\t\t\tif ( material.map ) material.map.encoding = sRGBEncoding;\n\t\t\tif ( material.emissiveMap ) material.emissiveMap.encoding = sRGBEncoding;\n\t\t\tif ( material.specularMap ) material.specularMap.encoding = sRGBEncoding;\n\n\t\t\tassignExtrasToUserData( material, materialDef );\n\n\t\t\tif ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );\n\n\t\t\treturn material;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t * @return {Promise<BufferGeometry>}\n\t */\n\tfunction addPrimitiveAttributes( geometry, primitiveDef, parser ) {\n\n\t\tvar attributes = primitiveDef.attributes;\n\n\t\tvar pending = [];\n\n\t\tfunction assignAttributeAccessor( accessorIndex, attributeName ) {\n\n\t\t\treturn parser.getDependency( 'accessor', accessorIndex )\n\t\t\t\t.then( function ( accessor ) {\n\n\t\t\t\t\tgeometry.addAttribute( attributeName, accessor );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tfor ( var gltfAttributeName in attributes ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();\n\n\t\t\t// Skip attributes already provided by e.g. Draco extension.\n\t\t\tif ( threeAttributeName in geometry.attributes ) continue;\n\n\t\t\tpending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );\n\n\t\t}\n\n\t\tif ( primitiveDef.indices !== undefined && ! geometry.index ) {\n\n\t\t\tvar accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {\n\n\t\t\t\tgeometry.setIndex( accessor );\n\n\t\t\t} );\n\n\t\t\tpending.push( accessor );\n\n\t\t}\n\n\t\tassignExtrasToUserData( geometry, primitiveDef );\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\treturn primitiveDef.targets !== undefined\n\t\t\t\t? addMorphTargets( geometry, primitiveDef.targets, parser )\n\t\t\t\t: geometry;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t *\n\t * Creates BufferGeometries from primitives.\n\t *\n\t * @param {Array<GLTF.Primitive>} primitives\n\t * @return {Promise<Array<BufferGeometry>>}\n\t */\n\tGLTFParser.prototype.loadGeometries = function ( primitives ) {\n\n\t\tvar parser = this;\n\t\tvar extensions = this.extensions;\n\t\tvar cache = this.primitiveCache;\n\n\t\tfunction createDracoPrimitive( primitive ) {\n\n\t\t\treturn extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]\n\t\t\t\t.decodePrimitive( primitive, parser )\n\t\t\t\t.then( function ( geometry ) {\n\n\t\t\t\t\treturn addPrimitiveAttributes( geometry, primitive, parser );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tvar pending = [];\n\n\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tvar primitive = primitives[ i ];\n\t\t\tvar cacheKey = createPrimitiveKey( primitive );\n\n\t\t\t// See if we've already created this geometry\n\t\t\tvar cached = cache[ cacheKey ];\n\n\t\t\tif ( cached ) {\n\n\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\tpending.push( cached.promise );\n\n\t\t\t} else {\n\n\t\t\t\tvar geometryPromise;\n\n\t\t\t\tif ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {\n\n\t\t\t\t\t// Use DRACO geometry if available\n\t\t\t\t\tgeometryPromise = createDracoPrimitive( primitive );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\tgeometryPromise = addPrimitiveAttributes( new BufferGeometry(), primitive, parser );\n\n\t\t\t\t}\n\n\t\t\t\t// Cache this geometry\n\t\t\t\tcache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };\n\n\t\t\t\tpending.push( geometryPromise );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t * @param {number} meshIndex\n\t * @return {Promise<Group|Mesh|SkinnedMesh>}\n\t */\n\tGLTFParser.prototype.loadMesh = function ( meshIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\n\t\tvar meshDef = json.meshes[ meshIndex ];\n\t\tvar primitives = meshDef.primitives;\n\n\t\tvar pending = [];\n\n\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tvar material = primitives[ i ].material === undefined\n\t\t\t\t? createDefaultMaterial()\n\t\t\t\t: this.getDependency( 'material', primitives[ i ].material );\n\n\t\t\tpending.push( material );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( originalMaterials ) {\n\n\t\t\treturn parser.loadGeometries( primitives ).then( function ( geometries ) {\n\n\t\t\t\tvar meshes = [];\n\n\t\t\t\tfor ( var i = 0, il = geometries.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar geometry = geometries[ i ];\n\t\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\t\t// 1. create Mesh\n\n\t\t\t\t\tvar mesh;\n\n\t\t\t\t\tvar material = originalMaterials[ i ];\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t\t// .isSkinnedMesh isn't in glTF spec. See .markDefs()\n\t\t\t\t\t\tmesh = meshDef.isSkinnedMesh === true\n\t\t\t\t\t\t\t? new SkinnedMesh( geometry, material )\n\t\t\t\t\t\t\t: new Mesh( geometry, material );\n\n\t\t\t\t\t\tif ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {\n\n\t\t\t\t\t\t\t// we normalize floating point skin weight array to fix malformed assets (see #15319)\n\t\t\t\t\t\t\t// it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs\n\t\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\t\tmesh.drawMode = TriangleStripDrawMode;\n\n\t\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\t\tmesh.drawMode = TriangleFanDrawMode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\t\tmesh = new Line( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\t\tmesh = new LineLoop( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\t\tmesh = new Points( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {\n\n\t\t\t\t\t\tupdateMorphTargets( mesh, meshDef );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.name = meshDef.name || ( 'mesh_' + meshIndex );\n\n\t\t\t\t\tif ( geometries.length > 1 ) mesh.name += '_' + i;\n\n\t\t\t\t\tassignExtrasToUserData( mesh, meshDef );\n\n\t\t\t\t\tparser.assignFinalMaterial( mesh );\n\n\t\t\t\t\tmeshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tif ( meshes.length === 1 ) {\n\n\t\t\t\t\treturn meshes[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar group = new Group();\n\n\t\t\t\tfor ( var i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t * @param {number} cameraIndex\n\t * @return {Promise<THREE.Camera>}\n\t */\n\tGLTFParser.prototype.loadCamera = function ( cameraIndex ) {\n\n\t\tvar camera;\n\t\tvar cameraDef = this.json.cameras[ cameraIndex ];\n\t\tvar params = cameraDef[ cameraDef.type ];\n\n\t\tif ( ! params ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\tcamera = new PerspectiveCamera( _Math.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );\n\n\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\tcamera = new OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );\n\n\t\t}\n\n\t\tif ( cameraDef.name !== undefined ) camera.name = cameraDef.name;\n\n\t\tassignExtrasToUserData( camera, cameraDef );\n\n\t\treturn Promise.resolve( camera );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t * @param {number} skinIndex\n\t * @return {Promise<Object>}\n\t */\n\tGLTFParser.prototype.loadSkin = function ( skinIndex ) {\n\n\t\tvar skinDef = this.json.skins[ skinIndex ];\n\n\t\tvar skinEntry = { joints: skinDef.joints };\n\n\t\tif ( skinDef.inverseBindMatrices === undefined ) {\n\n\t\t\treturn Promise.resolve( skinEntry );\n\n\t\t}\n\n\t\treturn this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {\n\n\t\t\tskinEntry.inverseBindMatrices = accessor;\n\n\t\t\treturn skinEntry;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t * @param {number} animationIndex\n\t * @return {Promise<AnimationClip>}\n\t */\n\tGLTFParser.prototype.loadAnimation = function ( animationIndex ) {\n\n\t\tvar json = this.json;\n\n\t\tvar animationDef = json.animations[ animationIndex ];\n\n\t\tvar pendingNodes = [];\n\t\tvar pendingInputAccessors = [];\n\t\tvar pendingOutputAccessors = [];\n\t\tvar pendingSamplers = [];\n\t\tvar pendingTargets = [];\n\n\t\tfor ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\tvar channel = animationDef.channels[ i ];\n\t\t\tvar sampler = animationDef.samplers[ channel.sampler ];\n\t\t\tvar target = channel.target;\n\t\t\tvar name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n\t\t\tvar input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\tvar output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\tpendingNodes.push( this.getDependency( 'node', name ) );\n\t\t\tpendingInputAccessors.push( this.getDependency( 'accessor', input ) );\n\t\t\tpendingOutputAccessors.push( this.getDependency( 'accessor', output ) );\n\t\t\tpendingSamplers.push( sampler );\n\t\t\tpendingTargets.push( target );\n\n\t\t}\n\n\t\treturn Promise.all( [\n\n\t\t\tPromise.all( pendingNodes ),\n\t\t\tPromise.all( pendingInputAccessors ),\n\t\t\tPromise.all( pendingOutputAccessors ),\n\t\t\tPromise.all( pendingSamplers ),\n\t\t\tPromise.all( pendingTargets )\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar nodes = dependencies[ 0 ];\n\t\t\tvar inputAccessors = dependencies[ 1 ];\n\t\t\tvar outputAccessors = dependencies[ 2 ];\n\t\t\tvar samplers = dependencies[ 3 ];\n\t\t\tvar targets = dependencies[ 4 ];\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tvar node = nodes[ i ];\n\t\t\t\tvar inputAccessor = inputAccessors[ i ];\n\t\t\t\tvar outputAccessor = outputAccessors[ i ];\n\t\t\t\tvar sampler = samplers[ i ];\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( node === undefined ) continue;\n\n\t\t\t\tnode.updateMatrix();\n\t\t\t\tnode.matrixAutoUpdate = true;\n\n\t\t\t\tvar TypedKeyframeTrack;\n\n\t\t\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\t\t\tTypedKeyframeTrack = NumberKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\t\t\tTypedKeyframeTrack = QuaternionKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PATH_PROPERTIES.position:\n\t\t\t\t\tcase PATH_PROPERTIES.scale:\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tTypedKeyframeTrack = VectorKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tvar targetName = node.name ? node.name : node.uuid;\n\n\t\t\t\tvar interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : InterpolateLinear;\n\n\t\t\t\tvar targetNames = [];\n\n\t\t\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\t\t\t// Node may be a Group (glTF mesh with several primitives) or a Mesh.\n\t\t\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\t\t\tif ( object.isMesh === true && object.morphTargetInfluences ) {\n\n\t\t\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetNames.push( targetName );\n\n\t\t\t\t}\n\n\t\t\t\tvar outputArray = outputAccessor.array;\n\n\t\t\t\tif ( outputAccessor.normalized ) {\n\n\t\t\t\t\tvar scale;\n\n\t\t\t\t\tif ( outputArray.constructor === Int8Array ) {\n\n\t\t\t\t\t\tscale = 1 / 127;\n\n\t\t\t\t\t} else if ( outputArray.constructor === Uint8Array ) {\n\n\t\t\t\t\t\tscale = 1 / 255;\n\n\t\t\t\t\t} else if ( outputArray.constructor == Int16Array ) {\n\n\t\t\t\t\t\tscale = 1 / 32767;\n\n\t\t\t\t\t} else if ( outputArray.constructor === Uint16Array ) {\n\n\t\t\t\t\t\tscale = 1 / 65535;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar scaled = new Float32Array( outputArray.length );\n\n\t\t\t\t\tfor ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tscaled[ j ] = outputArray[ j ] * scale;\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutputArray = scaled;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar track = new TypedKeyframeTrack(\n\t\t\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\t\t\tinputAccessor.array,\n\t\t\t\t\t\toutputArray,\n\t\t\t\t\t\tinterpolation\n\t\t\t\t\t);\n\n\t\t\t\t\t// Override interpolation with custom factory method.\n\t\t\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\t\t\ttrack.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {\n\n\t\t\t\t\t\t\t// A CUBICSPLINE keyframe in glTF has three output values for each input value,\n\t\t\t\t\t\t\t// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n\t\t\t\t\t\t\t// must be divided by three to get the interpolant's sampleSize argument.\n\n\t\t\t\t\t\t\treturn new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\t\t\t\t\t\ttrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( track );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;\n\n\t\t\treturn new AnimationClip( name, undefined, tracks );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t * @param {number} nodeIndex\n\t * @return {Promise<Object3D>}\n\t */\n\tGLTFParser.prototype.loadNode = function ( nodeIndex ) {\n\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar parser = this;\n\n\t\tvar meshReferences = json.meshReferences;\n\t\tvar meshUses = json.meshUses;\n\n\t\tvar nodeDef = json.nodes[ nodeIndex ];\n\n\t\treturn ( function () {\n\n\t\t\tvar pending = [];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {\n\n\t\t\t\t\tvar node;\n\n\t\t\t\t\tif ( meshReferences[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\t\t\tvar instanceNum = meshUses[ nodeDef.mesh ] ++;\n\n\t\t\t\t\t\tnode = mesh.clone();\n\t\t\t\t\t\tnode.name += '_instance_' + instanceNum;\n\n\t\t\t\t\t\t// onBeforeRender copy for Specular-Glossiness\n\t\t\t\t\t\tnode.onBeforeRender = mesh.onBeforeRender;\n\n\t\t\t\t\t\tfor ( var i = 0, il = node.children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tnode.children[ i ].name += '_instance_' + instanceNum;\n\t\t\t\t\t\t\tnode.children[ i ].onBeforeRender = mesh.children[ i ].onBeforeRender;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode = mesh;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if weights are provided on the node, override weights on the mesh.\n\t\t\t\t\tif ( nodeDef.weights !== undefined ) {\n\n\t\t\t\t\t\tnode.traverse( function ( o ) {\n\n\t\t\t\t\t\t\tif ( ! o.isMesh ) return;\n\n\t\t\t\t\t\t\tfor ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\to.morphTargetInfluences[ i ] = nodeDef.weights[ i ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'camera', nodeDef.camera ) );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.extensions\n\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]\n\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'light', nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending );\n\n\t\t}() ).then( function ( objects ) {\n\n\t\t\tvar node;\n\n\t\t\t// .isBone isn't in glTF spec. See .markDefs\n\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\tnode = new Bone();\n\n\t\t\t} else if ( objects.length > 1 ) {\n\n\t\t\t\tnode = new Group();\n\n\t\t\t} else if ( objects.length === 1 ) {\n\n\t\t\t\tnode = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tnode = new Object3D();\n\n\t\t\t}\n\n\t\t\tif ( node !== objects[ 0 ] ) {\n\n\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tnode.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.name !== undefined ) {\n\n\t\t\t\tnode.userData.name = nodeDef.name;\n\t\t\t\tnode.name = PropertyBinding.sanitizeNodeName( nodeDef.name );\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( node, nodeDef );\n\n\t\t\tif ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );\n\n\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\tvar matrix = new Matrix4();\n\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\tnode.applyMatrix( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t * @param {number} sceneIndex\n\t * @return {Promise<Scene>}\n\t */\n\tGLTFParser.prototype.loadScene = function () {\n\n\t\t// scene node hierachy builder\n\n\t\tfunction buildNodeHierachy( nodeId, parentObject, json, parser ) {\n\n\t\t\tvar nodeDef = json.nodes[ nodeId ];\n\n\t\t\treturn parser.getDependency( 'node', nodeId ).then( function ( node ) {\n\n\t\t\t\tif ( nodeDef.skin === undefined ) return node;\n\n\t\t\t\t// build skeleton here as well\n\n\t\t\t\tvar skinEntry;\n\n\t\t\t\treturn parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {\n\n\t\t\t\t\tskinEntry = skin;\n\n\t\t\t\t\tvar pendingJoints = [];\n\n\t\t\t\t\tfor ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tpendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.all( pendingJoints );\n\n\t\t\t\t} ).then( function ( jointNodes ) {\n\n\t\t\t\t\tnode.traverse( function ( mesh ) {\n\n\t\t\t\t\t\tif ( ! mesh.isMesh ) return;\n\n\t\t\t\t\t\tvar bones = [];\n\t\t\t\t\t\tvar boneInverses = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar jointNode = jointNodes[ j ];\n\n\t\t\t\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\t\t\t\tvar mat = new Matrix4();\n\n\t\t\t\t\t\t\t\tif ( skinEntry.inverseBindMatrices !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tmat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[ j ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmesh.bind( new Skeleton( bones, boneInverses ), mesh.matrixWorld );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} );\n\n\t\t\t} ).then( function ( node ) {\n\n\t\t\t\t// build node hierachy\n\n\t\t\t\tparentObject.add( node );\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( nodeDef.children ) {\n\n\t\t\t\t\tvar children = nodeDef.children;\n\n\t\t\t\t\tfor ( var i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar child = children[ i ];\n\t\t\t\t\t\tpending.push( buildNodeHierachy( child, node, json, parser ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn function loadScene( sceneIndex ) {\n\n\t\t\tvar json = this.json;\n\t\t\tvar extensions = this.extensions;\n\t\t\tvar sceneDef = this.json.scenes[ sceneIndex ];\n\t\t\tvar parser = this;\n\n\t\t\tvar scene = new Scene();\n\t\t\tif ( sceneDef.name !== undefined ) scene.name = sceneDef.name;\n\n\t\t\tassignExtrasToUserData( scene, sceneDef );\n\n\t\t\tif ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );\n\n\t\t\tvar nodeIds = sceneDef.nodes || [];\n\n\t\t\tvar pending = [];\n\n\t\t\tfor ( var i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\t\tpending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\t\treturn scene;\n\n\t\t\t} );\n\n\t\t};\n\n\t}();\n\n\treturn GLTFLoader;\n\n} )();\n\nexport { GLTFLoader };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA,IAAI,aAAe,WAAY;AAE9B,uBAAqB,SAAU;AAE9B,SAAK,UAAY,YAAY,SAAc,UAAU;AACrD,SAAK,cAAc;AACnB,SAAK,YAAY;AAAA;AAIlB,cAAW,YAAY;AAAA,IAEtB,aAAa;AAAA,IAEb,aAAa;AAAA,IAEb,MAAM,SAAW,KAAK,QAAQ,YAAY,SAAU;AAEnD,UAAI,QAAQ;AAEZ,UAAI;AAEJ,UAAK,KAAK,iBAAiB,QAAY;AAEtC,uBAAe,KAAK;AAAA,iBAET,KAAK,SAAS,QAAY;AAErC,uBAAe,KAAK;AAAA,aAEd;AAEN,uBAAe,YAAY,eAAgB;AAAA;AAO5C,YAAM,QAAQ,UAAW;AAEzB,UAAI,WAAW,SAAW,GAAI;AAE7B,YAAK,SAAU;AAEd,kBAAS;AAAA,eAEH;AAEN,kBAAQ,MAAO;AAAA;AAIhB,cAAM,QAAQ,UAAW;AACzB,cAAM,QAAQ,QAAS;AAAA;AAIxB,UAAI,SAAS,IAAI,WAAY,MAAM;AAEnC,aAAO,QAAS,KAAK;AACrB,aAAO,gBAAiB;AAExB,UAAK,MAAM,gBAAgB,mBAAoB;AAE9C,eAAO,mBAAoB;AAAA;AAI5B,aAAO,KAAM,KAAK,SAAW,MAAO;AAEnC,YAAI;AAEH,gBAAM,MAAO,MAAM,cAAc,SAAW,MAAO;AAElD,mBAAQ;AAER,kBAAM,QAAQ,QAAS;AAAA,aAErB;AAAA,iBAEM,GAAR;AAED,mBAAU;AAAA;AAAA,SAIT,YAAY;AAAA;AAAA,IAIhB,gBAAgB,SAAW,OAAQ;AAElC,WAAK,cAAc;AACnB,aAAO;AAAA;AAAA,IAIR,SAAS,SAAW,OAAQ;AAE3B,WAAK,OAAO;AACZ,aAAO;AAAA;AAAA,IAIR,iBAAiB,SAAW,OAAQ;AAEnC,WAAK,eAAe;AACpB,aAAO;AAAA;AAAA,IAIR,gBAAgB,SAAW,aAAc;AAExC,WAAK,cAAc;AACnB,aAAO;AAAA;AAAA,IAIR,cAAc,SAAW,WAAY;AAEpC,WAAK,YAAY;AACjB,aAAO;AAAA;AAAA,IAIR,OAAO,SAAW,MAAM,MAAM,QAAQ,SAAU;AAE/C,UAAI;AACJ,UAAI,aAAa;AAEjB,UAAK,OAAO,SAAS,UAAW;AAE/B,kBAAU;AAAA,aAEJ;AAEN,YAAI,QAAQ,YAAY,WAAY,IAAI,WAAY,MAAM,GAAG;AAE7D,YAAK,UAAU,+BAAgC;AAE9C,cAAI;AAEH,uBAAY,WAAW,mBAAoB,IAAI,oBAAqB;AAAA,mBAE3D,OAAR;AAED,gBAAK;AAAU,sBAAS;AACxB;AAAA;AAID,oBAAU,WAAY,WAAW,iBAAkB;AAAA,eAE7C;AAEN,oBAAU,YAAY,WAAY,IAAI,WAAY;AAAA;AAAA;AAMpD,UAAI,OAAO,KAAK,MAAO;AAEvB,UAAK,KAAK,UAAU,UAAa,KAAK,MAAM,QAAS,KAAM,GAAI;AAE9D,YAAK;AAAU,kBAAS,IAAI,MAAO;AACnC;AAAA;AAID,UAAK,KAAK,gBAAiB;AAE1B,iBAAU,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,EAAG,GAAI;AAEvD,cAAI,gBAAgB,KAAK,eAAgB;AACzC,cAAI,qBAAqB,KAAK,sBAAsB;AAEpD,kBAAS;AAAA,iBAEH,WAAW;AACf,yBAAY,iBAAkB,IAAI,oBAAqB;AACvD;AAAA,iBAEI,WAAW;AACf,yBAAY,iBAAkB,IAAI;AAClC;AAAA,iBAEI,WAAW;AACf,yBAAY,iBAAkB,IAAI;AAClC;AAAA,iBAEI,WAAW;AACf,yBAAY,iBAAkB,IAAI,kCAAmC,MAAM,KAAK;AAChF;AAAA,iBAEI,WAAW;AACf,yBAAY,WAAW,oBAAqB,IAAI,wBAAyB,KAAK;AAC9E;AAAA,iBAEI,WAAW;AACf,yBAAY,WAAW,yBAA0B,IAAI;AACrD;AAAA;AAIA,kBAAK,mBAAmB,QAAS,kBAAmB,GAAI;AAEvD,wBAAQ,KAAM,0CAA0C,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAU7E,UAAI,SAAS,IAAI,WAAY,MAAM,YAAY;AAAA,QAE9C,MAAM,QAAQ,KAAK,gBAAgB;AAAA,QACnC,aAAa,KAAK;AAAA,QAClB,SAAS,KAAK;AAAA;AAIf,aAAO,MAAO,QAAQ;AAAA;AAAA;AAQxB,0BAAwB;AAEvB,QAAI,UAAU;AAEd,WAAO;AAAA,MAEN,KAAK,SAAW,KAAM;AAErB,eAAO,QAAS;AAAA;AAAA,MAIjB,KAAK,SAAW,KAAK,QAAS;AAE7B,gBAAS,OAAQ;AAAA;AAAA,MAIlB,QAAQ,SAAW,KAAM;AAExB,eAAO,QAAS;AAAA;AAAA,MAIjB,WAAW,WAAY;AAEtB,kBAAU;AAAA;AAAA;AAAA;AAYb,MAAI,aAAa;AAAA,IAChB,iBAAiB;AAAA,IACjB,4BAA4B;AAAA,IAC5B,qBAAqB;AAAA,IACrB,uCAAuC;AAAA,IACvC,qBAAqB;AAAA,IACrB,uBAAuB;AAAA,IACvB,kBAAkB;AAAA;AAUnB,mCAAkC,WAAY;AAE7C,QAAK,CAAE,WAAY;AAElB,YAAM,IAAI,MAAO;AAAA;AAIlB,SAAK,OAAO,WAAW;AACvB,SAAK,YAAY;AAAA;AASlB,+BAA8B,MAAO;AAEpC,SAAK,OAAO,WAAW;AAEvB,QAAI,YAAc,KAAK,cAAc,KAAK,WAAY,WAAW,wBAA2B;AAC5F,SAAK,YAAY,UAAU,UAAU;AAAA;AAItC,sBAAoB,UAAU,YAAY,SAAW,YAAa;AAEjE,QAAI,WAAW,KAAK,UAAW;AAC/B,QAAI;AAEJ,QAAI,QAAQ,IAAI,MAAO;AACvB,QAAK,SAAS,UAAU;AAAY,YAAM,UAAW,SAAS;AAE9D,QAAI,QAAQ,SAAS,UAAU,SAAY,SAAS,QAAQ;AAE5D,YAAS,SAAS;AAAA,WAEZ;AACJ,oBAAY,IAAI,iBAAkB;AAClC,kBAAU,OAAO,SAAS,IAAK,GAAG,GAAG;AACrC,kBAAU,IAAK,UAAU;AACzB;AAAA,WAEI;AACJ,oBAAY,IAAI,WAAY;AAC5B,kBAAU,WAAW;AACrB;AAAA,WAEI;AACJ,oBAAY,IAAI,UAAW;AAC3B,kBAAU,WAAW;AAErB,iBAAS,OAAO,SAAS,QAAQ;AACjC,iBAAS,KAAK,iBAAiB,SAAS,KAAK,mBAAmB,SAAY,SAAS,KAAK,iBAAiB;AAC3G,iBAAS,KAAK,iBAAiB,SAAS,KAAK,mBAAmB,SAAY,SAAS,KAAK,iBAAiB,KAAK,KAAK;AACrH,kBAAU,QAAQ,SAAS,KAAK;AAChC,kBAAU,WAAW,IAAM,SAAS,KAAK,iBAAiB,SAAS,KAAK;AACxE,kBAAU,OAAO,SAAS,IAAK,GAAG,GAAG;AACrC,kBAAU,IAAK,UAAU;AACzB;AAAA;AAGA,cAAM,IAAI,MAAO,+CAA+C,SAAS,OAAO;AAAA;AAMlF,cAAU,SAAS,IAAK,GAAG,GAAG;AAE9B,cAAU,QAAQ;AAElB,QAAK,SAAS,cAAc;AAAY,gBAAU,YAAY,SAAS;AAEvE,cAAU,OAAO,SAAS,QAAU,WAAW;AAE/C,WAAO,QAAQ,QAAS;AAAA;AASzB,yCAAuC;AAEtC,SAAK,OAAO,WAAW;AAAA;AAIxB,8BAA4B,UAAU,kBAAkB,WAAY;AAEnE,WAAO;AAAA;AAIR,8BAA4B,UAAU,eAAe,SAAW,gBAAgB,aAAa,QAAS;AAErG,QAAI,UAAU;AAEd,mBAAe,QAAQ,IAAI,MAAO,GAAK,GAAK;AAC5C,mBAAe,UAAU;AAEzB,QAAI,oBAAoB,YAAY;AAEpC,QAAK,mBAAoB;AAExB,UAAK,MAAM,QAAS,kBAAkB,kBAAoB;AAEzD,YAAI,QAAQ,kBAAkB;AAE9B,uBAAe,MAAM,UAAW;AAChC,uBAAe,UAAU,MAAO;AAAA;AAIjC,UAAK,kBAAkB,qBAAqB,QAAY;AAEvD,gBAAQ,KAAM,OAAO,cAAe,gBAAgB,OAAO,kBAAkB;AAAA;AAAA;AAM/E,WAAO,QAAQ,IAAK;AAAA;AAKrB,MAAI,gCAAgC;AACpC,MAAI,iCAAiC;AACrC,MAAI,+BAA+B,EAAE,MAAM,YAAY,KAAK;AAE5D,+BAA8B,MAAO;AAEpC,SAAK,OAAO,WAAW;AACvB,SAAK,UAAU;AACf,SAAK,OAAO;AAEZ,QAAI,aAAa,IAAI,SAAU,MAAM,GAAG;AAExC,SAAK,SAAS;AAAA,MACb,OAAO,YAAY,WAAY,IAAI,WAAY,KAAK,MAAO,GAAG;AAAA,MAC9D,SAAS,WAAW,UAAW,GAAG;AAAA,MAClC,QAAQ,WAAW,UAAW,GAAG;AAAA;AAGlC,QAAK,KAAK,OAAO,UAAU,+BAAgC;AAE1D,YAAM,IAAI,MAAO;AAAA,eAEN,KAAK,OAAO,UAAU,GAAM;AAEvC,YAAM,IAAI,MAAO;AAAA;AAIlB,QAAI,YAAY,IAAI,SAAU,MAAM;AACpC,QAAI,aAAa;AAEjB,WAAQ,aAAa,UAAU,YAAa;AAE3C,UAAI,cAAc,UAAU,UAAW,YAAY;AACnD,oBAAc;AAEd,UAAI,YAAY,UAAU,UAAW,YAAY;AACjD,oBAAc;AAEd,UAAK,cAAc,6BAA6B,MAAO;AAEtD,YAAI,eAAe,IAAI,WAAY,MAAM,iCAAiC,YAAY;AACtF,aAAK,UAAU,YAAY,WAAY;AAAA,iBAE5B,cAAc,6BAA6B,KAAM;AAE5D,YAAI,aAAa,iCAAiC;AAClD,aAAK,OAAO,KAAK,MAAO,YAAY,aAAa;AAAA;AAMlD,oBAAc;AAAA;AAIf,QAAK,KAAK,YAAY,MAAO;AAE5B,YAAM,IAAI,MAAO;AAAA;AAAA;AAWnB,6CAA4C,MAAM,aAAc;AAE/D,QAAK,CAAE,aAAc;AAEpB,YAAM,IAAI,MAAO;AAAA;AAIlB,SAAK,OAAO,WAAW;AACvB,SAAK,OAAO;AACZ,SAAK,cAAc;AAAA;AAIpB,oCAAkC,UAAU,kBAAkB,SAAW,WAAW,QAAS;AAE5F,QAAI,OAAO,KAAK;AAChB,QAAI,cAAc,KAAK;AACvB,QAAI,kBAAkB,UAAU,WAAY,KAAK,MAAO;AACxD,QAAI,mBAAmB,UAAU,WAAY,KAAK,MAAO;AACzD,QAAI,oBAAoB;AACxB,QAAI,yBAAyB;AAC7B,QAAI,mBAAmB;AAEvB,aAAU,iBAAiB,kBAAmB;AAE7C,UAAI,qBAAqB,WAAY,kBAAmB,cAAc;AAEtE,wBAAmB,sBAAuB,iBAAkB;AAAA;AAI7D,SAAM,iBAAiB,UAAU,YAAa;AAE7C,UAAI,qBAAqB,WAAY,kBAAmB,cAAc;AAEtE,UAAK,iBAAkB,mBAAoB,QAAY;AAEtD,YAAI,cAAc,KAAK,UAAW,UAAU,WAAY;AACxD,YAAI,gBAAgB,sBAAuB,YAAY;AAEvD,yBAAkB,sBAAuB;AACzC,+BAAwB,sBAAuB,YAAY,eAAe;AAAA;AAAA;AAM5E,WAAO,OAAO,cAAe,cAAc,iBAAkB,KAAM,SAAW,YAAa;AAE1F,aAAO,IAAI,QAAS,SAAW,SAAU;AAExC,oBAAY,gBAAiB,YAAY,SAAW,UAAW;AAE9D,mBAAU,kBAAiB,SAAS,YAAa;AAEhD,gBAAI,YAAY,SAAS,WAAY;AACrC,gBAAI,aAAa,uBAAwB;AAEzC,gBAAK,eAAe;AAAY,wBAAU,aAAa;AAAA;AAIxD,kBAAS;AAAA,WAEP,mBAAmB;AAAA;AAAA;AAAA;AAazB,2CAAyC;AAExC,SAAK,OAAO,WAAW;AAAA;AAIxB,gCAA8B,UAAU,gBAAgB,SAAW,SAAS,WAAY;AAEvF,cAAU,QAAQ;AAElB,QAAK,UAAU,WAAW,QAAY;AAErC,cAAQ,OAAO,UAAW,UAAU;AAAA;AAIrC,QAAK,UAAU,aAAa,QAAY;AAEvC,cAAQ,WAAW,UAAU;AAAA;AAI9B,QAAK,UAAU,UAAU,QAAY;AAEpC,cAAQ,OAAO,UAAW,UAAU;AAAA;AAIrC,QAAK,UAAU,aAAa,QAAY;AAEvC,cAAQ,KAAM,0CAA0C,KAAK,OAAO;AAAA;AAIrE,YAAQ,cAAc;AAEtB,WAAO;AAAA;AASR,yDAAuD;AAEtD,WAAO;AAAA,MAEN,MAAM,WAAW;AAAA,MAEjB,0BAA0B;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA,MAGD,iBAAiB,WAAY;AAE5B,eAAO;AAAA;AAAA,MAIR,cAAc,SAAW,gBAAgB,aAAa,QAAS;AAE9D,YAAI,wBAAwB,YAAY,WAAY,KAAK;AAEzD,YAAI,SAAS,UAAW;AAExB,YAAI,WAAW,cAAc,MAAO,OAAO;AAE3C,YAAI,+BAA+B;AAAA,UAClC;AAAA,UACA;AAAA,UACA;AAAA,UACC,KAAM;AAER,YAAI,iCAAiC;AAAA,UACpC;AAAA,UACA;AAAA,UACA;AAAA,UACC,KAAM;AAER,YAAI,2BAA2B;AAAA,UAC9B;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACC,KAAM;AAER,YAAI,6BAA6B;AAAA,UAChC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACC,KAAM;AAER,YAAI,6BAA6B;AAAA,UAChC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACC,KAAM;AAER,YAAI,iBAAiB,OAAO,eAC1B,QAAS,4BAA4B,0BACrC,QAAS,4BAA4B,6BACrC,QAAS,yCAAyC,8BAClD,QAAS,yCAAyC,gCAClD,QAAS,oCAAoC,0BAC7C,QAAS,oCAAoC,4BAC7C,QAAS,uCAAuC;AAElD,eAAO,SAAS;AAChB,eAAO,SAAS;AAChB,eAAO,SAAS;AAChB,eAAO,SAAS;AAEhB,iBAAS,WAAW,EAAE,OAAO,IAAI,QAAQ,OAAQ;AACjD,iBAAS,aAAa,EAAE,OAAO;AAC/B,iBAAS,cAAc,EAAE,OAAO;AAChC,iBAAS,gBAAgB,EAAE,OAAO;AAElC,uBAAe,eAAe,OAAO;AACrC,uBAAe,iBAAiB;AAChC,uBAAe,WAAW;AAC1B,uBAAe,UAAU,EAAE,YAAY;AAEvC,uBAAe,QAAQ,IAAI,MAAO,GAAK,GAAK;AAC5C,uBAAe,UAAU;AAEzB,YAAI,UAAU;AAEd,YAAK,MAAM,QAAS,sBAAsB,gBAAkB;AAE3D,cAAI,QAAQ,sBAAsB;AAElC,yBAAe,MAAM,UAAW;AAChC,yBAAe,UAAU,MAAO;AAAA;AAIjC,YAAK,sBAAsB,mBAAmB,QAAY;AAEzD,kBAAQ,KAAM,OAAO,cAAe,gBAAgB,OAAO,sBAAsB;AAAA;AAIlF,uBAAe,WAAW,IAAI,MAAO,GAAK,GAAK;AAC/C,uBAAe,aAAa,sBAAsB,qBAAqB,SAAY,sBAAsB,mBAAmB;AAC5H,uBAAe,WAAW,IAAI,MAAO,GAAK,GAAK;AAE/C,YAAK,MAAM,QAAS,sBAAsB,iBAAmB;AAE5D,yBAAe,SAAS,UAAW,sBAAsB;AAAA;AAI1D,YAAK,sBAAsB,8BAA8B,QAAY;AAEpE,cAAI,kBAAkB,sBAAsB;AAC5C,kBAAQ,KAAM,OAAO,cAAe,gBAAgB,iBAAiB;AACrE,kBAAQ,KAAM,OAAO,cAAe,gBAAgB,eAAe;AAAA;AAIpE,eAAO,QAAQ,IAAK;AAAA;AAAA,MAIrB,gBAAgB,SAAW,QAAS;AAInC,YAAI,WAAW,IAAI,eAAgB;AAAA,UAClC,SAAS,OAAO;AAAA,UAChB,cAAc,OAAO;AAAA,UACrB,gBAAgB,OAAO;AAAA,UACvB,UAAU,OAAO;AAAA,UACjB,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,SAAS,OAAO;AAAA,UAChB,aAAa,OAAO;AAAA;AAGrB,iBAAS,mCAAmC;AAE5C,iBAAS,QAAQ,OAAO;AAExB,iBAAS,MAAM,OAAO,QAAQ,SAAY,OAAO,OAAO;AAExD,iBAAS,WAAW;AACpB,iBAAS,oBAAoB;AAE7B,iBAAS,QAAQ,OAAO,UAAU,SAAY,OAAO,OAAO;AAC5D,iBAAS,iBAAiB;AAE1B,iBAAS,WAAW,OAAO;AAC3B,iBAAS,oBAAoB;AAC7B,iBAAS,cAAc,OAAO,gBAAgB,SAAY,OAAO,OAAO;AAExE,iBAAS,UAAU,OAAO,YAAY,SAAY,OAAO,OAAO;AAChE,iBAAS,YAAY;AAErB,iBAAS,YAAY,OAAO,cAAc,SAAY,OAAO,OAAO;AAEpE,YAAK,OAAO;AAAc,mBAAS,cAAc,OAAO;AAExD,iBAAS,kBAAkB;AAC3B,iBAAS,oBAAoB;AAC7B,iBAAS,mBAAmB;AAE5B,iBAAS,cAAc,OAAO,gBAAgB,SAAY,OAAO,OAAO;AACxE,iBAAS,WAAW,OAAO;AAE3B,iBAAS,gBAAgB,OAAO,kBAAkB,SAAY,OAAO,OAAO;AAC5E,iBAAS,aAAa,OAAO;AAE7B,iBAAS,WAAW;AAEpB,iBAAS,SAAS,OAAO,WAAW,SAAY,OAAO,OAAO;AAC9D,iBAAS,kBAAkB;AAE3B,iBAAS,kBAAkB;AAE3B,iBAAS,WAAW,cAAc;AAElC,eAAO;AAAA;AAAA,MAgBR,eAAe,SAAW,QAAS;AAElC,YAAI,SAAS,OAAO;AAEpB,eAAO,mCAAmC;AAE1C,YAAI,SAAS,KAAK;AAElB,iBAAU,IAAI,GAAG,KAAK,OAAO,QAAQ,IAAI,IAAI,KAAO;AAEnD,cAAI,QAAQ,OAAQ,OAAQ;AAC5B,iBAAQ,OAAQ,MAAU,SAAS,MAAM,UAAY,MAAM,UAAU;AAAA;AAItE,eAAO;AAAA;AAAA,MAKR,iBAAiB,SAAW,UAAU,OAAO,QAAQ,UAAU,UAAW;AAEzE,YAAK,SAAS,qCAAqC,MAAO;AAEzD;AAAA;AAID,YAAI,WAAW,SAAS;AACxB,YAAI,UAAU,SAAS;AAEvB,iBAAS,QAAQ,QAAQ,SAAS;AAElC,iBAAS,QAAQ,MAAM,KAAM,SAAS;AACtC,iBAAS,SAAS,MAAM,KAAM,SAAS,UAAW,eAAgB,SAAS;AAE3E,iBAAS,IAAI,QAAQ,SAAS;AAC9B,iBAAS,YAAY,QAAQ,SAAS;AACtC,iBAAS,SAAS,QAAQ,SAAS;AAEnC,iBAAS,SAAS,QAAQ,SAAS;AACnC,iBAAS,kBAAkB,QAAQ,SAAS;AAE5C,iBAAS,MAAM,QAAQ,SAAS;AAChC,iBAAS,eAAe,QAAQ,SAAS;AAUzC,YAAI;AAEJ,YAAK,SAAS,KAAM;AAEnB,uBAAa,SAAS;AAAA,mBAEX,SAAS,aAAc;AAElC,uBAAa,SAAS;AAAA,mBAEX,SAAS,iBAAkB;AAEtC,uBAAa,SAAS;AAAA,mBAEX,SAAS,WAAY;AAEhC,uBAAa,SAAS;AAAA,mBAEX,SAAS,SAAU;AAE9B,uBAAa,SAAS;AAAA,mBAEX,SAAS,eAAgB;AAEpC,uBAAa,SAAS;AAAA,mBAEX,SAAS,UAAW;AAE/B,uBAAa,SAAS;AAAA,mBAEX,SAAS,aAAc;AAElC,uBAAa,SAAS;AAAA;AAIvB,YAAK,eAAe,QAAY;AAG/B,cAAK,WAAW,qBAAsB;AAErC,yBAAa,WAAW;AAAA;AAIzB,cAAK,WAAW,qBAAqB,MAAO;AAE3C,uBAAW;AAAA;AAIZ,mBAAS,YAAY,MAAM,KAAM,WAAW;AAAA;AAI7C,YAAK,SAAS,QAAS;AAEtB,mBAAS,OAAO,QAAQ,SAAS;AACjC,mBAAS,gBAAgB,QAAQ,SAAS;AAM1C,mBAAS,WAAW,QAAQ,SAAS,OAAO,gBAAgB,KAAM;AAElE,mBAAS,aAAa,QAAQ,SAAS;AACvC,mBAAS,gBAAgB,QAAQ,SAAS;AAE1C,mBAAS,YAAY,QAAQ,SAAS,WAAW,IAAK,SAAS,QAAS;AAAA;AAIzE,iBAAS,SAAS,MAAM,KAAM,SAAS;AACvC,iBAAS,WAAW,QAAQ,SAAS;AAErC,iBAAS,cAAc,QAAQ,SAAS;AAExC,iBAAS,YAAY,QAAQ,SAAS;AACtC,iBAAS,QAAQ,QAAQ,SAAS;AAClC,iBAAS,UAAU,QAAQ,SAAS;AAEpC,iBAAS,gBAAgB,QAAQ,SAAS;AAC1C,iBAAS,kBAAkB,QAAQ,SAAS;AAC5C,iBAAS,iBAAiB,QAAQ,SAAS;AAE3C,YAAK,SAAS,cAAc,UAAU,QAAQ,QAAQ,sBAAsB,QAAY;AAEvF,kBAAQ,oBAAoB;AAE5B,kBAAQ,mBAAmB;AAAA;AAI5B,YAAK,SAAS,cAAc,UAAU,QAAQ,QAAQ,sBAAsB,QAAY;AAEvF,iBAAO,QAAQ;AACf,iBAAO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAgBnB,sCAAqC,oBAAoB,cAAc,YAAY,cAAe;AAEjG,gBAAY,KAAM,MAAM,oBAAoB,cAAc,YAAY;AAAA;AAIvE,6BAA2B,YAAY,OAAO,OAAQ,YAAY;AAClE,6BAA2B,UAAU,cAAc;AAEnD,6BAA2B,UAAU,mBAAmB,SAAW,OAAQ;AAK1E,QAAI,SAAS,KAAK,cACjB,SAAS,KAAK,cACd,YAAY,KAAK,WACjB,SAAS,QAAQ,YAAY,IAAI;AAElC,aAAU,IAAI,GAAG,MAAM,WAAW,KAAO;AAExC,aAAQ,KAAM,OAAQ,SAAS;AAAA;AAIhC,WAAO;AAAA;AAIR,6BAA2B,UAAU,eAAe,2BAA2B,UAAU;AAEzF,6BAA2B,UAAU,YAAY,2BAA2B,UAAU;AAEtF,6BAA2B,UAAU,eAAe,SAAW,IAAI,IAAI,GAAG,IAAK;AAE9E,QAAI,SAAS,KAAK;AAClB,QAAI,SAAS,KAAK;AAClB,QAAI,SAAS,KAAK;AAElB,QAAI,UAAU,SAAS;AACvB,QAAI,UAAU,SAAS;AAEvB,QAAI,KAAK,KAAK;AAEd,QAAI,IAAM,KAAI,MAAO;AACrB,QAAI,KAAK,IAAI;AACb,QAAI,MAAM,KAAK;AAEf,QAAI,UAAU,KAAK;AACnB,QAAI,UAAU,UAAU;AAExB,QAAI,KAAK,KAAM,MAAM,IAAI;AACzB,QAAI,KAAK,MAAM;AACf,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,KAAK,KAAK;AAInB,aAAU,IAAI,GAAG,MAAM,QAAQ,KAAO;AAErC,UAAI,KAAK,OAAQ,UAAU,IAAI;AAC/B,UAAI,KAAK,OAAQ,UAAU,IAAI,WAAY;AAC3C,UAAI,KAAK,OAAQ,UAAU,IAAI;AAC/B,UAAI,KAAK,OAAQ,UAAU,KAAM;AAEjC,aAAQ,KAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAAA;AAIlD,WAAO;AAAA;AAUR,MAAI,kBAAkB;AAAA,IACrB,OAAO;AAAA,IAEP,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,cAAc;AAAA,IACd,eAAe;AAAA,IACf,gBAAgB;AAAA;AAGjB,MAAI,wBAAwB;AAAA,IAC3B,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA;AAGP,MAAI,gBAAgB;AAAA,IACnB,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA;AAGP,MAAI,kBAAkB;AAAA,IACrB,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA;AAGR,MAAI,mBAAmB;AAAA,IACtB,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA;AAGT,MAAI,aAAa;AAAA,IAChB,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,WAAW;AAAA,IACX,UAAU;AAAA;AAGX,MAAI,kBAAkB;AAAA,IACrB,OAAO;AAAA,IACP,aAAa;AAAA,IACb,UAAU;AAAA,IACV,SAAS;AAAA;AAGV,MAAI,gBAAgB;AAAA,IACnB,aAAa;AAAA,IAEb,QAAQ;AAAA,IACR,MAAM;AAAA;AAGP,MAAI,cAAc;AAAA,IACjB,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA;AAGR,MAAI,oBAAoB;AAAA,IACvB,aAAa;AAAA,IACb,cAAc;AAAA;AAKf,sBAAqB,KAAK,MAAO;AAGhC,QAAK,OAAO,QAAQ,YAAY,QAAQ;AAAK,aAAO;AAGpD,QAAK,gBAAgB,KAAM,SAAU,MAAM,KAAM,MAAQ;AAExD,aAAO,KAAK,QAAS,2BAA4B;AAAA;AAKlD,QAAK,mBAAmB,KAAM;AAAQ,aAAO;AAG7C,QAAK,gBAAgB,KAAM;AAAQ,aAAO;AAG1C,QAAK,aAAa,KAAM;AAAQ,aAAO;AAGvC,WAAO,OAAO;AAAA;AAIf,MAAI;AAKJ,mCAAiC;AAEhC,sBAAkB,mBAAmB,IAAI,qBAAsB;AAAA,MAC9D,OAAO;AAAA,MACP,UAAU;AAAA,MACV,WAAW;AAAA,MACX,WAAW;AAAA,MACX,aAAa;AAAA,MACb,WAAW;AAAA,MACX,MAAM;AAAA;AAGP,WAAO;AAAA;AAIR,0CAAyC,iBAAiB,QAAQ,WAAY;AAI7E,aAAU,QAAQ,UAAU,YAAa;AAExC,UAAK,gBAAiB,UAAW,QAAY;AAE5C,eAAO,SAAS,iBAAiB,OAAO,SAAS,kBAAkB;AACnE,eAAO,SAAS,eAAgB,QAAS,UAAU,WAAY;AAAA;AAAA;AAAA;AAYlE,kCAAiC,QAAQ,SAAU;AAElD,QAAK,QAAQ,WAAW,QAAY;AAEnC,UAAK,OAAO,QAAQ,WAAW,UAAW;AAEzC,eAAO,OAAQ,OAAO,UAAU,QAAQ;AAAA,aAElC;AAEN,gBAAQ,KAAM,wDAAwD,QAAQ;AAAA;AAAA;AAAA;AAgBjF,2BAA0B,UAAU,SAAS,QAAS;AAErD,QAAI,mBAAmB;AACvB,QAAI,iBAAiB;AAErB,aAAU,IAAI,GAAG,KAAK,QAAQ,QAAQ,IAAI,IAAI,KAAO;AAEpD,UAAI,SAAS,QAAS;AAEtB,UAAK,OAAO,aAAa;AAAY,2BAAmB;AACxD,UAAK,OAAO,WAAW;AAAY,yBAAiB;AAEpD,UAAK,oBAAoB;AAAiB;AAAA;AAI3C,QAAK,CAAE,oBAAoB,CAAE;AAAiB,aAAO,QAAQ,QAAS;AAEtE,QAAI,2BAA2B;AAC/B,QAAI,yBAAyB;AAE7B,aAAU,IAAI,GAAG,KAAK,QAAQ,QAAQ,IAAI,IAAI,KAAO;AAEpD,UAAI,SAAS,QAAS;AAEtB,UAAK,kBAAmB;AAEvB,YAAI,kBAAkB,OAAO,aAAa,SACvC,OAAO,cAAe,YAAY,OAAO,YACzC,SAAS,WAAW;AAEvB,iCAAyB,KAAM;AAAA;AAIhC,UAAK,gBAAiB;AAErB,YAAI,kBAAkB,OAAO,WAAW,SACrC,OAAO,cAAe,YAAY,OAAO,UACzC,SAAS,WAAW;AAEvB,+BAAuB,KAAM;AAAA;AAAA;AAM/B,WAAO,QAAQ,IAAK;AAAA,MACnB,QAAQ,IAAK;AAAA,MACb,QAAQ,IAAK;AAAA,OACV,KAAM,SAAW,WAAY;AAEhC,UAAI,iBAAiB,UAAW;AAChC,UAAI,eAAe,UAAW;AAI9B,eAAU,KAAI,GAAG,MAAK,eAAe,QAAQ,KAAI,KAAI,MAAO;AAE3D,YAAK,SAAS,WAAW,aAAa,eAAgB;AAAM;AAE5D,uBAAgB,MAAM,qBAAsB,eAAgB;AAAA;AAI7D,eAAU,KAAI,GAAG,MAAK,aAAa,QAAQ,KAAI,KAAI,MAAO;AAEzD,YAAK,SAAS,WAAW,WAAW,aAAc;AAAM;AAExD,qBAAc,MAAM,qBAAsB,aAAc;AAAA;AAIzD,eAAU,KAAI,GAAG,MAAK,QAAQ,QAAQ,KAAI,KAAI,MAAO;AAEpD,YAAI,UAAS,QAAS;AACtB,YAAI,gBAAgB,gBAAgB;AAEpC,YAAK,kBAAmB;AAcvB,cAAK,QAAO,aAAa,QAAY;AAEpC,gBAAI,oBAAoB,eAAgB;AACxC,8BAAkB,OAAO;AAEzB,gBAAI,WAAW,SAAS,WAAW;AAEnC,qBAAU,IAAI,GAAG,KAAK,kBAAkB,OAAO,IAAI,IAAI,KAAO;AAE7D,gCAAkB,OACjB,GACA,kBAAkB,KAAM,KAAM,SAAS,KAAM,IAC7C,kBAAkB,KAAM,KAAM,SAAS,KAAM,IAC7C,kBAAkB,KAAM,KAAM,SAAS,KAAM;AAAA;AAAA;AAAA;AASjD,YAAK,gBAAiB;AAIrB,cAAK,QAAO,WAAW,QAAY;AAElC,gBAAI,kBAAkB,aAAc;AACpC,4BAAgB,OAAO;AAEvB,gBAAI,SAAS,SAAS,WAAW;AAEjC,qBAAU,IAAI,GAAG,KAAK,gBAAgB,OAAO,IAAI,IAAI,KAAO;AAE3D,8BAAgB,OACf,GACA,gBAAgB,KAAM,KAAM,OAAO,KAAM,IACzC,gBAAgB,KAAM,KAAM,OAAO,KAAM,IACzC,gBAAgB,KAAM,KAAM,OAAO,KAAM;AAAA;AAAA;AAAA;AAAA;AAW9C,UAAK;AAAmB,iBAAS,gBAAgB,WAAW;AAC5D,UAAK;AAAiB,iBAAS,gBAAgB,SAAS;AAExD,aAAO;AAAA;AAAA;AAUT,8BAA6B,MAAM,SAAU;AAE5C,SAAK;AAEL,QAAK,QAAQ,YAAY,QAAY;AAEpC,eAAU,IAAI,GAAG,KAAK,QAAQ,QAAQ,QAAQ,IAAI,IAAI,KAAO;AAE5D,aAAK,sBAAuB,KAAM,QAAQ,QAAS;AAAA;AAAA;AAOrD,QAAK,QAAQ,UAAU,MAAM,QAAS,QAAQ,OAAO,cAAgB;AAEpE,UAAI,cAAc,QAAQ,OAAO;AAEjC,UAAK,KAAK,sBAAsB,WAAW,YAAY,QAAS;AAE/D,aAAK,wBAAwB;AAE7B,iBAAU,IAAI,GAAG,KAAK,YAAY,QAAQ,IAAI,IAAI,KAAO;AAExD,eAAK,sBAAuB,YAAa,MAAQ;AAAA;AAAA,aAI5C;AAEN,gBAAQ,KAAM;AAAA;AAAA;AAAA;AAQjB,8BAA6B,cAAe;AAE3C,QAAI,iBAAiB,aAAa,cAAc,aAAa,WAAY,WAAW;AACpF,QAAI;AAEJ,QAAK,gBAAiB;AAErB,oBAAc,WAAW,eAAe,aACrC,MAAM,eAAe,UACrB,MAAM,oBAAqB,eAAe;AAAA,WAEvC;AAEN,oBAAc,aAAa,UAAU,MAAM,oBAAqB,aAAa,cAAe,MAAM,aAAa;AAAA;AAIhH,WAAO;AAAA;AAIR,+BAA8B,YAAa;AAE1C,QAAI,gBAAgB;AAEpB,QAAI,OAAO,OAAO,KAAM,YAAa;AAErC,aAAU,IAAI,GAAG,KAAK,KAAK,QAAQ,IAAI,IAAI,KAAO;AAEjD,uBAAiB,KAAM,KAAM,MAAM,WAAY,KAAM,MAAQ;AAAA;AAI9D,WAAO;AAAA;AAIR,gCAA+B,WAAY;AAE1C,QAAK,UAAU,8BAA+B;AAE7C,UAAI,QAAQ,UAAU;AACtB,UAAI,WAAW,UAAU;AACzB,UAAI,QAAQ,UAAU,MAAM,MAAO,GAAG,QAAQ;AAE9C,eAAU,IAAI,GAAG,IAAI,GAAG,IAAI,OAAO,EAAG,GAAI;AAEzC,cAAO,OAAS,UAAU,KAAM;AAChC,YAAK,YAAY;AAAI,gBAAO,OAAS,UAAU,KAAM;AACrD,YAAK,YAAY;AAAI,gBAAO,OAAS,UAAU,KAAM;AACrD,YAAK,YAAY;AAAI,gBAAO,OAAS,UAAU,KAAM;AAAA;AAItD,aAAO,IAAI,gBAAiB,OAAO,UAAU,UAAU;AAAA;AAIxD,WAAO,UAAU;AAAA;AAMlB,sBAAqB,MAAM,YAAY,SAAU;AAEhD,SAAK,OAAO,QAAQ;AACpB,SAAK,aAAa,cAAc;AAChC,SAAK,UAAU,WAAW;AAG1B,SAAK,QAAQ,IAAI;AAGjB,SAAK,iBAAiB;AAEtB,SAAK,gBAAgB,IAAI,cAAe,KAAK,QAAQ;AACrD,SAAK,cAAc,eAAgB,KAAK,QAAQ;AAEhD,SAAK,aAAa,IAAI,WAAY,KAAK,QAAQ;AAC/C,SAAK,WAAW,gBAAiB;AAEjC,QAAK,KAAK,QAAQ,gBAAgB,mBAAoB;AAErD,WAAK,WAAW,mBAAoB;AAAA;AAAA;AAMtC,aAAW,UAAU,QAAQ,SAAW,QAAQ,SAAU;AAEzD,QAAI,SAAS;AACb,QAAI,OAAO,KAAK;AAChB,QAAI,aAAa,KAAK;AAGtB,SAAK,MAAM;AAGX,SAAK;AAEL,YAAQ,IAAK;AAAA,MAEZ,KAAK,gBAAiB;AAAA,MACtB,KAAK,gBAAiB;AAAA,MACtB,KAAK,gBAAiB;AAAA,OAEnB,KAAM,SAAW,cAAe;AAEnC,UAAI,SAAS;AAAA,QACZ,OAAO,aAAc,GAAK,KAAK,SAAS;AAAA,QACxC,QAAQ,aAAc;AAAA,QACtB,YAAY,aAAc;AAAA,QAC1B,SAAS,aAAc;AAAA,QACvB,OAAO,KAAK;AAAA,QACZ;AAAA,QACA,UAAU;AAAA;AAGX,qCAAgC,YAAY,QAAQ;AAEpD,6BAAwB,QAAQ;AAEhC,aAAQ;AAAA,OAEL,MAAO;AAAA;AAOZ,aAAW,UAAU,WAAW,WAAY;AAE3C,QAAI,WAAW,KAAK,KAAK,SAAS;AAClC,QAAI,WAAW,KAAK,KAAK,SAAS;AAClC,QAAI,WAAW,KAAK,KAAK,UAAU;AAEnC,QAAI,iBAAiB;AACrB,QAAI,WAAW;AAIf,aAAU,YAAY,GAAG,aAAa,SAAS,QAAQ,YAAY,YAAY,aAAe;AAE7F,UAAI,SAAS,SAAU,WAAY;AAEnC,eAAU,IAAI,GAAG,KAAK,OAAO,QAAQ,IAAI,IAAI,KAAO;AAEnD,iBAAU,OAAQ,IAAM,SAAS;AAAA;AAAA;AAWnC,aAAU,YAAY,GAAG,aAAa,SAAS,QAAQ,YAAY,YAAY,aAAe;AAE7F,UAAI,UAAU,SAAU;AAExB,UAAK,QAAQ,SAAS,QAAY;AAEjC,YAAK,eAAgB,QAAQ,UAAW,QAAY;AAEnD,yBAAgB,QAAQ,QAAS,SAAU,QAAQ,QAAS;AAAA;AAI7D,uBAAgB,QAAQ;AAKxB,YAAK,QAAQ,SAAS,QAAY;AAEjC,mBAAU,QAAQ,MAAO,gBAAgB;AAAA;AAAA;AAAA;AAQ5C,SAAK,KAAK,iBAAiB;AAC3B,SAAK,KAAK,WAAW;AAAA;AAUtB,aAAW,UAAU,gBAAgB,SAAW,MAAM,OAAQ;AAE7D,QAAI,WAAW,OAAO,MAAM;AAC5B,QAAI,aAAa,KAAK,MAAM,IAAK;AAEjC,QAAK,CAAE,YAAa;AAEnB,cAAS;AAAA,aAEH;AACJ,uBAAa,KAAK,UAAW;AAC7B;AAAA,aAEI;AACJ,uBAAa,KAAK,SAAU;AAC5B;AAAA,aAEI;AACJ,uBAAa,KAAK,SAAU;AAC5B;AAAA,aAEI;AACJ,uBAAa,KAAK,aAAc;AAChC;AAAA,aAEI;AACJ,uBAAa,KAAK,eAAgB;AAClC;AAAA,aAEI;AACJ,uBAAa,KAAK,WAAY;AAC9B;AAAA,aAEI;AACJ,uBAAa,KAAK,aAAc;AAChC;AAAA,aAEI;AACJ,uBAAa,KAAK,YAAa;AAC/B;AAAA,aAEI;AACJ,uBAAa,KAAK,SAAU;AAC5B;AAAA,aAEI;AACJ,uBAAa,KAAK,cAAe;AACjC;AAAA,aAEI;AACJ,uBAAa,KAAK,WAAY;AAC9B;AAAA,aAEI;AACJ,uBAAa,KAAK,WAAY,WAAW,qBAAsB,UAAW;AAC1E;AAAA;AAGA,gBAAM,IAAI,MAAO,mBAAmB;AAAA;AAItC,WAAK,MAAM,IAAK,UAAU;AAAA;AAI3B,WAAO;AAAA;AASR,aAAW,UAAU,kBAAkB,SAAW,MAAO;AAExD,QAAI,eAAe,KAAK,MAAM,IAAK;AAEnC,QAAK,CAAE,cAAe;AAErB,UAAI,SAAS;AACb,UAAI,OAAO,KAAK,KAAM,OAAS,UAAS,SAAS,OAAO,SAAW;AAEnE,qBAAe,QAAQ,IAAK,KAAK,IAAK,SAAW,KAAK,OAAQ;AAE7D,eAAO,OAAO,cAAe,MAAM;AAAA;AAIpC,WAAK,MAAM,IAAK,MAAM;AAAA;AAIvB,WAAO;AAAA;AASR,aAAW,UAAU,aAAa,SAAW,aAAc;AAE1D,QAAI,YAAY,KAAK,KAAK,QAAS;AACnC,QAAI,SAAS,KAAK;AAElB,QAAK,UAAU,QAAQ,UAAU,SAAS,eAAgB;AAEzD,YAAM,IAAI,MAAO,uBAAuB,UAAU,OAAO;AAAA;AAK1D,QAAK,UAAU,QAAQ,UAAa,gBAAgB,GAAI;AAEvD,aAAO,QAAQ,QAAS,KAAK,WAAY,WAAW,iBAAkB;AAAA;AAIvE,QAAI,UAAU,KAAK;AAEnB,WAAO,IAAI,QAAS,SAAW,SAAS,QAAS;AAEhD,aAAO,KAAM,WAAY,UAAU,KAAK,QAAQ,OAAQ,SAAS,QAAW,WAAY;AAEvF,eAAQ,IAAI,MAAO,8CAA8C,UAAU,MAAM;AAAA;AAAA;AAAA;AAapF,aAAW,UAAU,iBAAiB,SAAW,iBAAkB;AAElE,QAAI,gBAAgB,KAAK,KAAK,YAAa;AAE3C,WAAO,KAAK,cAAe,UAAU,cAAc,QAAS,KAAM,SAAW,QAAS;AAErF,UAAI,aAAa,cAAc,cAAc;AAC7C,UAAI,aAAa,cAAc,cAAc;AAC7C,aAAO,OAAO,MAAO,YAAY,aAAa;AAAA;AAAA;AAWhD,aAAW,UAAU,eAAe,SAAW,eAAgB;AAE9D,QAAI,SAAS;AACb,QAAI,OAAO,KAAK;AAEhB,QAAI,cAAc,KAAK,KAAK,UAAW;AAEvC,QAAK,YAAY,eAAe,UAAa,YAAY,WAAW,QAAY;AAK/E,aAAO,QAAQ,QAAS;AAAA;AAIzB,QAAI,qBAAqB;AAEzB,QAAK,YAAY,eAAe,QAAY;AAE3C,yBAAmB,KAAM,KAAK,cAAe,cAAc,YAAY;AAAA,WAEjE;AAEN,yBAAmB,KAAM;AAAA;AAI1B,QAAK,YAAY,WAAW,QAAY;AAEvC,yBAAmB,KAAM,KAAK,cAAe,cAAc,YAAY,OAAO,QAAQ;AACtF,yBAAmB,KAAM,KAAK,cAAe,cAAc,YAAY,OAAO,OAAO;AAAA;AAItF,WAAO,QAAQ,IAAK,oBAAqB,KAAM,SAAW,aAAc;AAEvE,UAAI,aAAa,YAAa;AAE9B,UAAI,WAAW,iBAAkB,YAAY;AAC7C,UAAI,aAAa,sBAAuB,YAAY;AAGpD,UAAI,eAAe,WAAW;AAC9B,UAAI,YAAY,eAAe;AAC/B,UAAI,aAAa,YAAY,cAAc;AAC3C,UAAI,aAAa,YAAY,eAAe,SAAY,KAAK,YAAa,YAAY,YAAa,aAAa;AAChH,UAAI,aAAa,YAAY,eAAe;AAC5C,UAAI,OAAO;AAGX,UAAK,cAAc,eAAe,WAAY;AAI7C,YAAI,UAAU,KAAK,MAAO,aAAa;AACvC,YAAI,aAAa,uBAAuB,YAAY,aAAa,MAAM,YAAY,gBAAgB,MAAM,UAAU,MAAM,YAAY;AACrI,YAAI,KAAK,OAAO,MAAM,IAAK;AAE3B,YAAK,CAAE,IAAK;AAEX,kBAAQ,IAAI,WAAY,YAAY,UAAU,YAAY,YAAY,QAAQ,aAAa;AAG3F,eAAK,IAAI,kBAAmB,OAAO,aAAa;AAEhD,iBAAO,MAAM,IAAK,YAAY;AAAA;AAI/B,0BAAkB,IAAI,2BAA4B,IAAI,UAAW,aAAa,aAAc,cAAc;AAAA,aAEpG;AAEN,YAAK,eAAe,MAAO;AAE1B,kBAAQ,IAAI,WAAY,YAAY,QAAQ;AAAA,eAEtC;AAEN,kBAAQ,IAAI,WAAY,YAAY,YAAY,YAAY,QAAQ;AAAA;AAIrE,0BAAkB,IAAI,gBAAiB,OAAO,UAAU;AAAA;AAKzD,UAAK,YAAY,WAAW,QAAY;AAEvC,YAAI,kBAAkB,iBAAiB;AACvC,YAAI,oBAAoB,sBAAuB,YAAY,OAAO,QAAQ;AAE1E,YAAI,oBAAoB,YAAY,OAAO,QAAQ,cAAc;AACjE,YAAI,mBAAmB,YAAY,OAAO,OAAO,cAAc;AAE/D,YAAI,gBAAgB,IAAI,kBAAmB,YAAa,IAAK,mBAAmB,YAAY,OAAO,QAAQ;AAC3G,YAAI,eAAe,IAAI,WAAY,YAAa,IAAK,kBAAkB,YAAY,OAAO,QAAQ;AAElG,YAAK,eAAe,MAAO;AAG1B,0BAAgB,SAAU,gBAAgB,MAAM;AAAA;AAIjD,iBAAU,IAAI,GAAG,KAAK,cAAc,QAAQ,IAAI,IAAI,KAAO;AAE1D,cAAI,QAAQ,cAAe;AAE3B,0BAAgB,KAAM,OAAO,aAAc,IAAI;AAC/C,cAAK,YAAY;AAAI,4BAAgB,KAAM,OAAO,aAAc,IAAI,WAAW;AAC/E,cAAK,YAAY;AAAI,4BAAgB,KAAM,OAAO,aAAc,IAAI,WAAW;AAC/E,cAAK,YAAY;AAAI,4BAAgB,KAAM,OAAO,aAAc,IAAI,WAAW;AAC/E,cAAK,YAAY;AAAI,kBAAM,IAAI,MAAO;AAAA;AAAA;AAMxC,aAAO;AAAA;AAAA;AAWT,aAAW,UAAU,cAAc,SAAW,cAAe;AAE5D,QAAI,SAAS;AACb,QAAI,OAAO,KAAK;AAChB,QAAI,UAAU,KAAK;AACnB,QAAI,gBAAgB,KAAK;AAEzB,QAAI,MAAM,OAAO,OAAO,OAAO;AAE/B,QAAI,aAAa,KAAK,SAAU;AAEhC,QAAI,oBAAoB,WAAW,cAAc;AAEjD,QAAI;AAEJ,QAAK,kBAAmB,WAAW,mBAAqB;AAEvD,eAAS,KAAK,OAAQ,kBAAmB,WAAW,kBAAmB;AAAA,WAEjE;AAEN,eAAS,KAAK,OAAQ,WAAW;AAAA;AAIlC,QAAI,YAAY,OAAO;AACvB,QAAI,cAAc;AAElB,QAAK,OAAO,eAAe,QAAY;AAItC,kBAAY,OAAO,cAAe,cAAc,OAAO,YAAa,KAAM,SAAW,YAAa;AAEjG,sBAAc;AACd,YAAI,OAAO,IAAI,KAAM,CAAE,aAAc,EAAE,MAAM,OAAO;AACpD,oBAAY,IAAI,gBAAiB;AACjC,eAAO;AAAA;AAAA;AAMT,WAAO,QAAQ,QAAS,WAAY,KAAM,SAAW,YAAY;AAIhE,UAAI,SAAS,OAAO,SAAS,IAAK;AAElC,UAAK,CAAE,QAAS;AAEf,iBAAS,kBAAmB,WAAW,oBACpC,OAAO,WAAY,WAAW,kBAAmB,YACjD;AAAA;AAIJ,aAAO,IAAI,QAAS,SAAW,SAAS,QAAS;AAEhD,eAAO,KAAM,WAAY,YAAW,QAAQ,OAAQ,SAAS,QAAW;AAAA;AAAA,OAItE,KAAM,SAAW,SAAU;AAI9B,UAAK,gBAAgB,MAAO;AAE3B,YAAI,gBAAiB;AAAA;AAItB,cAAQ,QAAQ;AAEhB,UAAK,WAAW,SAAS;AAAY,gBAAQ,OAAO,WAAW;AAG/D,UAAK,OAAO,YAAY,mBAAoB;AAE3C,gBAAQ,SAAS,kBAAmB,OAAO;AAAA;AAI5C,UAAI,WAAW,KAAK,YAAY;AAChC,UAAI,UAAU,SAAU,WAAW,YAAa;AAEhD,cAAQ,YAAY,cAAe,QAAQ,cAAe;AAC1D,cAAQ,YAAY,cAAe,QAAQ,cAAe;AAC1D,cAAQ,QAAQ,gBAAiB,QAAQ,UAAW;AACpD,cAAQ,QAAQ,gBAAiB,QAAQ,UAAW;AAEpD,aAAO;AAAA;AAAA;AAaT,aAAW,UAAU,gBAAgB,SAAW,gBAAgB,SAAS,QAAS;AAEjF,QAAI,SAAS;AAEb,WAAO,KAAK,cAAe,WAAW,OAAO,OAAQ,KAAM,SAAW,SAAU;AAE/E,UAAK,CAAE,QAAQ,qBAAsB;AAEpC,gBAAS;AAAA,eAEH;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AACJ,oBAAQ,SAAS;AACjB;AAAA;AAAA;AAMH,UAAK,OAAO,WAAY,WAAW,wBAA0B;AAE5D,YAAI,YAAY,OAAO,eAAe,SAAY,OAAO,WAAY,WAAW,yBAA0B;AAE1G,YAAK,WAAY;AAEhB,oBAAU,OAAO,WAAY,WAAW,uBAAwB,cAAe,SAAS;AAAA;AAAA;AAM1F,qBAAgB,WAAY;AAAA;AAAA;AAc9B,aAAW,UAAU,sBAAsB,SAAW,MAAO;AAE5D,QAAI,WAAW,KAAK;AACpB,QAAI,WAAW,KAAK;AACpB,QAAI,aAAa,KAAK;AAEtB,QAAI,oBAAoB,SAAS,WAAW,YAAY;AACxD,QAAI,kBAAkB,SAAS,WAAW,UAAU;AACpD,QAAI,iBAAiB,SAAS,WAAW,WAAW;AACpD,QAAI,cAAc,KAAK,kBAAkB;AACzC,QAAI,kBAAkB,OAAO,KAAM,SAAS,iBAAkB,SAAS;AACvE,QAAI,kBAAkB,mBAAmB,SAAS,gBAAgB,WAAW;AAE7E,QAAK,KAAK,UAAW;AAEpB,UAAI,WAAW,oBAAoB,SAAS;AAE5C,UAAI,iBAAiB,KAAK,MAAM,IAAK;AAErC,UAAK,CAAE,gBAAiB;AAEvB,yBAAiB,IAAI;AACrB,iBAAS,UAAU,KAAK,KAAM,gBAAgB;AAC9C,uBAAe,MAAM,KAAM,SAAS;AACpC,uBAAe,MAAM,SAAS;AAC9B,uBAAe,SAAS;AACxB,uBAAe,kBAAkB;AAEjC,aAAK,MAAM,IAAK,UAAU;AAAA;AAI3B,iBAAW;AAAA,eAEA,KAAK,QAAS;AAEzB,UAAI,WAAW,uBAAuB,SAAS;AAE/C,UAAI,eAAe,KAAK,MAAM,IAAK;AAEnC,UAAK,CAAE,cAAe;AAErB,uBAAe,IAAI;AACnB,iBAAS,UAAU,KAAK,KAAM,cAAc;AAC5C,qBAAa,MAAM,KAAM,SAAS;AAClC,qBAAa,SAAS;AAEtB,aAAK,MAAM,IAAK,UAAU;AAAA;AAI3B,iBAAW;AAAA;AAKZ,QAAK,qBAAqB,mBAAmB,kBAAkB,eAAe,iBAAkB;AAE/F,UAAI,WAAW,oBAAoB,SAAS,OAAO;AAEnD,UAAK,SAAS;AAAmC,oBAAY;AAC7D,UAAK;AAAc,oBAAY;AAC/B,UAAK;AAAoB,oBAAY;AACrC,UAAK;AAAkB,oBAAY;AACnC,UAAK;AAAiB,oBAAY;AAClC,UAAK;AAAkB,oBAAY;AACnC,UAAK;AAAkB,oBAAY;AAEnC,UAAI,iBAAiB,KAAK,MAAM,IAAK;AAErC,UAAK,CAAE,gBAAiB;AAEvB,yBAAiB,SAAS,mCACvB,WAAY,WAAW,uCAAwC,cAAe,YAC9E,SAAS;AAEZ,YAAK;AAAc,yBAAe,WAAW;AAC7C,YAAK;AAAoB,yBAAe,iBAAiB;AACzD,YAAK;AAAkB,yBAAe,eAAe;AACrD,YAAK;AAAiB,yBAAe,cAAc;AACnD,YAAK;AAAkB,yBAAe,eAAe;AACrD,YAAK;AAAkB,yBAAe,eAAe;AAErD,aAAK,MAAM,IAAK,UAAU;AAAA;AAI3B,iBAAW;AAAA;AAMZ,QAAK,SAAS,SAAS,SAAS,WAAW,QAAQ,UAAa,SAAS,WAAW,OAAO,QAAY;AAEtG,cAAQ,IAAK;AACb,eAAS,aAAc,OAAO,IAAI,gBAAiB,SAAS,WAAW,GAAG,OAAO;AAAA;AAIlF,QAAK,SAAS,kCAAmC;AAGhD,WAAK,iBAAiB,WAAY,WAAW,uCAAwC;AAAA;AAItF,SAAK,WAAW;AAAA;AASjB,aAAW,UAAU,eAAe,SAAW,eAAgB;AAE9D,QAAI,SAAS;AACb,QAAI,OAAO,KAAK;AAChB,QAAI,aAAa,KAAK;AACtB,QAAI,cAAc,KAAK,UAAW;AAElC,QAAI;AACJ,QAAI,iBAAiB;AACrB,QAAI,qBAAqB,YAAY,cAAc;AAEnD,QAAI,UAAU;AAEd,QAAK,mBAAoB,WAAW,wCAA0C;AAE7E,UAAI,cAAc,WAAY,WAAW;AACzC,qBAAe,YAAY;AAC3B,cAAQ,KAAM,YAAY,aAAc,gBAAgB,aAAa;AAAA,eAE1D,mBAAoB,WAAW,sBAAwB;AAElE,UAAI,eAAe,WAAY,WAAW;AAC1C,qBAAe,aAAa;AAC5B,cAAQ,KAAM,aAAa,aAAc,gBAAgB,aAAa;AAAA,WAEhE;AAKN,qBAAe;AAEf,UAAI,oBAAoB,YAAY,wBAAwB;AAE5D,qBAAe,QAAQ,IAAI,MAAO,GAAK,GAAK;AAC5C,qBAAe,UAAU;AAEzB,UAAK,MAAM,QAAS,kBAAkB,kBAAoB;AAEzD,YAAI,QAAQ,kBAAkB;AAE9B,uBAAe,MAAM,UAAW;AAChC,uBAAe,UAAU,MAAO;AAAA;AAIjC,UAAK,kBAAkB,qBAAqB,QAAY;AAEvD,gBAAQ,KAAM,OAAO,cAAe,gBAAgB,OAAO,kBAAkB;AAAA;AAI9E,qBAAe,YAAY,kBAAkB,mBAAmB,SAAY,kBAAkB,iBAAiB;AAC/G,qBAAe,YAAY,kBAAkB,oBAAoB,SAAY,kBAAkB,kBAAkB;AAEjH,UAAK,kBAAkB,6BAA6B,QAAY;AAE/D,gBAAQ,KAAM,OAAO,cAAe,gBAAgB,gBAAgB,kBAAkB;AACtF,gBAAQ,KAAM,OAAO,cAAe,gBAAgB,gBAAgB,kBAAkB;AAAA;AAAA;AAMxF,QAAK,YAAY,gBAAgB,MAAO;AAEvC,qBAAe,OAAO;AAAA;AAIvB,QAAI,YAAY,YAAY,aAAa,YAAY;AAErD,QAAK,cAAc,YAAY,OAAQ;AAEtC,qBAAe,cAAc;AAAA,WAEvB;AAEN,qBAAe,cAAc;AAE7B,UAAK,cAAc,YAAY,MAAO;AAErC,uBAAe,YAAY,YAAY,gBAAgB,SAAY,YAAY,cAAc;AAAA;AAAA;AAM/F,QAAK,YAAY,kBAAkB,UAAa,iBAAiB,mBAAoB;AAEpF,cAAQ,KAAM,OAAO,cAAe,gBAAgB,aAAa,YAAY;AAE7E,qBAAe,cAAc,IAAI,QAAS,GAAG;AAE7C,UAAK,YAAY,cAAc,UAAU,QAAY;AAEpD,uBAAe,YAAY,IAAK,YAAY,cAAc,OAAO,YAAY,cAAc;AAAA;AAAA;AAM7F,QAAK,YAAY,qBAAqB,UAAa,iBAAiB,mBAAoB;AAEvF,cAAQ,KAAM,OAAO,cAAe,gBAAgB,SAAS,YAAY;AAEzE,UAAK,YAAY,iBAAiB,aAAa,QAAY;AAE1D,uBAAe,iBAAiB,YAAY,iBAAiB;AAAA;AAAA;AAM/D,QAAK,YAAY,mBAAmB,UAAa,iBAAiB,mBAAoB;AAErF,qBAAe,WAAW,IAAI,QAAQ,UAAW,YAAY;AAAA;AAI9D,QAAK,YAAY,oBAAoB,UAAa,iBAAiB,mBAAoB;AAEtF,cAAQ,KAAM,OAAO,cAAe,gBAAgB,eAAe,YAAY;AAAA;AAIhF,WAAO,QAAQ,IAAK,SAAU,KAAM,WAAY;AAE/C,UAAI;AAEJ,UAAK,iBAAiB,gBAAiB;AAEtC,mBAAW,WAAY,WAAW,uCAAwC,eAAgB;AAAA,aAEpF;AAEN,mBAAW,IAAI,aAAc;AAAA;AAI9B,UAAK,YAAY,SAAS;AAAY,iBAAS,OAAO,YAAY;AAGlE,UAAK,SAAS;AAAM,iBAAS,IAAI,WAAW;AAC5C,UAAK,SAAS;AAAc,iBAAS,YAAY,WAAW;AAC5D,UAAK,SAAS;AAAc,iBAAS,YAAY,WAAW;AAE5D,6BAAwB,UAAU;AAElC,UAAK,YAAY;AAAa,uCAAgC,YAAY,UAAU;AAEpF,aAAO;AAAA;AAAA;AAYT,kCAAiC,UAAU,cAAc,QAAS;AAEjE,QAAI,aAAa,aAAa;AAE9B,QAAI,UAAU;AAEd,qCAAkC,eAAe,eAAgB;AAEhE,aAAO,OAAO,cAAe,YAAY,eACvC,KAAM,SAAW,WAAW;AAE5B,iBAAS,aAAc,eAAe;AAAA;AAAA;AAMzC,aAAU,qBAAqB,YAAa;AAE3C,UAAI,qBAAqB,WAAY,sBAAuB,kBAAkB;AAG9E,UAAK,sBAAsB,SAAS;AAAa;AAEjD,cAAQ,KAAM,wBAAyB,WAAY,oBAAqB;AAAA;AAIzE,QAAK,aAAa,YAAY,UAAa,CAAE,SAAS,OAAQ;AAE7D,UAAI,WAAW,OAAO,cAAe,YAAY,aAAa,SAAU,KAAM,SAAW,WAAW;AAEnG,iBAAS,SAAU;AAAA;AAIpB,cAAQ,KAAM;AAAA;AAIf,2BAAwB,UAAU;AAElC,WAAO,QAAQ,IAAK,SAAU,KAAM,WAAY;AAE/C,aAAO,aAAa,YAAY,SAC7B,gBAAiB,UAAU,aAAa,SAAS,UACjD;AAAA;AAAA;AAcL,aAAW,UAAU,iBAAiB,SAAW,YAAa;AAE7D,QAAI,SAAS;AACb,QAAI,aAAa,KAAK;AACtB,QAAI,QAAQ,KAAK;AAEjB,kCAA+B,YAAY;AAE1C,aAAO,WAAY,WAAW,4BAC5B,gBAAiB,YAAW,QAC5B,KAAM,SAAW,UAAW;AAE5B,eAAO,uBAAwB,UAAU,YAAW;AAAA;AAAA;AAMvD,QAAI,UAAU;AAEd,aAAU,IAAI,GAAG,KAAK,WAAW,QAAQ,IAAI,IAAI,KAAO;AAEvD,UAAI,YAAY,WAAY;AAC5B,UAAI,WAAW,mBAAoB;AAGnC,UAAI,SAAS,MAAO;AAEpB,UAAK,QAAS;AAGb,gBAAQ,KAAM,OAAO;AAAA,aAEf;AAEN,YAAI;AAEJ,YAAK,UAAU,cAAc,UAAU,WAAY,WAAW,6BAA+B;AAG5F,4BAAkB,qBAAsB;AAAA,eAElC;AAGN,4BAAkB,uBAAwB,IAAI,kBAAkB,WAAW;AAAA;AAK5E,cAAO,YAAa,EAAE,WAAsB,SAAS;AAErD,gBAAQ,KAAM;AAAA;AAAA;AAMhB,WAAO,QAAQ,IAAK;AAAA;AASrB,aAAW,UAAU,WAAW,SAAW,WAAY;AAEtD,QAAI,SAAS;AACb,QAAI,OAAO,KAAK;AAEhB,QAAI,UAAU,KAAK,OAAQ;AAC3B,QAAI,aAAa,QAAQ;AAEzB,QAAI,UAAU;AAEd,aAAU,IAAI,GAAG,KAAK,WAAW,QAAQ,IAAI,IAAI,KAAO;AAEvD,UAAI,WAAW,WAAY,GAAI,aAAa,SACzC,0BACA,KAAK,cAAe,YAAY,WAAY,GAAI;AAEnD,cAAQ,KAAM;AAAA;AAIf,WAAO,QAAQ,IAAK,SAAU,KAAM,SAAW,mBAAoB;AAElE,aAAO,OAAO,eAAgB,YAAa,KAAM,SAAW,YAAa;AAExE,YAAI,SAAS;AAEb,iBAAU,KAAI,GAAG,MAAK,WAAW,QAAQ,KAAI,KAAI,MAAO;AAEvD,cAAI,WAAW,WAAY;AAC3B,cAAI,YAAY,WAAY;AAI5B,cAAI;AAEJ,cAAI,YAAW,kBAAmB;AAElC,cAAK,UAAU,SAAS,gBAAgB,aACvC,UAAU,SAAS,gBAAgB,kBACnC,UAAU,SAAS,gBAAgB,gBACnC,UAAU,SAAS,QAAY;AAG/B,mBAAO,QAAQ,kBAAkB,OAC9B,IAAI,YAAa,UAAU,aAC3B,IAAI,KAAM,UAAU;AAEvB,gBAAK,KAAK,kBAAkB,QAAQ,CAAE,KAAK,SAAS,WAAW,WAAW,YAAa;AAItF,mBAAK;AAAA;AAIN,gBAAK,UAAU,SAAS,gBAAgB,gBAAiB;AAExD,mBAAK,WAAW;AAAA,uBAEL,UAAU,SAAS,gBAAgB,cAAe;AAE7D,mBAAK,WAAW;AAAA;AAAA,qBAIN,UAAU,SAAS,gBAAgB,OAAQ;AAEtD,mBAAO,IAAI,aAAc,UAAU;AAAA,qBAExB,UAAU,SAAS,gBAAgB,YAAa;AAE3D,mBAAO,IAAI,KAAM,UAAU;AAAA,qBAEhB,UAAU,SAAS,gBAAgB,WAAY;AAE1D,mBAAO,IAAI,SAAU,UAAU;AAAA,qBAEpB,UAAU,SAAS,gBAAgB,QAAS;AAEvD,mBAAO,IAAI,OAAQ,UAAU;AAAA,iBAEvB;AAEN,kBAAM,IAAI,MAAO,mDAAmD,UAAU;AAAA;AAI/E,cAAK,OAAO,KAAM,KAAK,SAAS,iBAAkB,SAAS,GAAI;AAE9D,+BAAoB,MAAM;AAAA;AAI3B,eAAK,OAAO,QAAQ,QAAU,UAAU;AAExC,cAAK,WAAW,SAAS;AAAI,iBAAK,QAAQ,MAAM;AAEhD,iCAAwB,MAAM;AAE9B,iBAAO,oBAAqB;AAE5B,iBAAO,KAAM;AAAA;AAId,YAAK,OAAO,WAAW,GAAI;AAE1B,iBAAO,OAAQ;AAAA;AAIhB,YAAI,QAAQ,IAAI;AAEhB,iBAAU,KAAI,GAAG,MAAK,OAAO,QAAQ,KAAI,KAAI,MAAO;AAEnD,gBAAM,IAAK,OAAQ;AAAA;AAIpB,eAAO;AAAA;AAAA;AAAA;AAaV,aAAW,UAAU,aAAa,SAAW,aAAc;AAE1D,QAAI;AACJ,QAAI,YAAY,KAAK,KAAK,QAAS;AACnC,QAAI,SAAS,UAAW,UAAU;AAElC,QAAK,CAAE,QAAS;AAEf,cAAQ,KAAM;AACd;AAAA;AAID,QAAK,UAAU,SAAS,eAAgB;AAEvC,eAAS,IAAI,kBAAmB,MAAM,SAAU,OAAO,OAAQ,OAAO,eAAe,GAAG,OAAO,SAAS,GAAG,OAAO,QAAQ;AAAA,eAE/G,UAAU,SAAS,gBAAiB;AAE/C,eAAS,IAAI,mBAAoB,OAAO,OAAO,IAAK,OAAO,OAAO,GAAG,OAAO,OAAO,GAAG,OAAO,OAAO,IAAK,OAAO,OAAO,OAAO;AAAA;AAI/H,QAAK,UAAU,SAAS;AAAY,aAAO,OAAO,UAAU;AAE5D,2BAAwB,QAAQ;AAEhC,WAAO,QAAQ,QAAS;AAAA;AASzB,aAAW,UAAU,WAAW,SAAW,WAAY;AAEtD,QAAI,UAAU,KAAK,KAAK,MAAO;AAE/B,QAAI,YAAY,EAAE,QAAQ,QAAQ;AAElC,QAAK,QAAQ,wBAAwB,QAAY;AAEhD,aAAO,QAAQ,QAAS;AAAA;AAIzB,WAAO,KAAK,cAAe,YAAY,QAAQ,qBAAsB,KAAM,SAAW,UAAW;AAEhG,gBAAU,sBAAsB;AAEhC,aAAO;AAAA;AAAA;AAWT,aAAW,UAAU,gBAAgB,SAAW,gBAAiB;AAEhE,QAAI,OAAO,KAAK;AAEhB,QAAI,eAAe,KAAK,WAAY;AAEpC,QAAI,eAAe;AACnB,QAAI,wBAAwB;AAC5B,QAAI,yBAAyB;AAC7B,QAAI,kBAAkB;AACtB,QAAI,iBAAiB;AAErB,aAAU,IAAI,GAAG,KAAK,aAAa,SAAS,QAAQ,IAAI,IAAI,KAAO;AAElE,UAAI,UAAU,aAAa,SAAU;AACrC,UAAI,UAAU,aAAa,SAAU,QAAQ;AAC7C,UAAI,SAAS,QAAQ;AACrB,UAAI,OAAO,OAAO,SAAS,SAAY,OAAO,OAAO,OAAO;AAC5D,UAAI,QAAQ,aAAa,eAAe,SAAY,aAAa,WAAY,QAAQ,SAAU,QAAQ;AACvG,UAAI,SAAS,aAAa,eAAe,SAAY,aAAa,WAAY,QAAQ,UAAW,QAAQ;AAEzG,mBAAa,KAAM,KAAK,cAAe,QAAQ;AAC/C,4BAAsB,KAAM,KAAK,cAAe,YAAY;AAC5D,6BAAuB,KAAM,KAAK,cAAe,YAAY;AAC7D,sBAAgB,KAAM;AACtB,qBAAe,KAAM;AAAA;AAItB,WAAO,QAAQ,IAAK;AAAA,MAEnB,QAAQ,IAAK;AAAA,MACb,QAAQ,IAAK;AAAA,MACb,QAAQ,IAAK;AAAA,MACb,QAAQ,IAAK;AAAA,MACb,QAAQ,IAAK;AAAA,OAEV,KAAM,SAAW,cAAe;AAEnC,UAAI,QAAQ,aAAc;AAC1B,UAAI,iBAAiB,aAAc;AACnC,UAAI,kBAAkB,aAAc;AACpC,UAAI,WAAW,aAAc;AAC7B,UAAI,UAAU,aAAc;AAE5B,UAAI,SAAS;AAEb,eAAU,KAAI,GAAG,MAAK,MAAM,QAAQ,KAAI,KAAI,MAAO;AAElD,YAAI,OAAO,MAAO;AAClB,YAAI,gBAAgB,eAAgB;AACpC,YAAI,iBAAiB,gBAAiB;AACtC,YAAI,WAAU,SAAU;AACxB,YAAI,UAAS,QAAS;AAEtB,YAAK,SAAS;AAAY;AAE1B,aAAK;AACL,aAAK,mBAAmB;AAExB,YAAI;AAEJ,gBAAS,gBAAiB,QAAO;AAAA,eAE3B,gBAAgB;AAEpB,iCAAqB;AACrB;AAAA,eAEI,gBAAgB;AAEpB,iCAAqB;AACrB;AAAA,eAEI,gBAAgB;AAAA,eAChB,gBAAgB;AAAA;AAGpB,iCAAqB;AACrB;AAAA;AAIF,YAAI,aAAa,KAAK,OAAO,KAAK,OAAO,KAAK;AAE9C,YAAI,gBAAgB,SAAQ,kBAAkB,SAAY,cAAe,SAAQ,iBAAkB;AAEnG,YAAI,cAAc;AAElB,YAAK,gBAAiB,QAAO,UAAW,gBAAgB,SAAU;AAGjE,eAAK,SAAU,SAAW,QAAS;AAElC,gBAAK,OAAO,WAAW,QAAQ,OAAO,uBAAwB;AAE7D,0BAAY,KAAM,OAAO,OAAO,OAAO,OAAO,OAAO;AAAA;AAAA;AAAA,eAMjD;AAEN,sBAAY,KAAM;AAAA;AAInB,YAAI,cAAc,eAAe;AAEjC,YAAK,eAAe,YAAa;AAEhC,cAAI;AAEJ,cAAK,YAAY,gBAAgB,WAAY;AAE5C,oBAAQ,IAAI;AAAA,qBAED,YAAY,gBAAgB,YAAa;AAEpD,oBAAQ,IAAI;AAAA,qBAED,YAAY,eAAe,YAAa;AAEnD,oBAAQ,IAAI;AAAA,qBAED,YAAY,gBAAgB,aAAc;AAErD,oBAAQ,IAAI;AAAA,iBAEN;AAEN,kBAAM,IAAI,MAAO;AAAA;AAIlB,cAAI,SAAS,IAAI,aAAc,YAAY;AAE3C,mBAAU,IAAI,GAAG,KAAK,YAAY,QAAQ,IAAI,IAAI,KAAO;AAExD,mBAAQ,KAAM,YAAa,KAAM;AAAA;AAIlC,wBAAc;AAAA;AAIf,iBAAU,IAAI,GAAG,KAAK,YAAY,QAAQ,IAAI,IAAI,KAAO;AAExD,cAAI,QAAQ,IAAI,mBACf,YAAa,KAAM,MAAM,gBAAiB,QAAO,OACjD,cAAc,OACd,aACA;AAID,cAAK,SAAQ,kBAAkB,eAAgB;AAE9C,kBAAM,oBAAoB,iDAAkD,QAAS;AAMpF,qBAAO,IAAI,2BAA4B,KAAK,OAAO,KAAK,QAAQ,KAAK,iBAAiB,GAAG;AAAA;AAK1F,kBAAM,kBAAkB,4CAA4C;AAAA;AAIrE,iBAAO,KAAM;AAAA;AAAA;AAMf,UAAI,QAAO,aAAa,SAAS,SAAY,aAAa,OAAO,eAAe;AAEhF,aAAO,IAAI,cAAe,OAAM,QAAW;AAAA;AAAA;AAW7C,aAAW,UAAU,WAAW,SAAW,WAAY;AAEtD,QAAI,OAAO,KAAK;AAChB,QAAI,aAAa,KAAK;AACtB,QAAI,SAAS;AAEb,QAAI,iBAAiB,KAAK;AAC1B,QAAI,WAAW,KAAK;AAEpB,QAAI,UAAU,KAAK,MAAO;AAE1B,WAAS,WAAY;AAEpB,UAAI,UAAU;AAEd,UAAK,QAAQ,SAAS,QAAY;AAEjC,gBAAQ,KAAM,OAAO,cAAe,QAAQ,QAAQ,MAAO,KAAM,SAAW,MAAO;AAElF,cAAI;AAEJ,cAAK,eAAgB,QAAQ,QAAS,GAAI;AAEzC,gBAAI,cAAc,SAAU,QAAQ;AAEpC,mBAAO,KAAK;AACZ,iBAAK,QAAQ,eAAe;AAG5B,iBAAK,iBAAiB,KAAK;AAE3B,qBAAU,IAAI,GAAG,KAAK,KAAK,SAAS,QAAQ,IAAI,IAAI,KAAO;AAE1D,mBAAK,SAAU,GAAI,QAAQ,eAAe;AAC1C,mBAAK,SAAU,GAAI,iBAAiB,KAAK,SAAU,GAAI;AAAA;AAAA,iBAIlD;AAEN,mBAAO;AAAA;AAKR,cAAK,QAAQ,YAAY,QAAY;AAEpC,iBAAK,SAAU,SAAW,GAAI;AAE7B,kBAAK,CAAE,EAAE;AAAS;AAElB,uBAAU,KAAI,GAAG,MAAK,QAAQ,QAAQ,QAAQ,KAAI,KAAI,MAAO;AAE5D,kBAAE,sBAAuB,MAAM,QAAQ,QAAS;AAAA;AAAA;AAAA;AAQnD,iBAAO;AAAA;AAAA;AAMT,UAAK,QAAQ,WAAW,QAAY;AAEnC,gBAAQ,KAAM,OAAO,cAAe,UAAU,QAAQ;AAAA;AAIvD,UAAK,QAAQ,cACT,QAAQ,WAAY,WAAW,wBAC/B,QAAQ,WAAY,WAAW,qBAAsB,UAAU,QAAY;AAE9E,gBAAQ,KAAM,OAAO,cAAe,SAAS,QAAQ,WAAY,WAAW,qBAAsB;AAAA;AAInG,aAAO,QAAQ,IAAK;AAAA,QAEf,KAAM,SAAW,SAAU;AAEhC,UAAI;AAGJ,UAAK,QAAQ,WAAW,MAAO;AAE9B,eAAO,IAAI;AAAA,iBAEA,QAAQ,SAAS,GAAI;AAEhC,eAAO,IAAI;AAAA,iBAEA,QAAQ,WAAW,GAAI;AAElC,eAAO,QAAS;AAAA,aAEV;AAEN,eAAO,IAAI;AAAA;AAIZ,UAAK,SAAS,QAAS,IAAM;AAE5B,iBAAU,IAAI,GAAG,KAAK,QAAQ,QAAQ,IAAI,IAAI,KAAO;AAEpD,eAAK,IAAK,QAAS;AAAA;AAAA;AAMrB,UAAK,QAAQ,SAAS,QAAY;AAEjC,aAAK,SAAS,OAAO,QAAQ;AAC7B,aAAK,OAAO,gBAAgB,iBAAkB,QAAQ;AAAA;AAIvD,6BAAwB,MAAM;AAE9B,UAAK,QAAQ;AAAa,uCAAgC,YAAY,MAAM;AAE5E,UAAK,QAAQ,WAAW,QAAY;AAEnC,YAAI,SAAS,IAAI;AACjB,eAAO,UAAW,QAAQ;AAC1B,aAAK,YAAa;AAAA,aAEZ;AAEN,YAAK,QAAQ,gBAAgB,QAAY;AAExC,eAAK,SAAS,UAAW,QAAQ;AAAA;AAIlC,YAAK,QAAQ,aAAa,QAAY;AAErC,eAAK,WAAW,UAAW,QAAQ;AAAA;AAIpC,YAAK,QAAQ,UAAU,QAAY;AAElC,eAAK,MAAM,UAAW,QAAQ;AAAA;AAAA;AAMhC,aAAO;AAAA;AAAA;AAWT,aAAW,UAAU,YAAY,WAAY;AAI5C,+BAA4B,QAAQ,cAAc,MAAM,QAAS;AAEhE,UAAI,UAAU,KAAK,MAAO;AAE1B,aAAO,OAAO,cAAe,QAAQ,QAAS,KAAM,SAAW,MAAO;AAErE,YAAK,QAAQ,SAAS;AAAY,iBAAO;AAIzC,YAAI;AAEJ,eAAO,OAAO,cAAe,QAAQ,QAAQ,MAAO,KAAM,SAAW,MAAO;AAE3E,sBAAY;AAEZ,cAAI,gBAAgB;AAEpB,mBAAU,IAAI,GAAG,KAAK,UAAU,OAAO,QAAQ,IAAI,IAAI,KAAO;AAE7D,0BAAc,KAAM,OAAO,cAAe,QAAQ,UAAU,OAAQ;AAAA;AAIrE,iBAAO,QAAQ,IAAK;AAAA,WAEjB,KAAM,SAAW,YAAa;AAEjC,eAAK,SAAU,SAAW,MAAO;AAEhC,gBAAK,CAAE,KAAK;AAAS;AAErB,gBAAI,QAAQ;AACZ,gBAAI,eAAe;AAEnB,qBAAU,IAAI,GAAG,KAAK,WAAW,QAAQ,IAAI,IAAI,KAAO;AAEvD,kBAAI,YAAY,WAAY;AAE5B,kBAAK,WAAY;AAEhB,sBAAM,KAAM;AAEZ,oBAAI,MAAM,IAAI;AAEd,oBAAK,UAAU,wBAAwB,QAAY;AAElD,sBAAI,UAAW,UAAU,oBAAoB,OAAO,IAAI;AAAA;AAIzD,6BAAa,KAAM;AAAA,qBAEb;AAEN,wBAAQ,KAAM,oDAAoD,UAAU,OAAQ;AAAA;AAAA;AAMtF,iBAAK,KAAM,IAAI,SAAU,OAAO,eAAgB,KAAK;AAAA;AAItD,iBAAO;AAAA;AAAA,SAIL,KAAM,SAAW,MAAO;AAI3B,qBAAa,IAAK;AAElB,YAAI,UAAU;AAEd,YAAK,QAAQ,UAAW;AAEvB,cAAI,WAAW,QAAQ;AAEvB,mBAAU,IAAI,GAAG,KAAK,SAAS,QAAQ,IAAI,IAAI,KAAO;AAErD,gBAAI,QAAQ,SAAU;AACtB,oBAAQ,KAAM,kBAAmB,OAAO,MAAM,MAAM;AAAA;AAAA;AAMtD,eAAO,QAAQ,IAAK;AAAA;AAAA;AAMtB,WAAO,mBAAoB,YAAa;AAEvC,UAAI,OAAO,KAAK;AAChB,UAAI,aAAa,KAAK;AACtB,UAAI,WAAW,KAAK,KAAK,OAAQ;AACjC,UAAI,SAAS;AAEb,UAAI,QAAQ,IAAI;AAChB,UAAK,SAAS,SAAS;AAAY,cAAM,OAAO,SAAS;AAEzD,6BAAwB,OAAO;AAE/B,UAAK,SAAS;AAAa,uCAAgC,YAAY,OAAO;AAE9E,UAAI,UAAU,SAAS,SAAS;AAEhC,UAAI,UAAU;AAEd,eAAU,IAAI,GAAG,KAAK,QAAQ,QAAQ,IAAI,IAAI,KAAO;AAEpD,gBAAQ,KAAM,kBAAmB,QAAS,IAAK,OAAO,MAAM;AAAA;AAI7D,aAAO,QAAQ,IAAK,SAAU,KAAM,WAAY;AAE/C,eAAO;AAAA;AAAA;AAAA;AAQV,SAAO;AAAA;",
  "names": []
}
