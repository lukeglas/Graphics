{
  "version": 3,
  "sources": ["../three/examples/jsm/loaders/deprecated/LegacyJSONLoader.js"],
  "sourcesContent": ["/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tAdditiveBlending,\n\tAnimationClip,\n\tBackSide,\n\tColor,\n\tCustomBlending,\n\tDefaultLoadingManager,\n\tDoubleSide,\n\tFace3,\n\tFaceColors,\n\tFileLoader,\n\tGeometry,\n\tLoader,\n\tLoaderUtils,\n\tMaterialLoader,\n\tMath as _Math,\n\tMirroredRepeatWrapping,\n\tMultiplyBlending,\n\tNoBlending,\n\tNormalBlending,\n\tRepeatWrapping,\n\tSubtractiveBlending,\n\tTextureLoader,\n\tVector2,\n\tVector3,\n\tVector4,\n\tVertexColors\n} from \"../../../../build/three.module.js\";\n\nvar LegacyJSONLoader = ( function () {\n\n\tfunction LegacyJSONLoader( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t}\n\n\tObject.assign( LegacyJSONLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === undefined ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, path );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( value ) {\n\n\t\t\tthis.resourcePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: ( function () {\n\n\t\t\tvar _BlendingMode = {\n\t\t\t\tNoBlending: NoBlending,\n\t\t\t\tNormalBlending: NormalBlending,\n\t\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\t\tCustomBlending: CustomBlending\n\t\t\t};\n\n\t\t\tvar _color = new Color();\n\t\t\tvar _textureLoader = new TextureLoader();\n\t\t\tvar _materialLoader = new MaterialLoader();\n\n\t\t\tfunction initMaterials( materials, texturePath, crossOrigin ) {\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\t\t\tarray[ i ] = createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tfunction createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t\t// convert from old material format\n\n\t\t\t\tvar textures = {};\n\n\t\t\t\t//\n\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\n\t\t\t\tfor ( var name in m ) {\n\n\t\t\t\t\tvar value = m[ name ];\n\n\t\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = _BlendingMode[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = _color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = _color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = _color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy, textures, texturePath, crossOrigin );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\t\t_materialLoader.setTextures( textures );\n\n\t\t\t\treturn _materialLoader.parse( json );\n\n\t\t\t}\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy, textures, texturePath, crossOrigin ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_textureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = _textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\tfunction parseModel( json, geometry ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\t\toffset, zLength,\n\n\t\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\t\ttype,\n\t\t\t\t\tisQuad,\n\t\t\t\t\thasMaterial,\n\t\t\t\t\thasFaceVertexUv,\n\t\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\t\tfaces = json.faces,\n\t\t\t\t\tvertices = json.vertices,\n\t\t\t\t\tnormals = json.normals,\n\t\t\t\t\tcolors = json.colors,\n\n\t\t\t\t\tscale = json.scale,\n\n\t\t\t\t\tnUvLayers = 0;\n\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\t\tvar scale = json.scale;\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t}\n\n\t\t\treturn function parse( json, path ) {\n\n\t\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t\t// Geometry 4.0 spec\n\t\t\t\t\tjson = json.data;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tjson.scale = 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new Geometry();\n\n\t\t\t\tparseModel( json, geometry );\n\t\t\t\tparseSkin( json, geometry );\n\t\t\t\tparseMorphing( json, geometry );\n\t\t\t\tparseAnimations( json, geometry );\n\n\t\t\t\tgeometry.computeFaceNormals();\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\t\treturn { geometry: geometry };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar materials = initMaterials( json.materials, this.resourcePath || path, this.crossOrigin );\n\n\t\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\treturn LegacyJSONLoader;\n\n} )();\n\nexport { LegacyJSONLoader };\n"],
  "mappings": "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",
  "names": []
}
