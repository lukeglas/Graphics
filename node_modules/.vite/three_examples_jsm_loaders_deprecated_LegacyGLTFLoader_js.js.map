{
  "version": 3,
  "sources": ["../three/examples/jsm/loaders/deprecated/LegacyGLTFLoader.js"],
  "sourcesContent": ["/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n */\n\nimport {\n\tAddEquation,\n\tAlphaFormat,\n\tAlwaysDepth,\n\tAmbientLight,\n\tAnimationClip,\n\tAnimationUtils,\n\tBackSide,\n\tBone,\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tCustomBlending,\n\tDefaultLoadingManager,\n\tDirectionalLight,\n\tDoubleSide,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tEqualDepth,\n\tFileLoader,\n\tFrontSide,\n\tGreaterEqualDepth,\n\tGroup,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tInterpolateDiscrete,\n\tInterpolateLinear,\n\tLessDepth,\n\tLessEqualDepth,\n\tLine,\n\tLineLoop,\n\tLineSegments,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearMipmapNearestFilter,\n\tLoader,\n\tLoaderUtils,\n\tLuminanceAlphaFormat,\n\tLuminanceFormat,\n\tMath as _Math,\n\tMatrix3,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tNearestMipmapLinearFilter,\n\tNearestMipmapNearestFilter,\n\tNeverDepth,\n\tNoBlending,\n\tNotEqualDepth,\n\tObject3D,\n\tOneFactor,\n\tOneMinusDstAlphaFactor,\n\tOneMinusDstColorFactor,\n\tOneMinusSrcAlphaFactor,\n\tOneMinusSrcColorFactor,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tQuaternionKeyframeTrack,\n\tRGBAFormat,\n\tRGBFormat,\n\tRawShaderMaterial,\n\tRepeatWrapping,\n\tReverseSubtractEquation,\n\tScene,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tSrcAlphaFactor,\n\tSrcAlphaSaturateFactor,\n\tSrcColorFactor,\n\tSubtractEquation,\n\tTexture,\n\tTextureLoader,\n\tUniformsUtils,\n\tUnsignedByteType,\n\tUnsignedShort4444Type,\n\tUnsignedShort5551Type,\n\tUnsignedShort565Type,\n\tVector2,\n\tVector3,\n\tVector4,\n\tVectorKeyframeTrack,\n\tZeroFactor\n} from \"../../../../build/three.module.js\";\n\nvar LegacyGLTFLoader = ( function () {\n\n\tfunction LegacyGLTFLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tLegacyGLTFLoader.prototype = {\n\n\t\tconstructor: LegacyGLTFLoader,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar resourcePath;\n\n\t\t\tif ( this.resourcePath !== undefined ) {\n\n\t\t\t\tresourcePath = this.resourcePath;\n\n\t\t\t} else if ( this.path !== undefined ) {\n\n\t\t\t\tresourcePath = this.path;\n\n\t\t\t} else {\n\n\t\t\t\tresourcePath = LoaderUtils.extractUrlBase( url );\n\n\t\t\t}\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\tscope.parse( data, resourcePath, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\n\t\t},\n\n\t\tsetResourcePath: function ( value ) {\n\n\t\t\tthis.resourcePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( data, path, callback ) {\n\n\t\t\tvar content;\n\t\t\tvar extensions = {};\n\n\t\t\tvar magic = LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );\n\n\t\t\tif ( magic === BINARY_EXTENSION_HEADER_DEFAULTS.magic ) {\n\n\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\t\t\t\tcontent = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;\n\n\t\t\t} else {\n\n\t\t\t\tcontent = LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t\t}\n\n\t\t\tvar json = JSON.parse( content );\n\n\t\t\tif ( json.extensionsUsed && json.extensionsUsed.indexOf( EXTENSIONS.KHR_MATERIALS_COMMON ) >= 0 ) {\n\n\t\t\t\textensions[ EXTENSIONS.KHR_MATERIALS_COMMON ] = new GLTFMaterialsCommonExtension( json );\n\n\t\t\t}\n\n\t\t\tvar parser = new GLTFParser( json, extensions, {\n\n\t\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\t\tmanager: this.manager,\n\t\t\t\tpath: path || this.resourcePath || ''\n\n\t\t\t} );\n\n\t\t\tparser.parse( function ( scene, scenes, cameras, animations ) {\n\n\t\t\t\tvar glTF = {\n\t\t\t\t\t\"scene\": scene,\n\t\t\t\t\t\"scenes\": scenes,\n\t\t\t\t\t\"cameras\": cameras,\n\t\t\t\t\t\"animations\": animations\n\t\t\t\t};\n\n\t\t\t\tcallback( glTF );\n\n\t\t\t} );\n\n\t\t}\n\n\t};\n\n\t/* GLTFREGISTRY */\n\n\tfunction GLTFRegistry() {\n\n\t\tvar objects = {};\n\n\t\treturn\t{\n\n\t\t\tget: function ( key ) {\n\n\t\t\t\treturn objects[ key ];\n\n\t\t\t},\n\n\t\t\tadd: function ( key, object ) {\n\n\t\t\t\tobjects[ key ] = object;\n\n\t\t\t},\n\n\t\t\tremove: function ( key ) {\n\n\t\t\t\tdelete objects[ key ];\n\n\t\t\t},\n\n\t\t\tremoveAll: function () {\n\n\t\t\t\tobjects = {};\n\n\t\t\t},\n\n\t\t\tupdate: function ( scene, camera ) {\n\n\t\t\t\tfor ( var name in objects ) {\n\n\t\t\t\t\tvar object = objects[ name ];\n\n\t\t\t\t\tif ( object.update ) {\n\n\t\t\t\t\t\tobject.update( scene, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/* GLTFSHADERS */\n\n\tLegacyGLTFLoader.Shaders = {\n\n\t\tupdate: function () {\n\n\t\t\tconsole.warn( 'THREE.LegacyGLTFLoader.Shaders has been deprecated, and now updates automatically.' );\n\n\t\t}\n\n\t};\n\n\t/* GLTFSHADER */\n\n\tfunction GLTFShader( targetNode, allNodes ) {\n\n\t\tvar boundUniforms = {};\n\n\t\t// bind each uniform to its source node\n\n\t\tvar uniforms = targetNode.material.uniforms;\n\n\t\tfor ( var uniformId in uniforms ) {\n\n\t\t\tvar uniform = uniforms[ uniformId ];\n\n\t\t\tif ( uniform.semantic ) {\n\n\t\t\t\tvar sourceNodeRef = uniform.node;\n\n\t\t\t\tvar sourceNode = targetNode;\n\n\t\t\t\tif ( sourceNodeRef ) {\n\n\t\t\t\t\tsourceNode = allNodes[ sourceNodeRef ];\n\n\t\t\t\t}\n\n\t\t\t\tboundUniforms[ uniformId ] = {\n\t\t\t\t\tsemantic: uniform.semantic,\n\t\t\t\t\tsourceNode: sourceNode,\n\t\t\t\t\ttargetNode: targetNode,\n\t\t\t\t\tuniform: uniform\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.boundUniforms = boundUniforms;\n\t\tthis._m4 = new Matrix4();\n\n\t}\n\n\t// Update - update all the uniform values\n\tGLTFShader.prototype.update = function ( scene, camera ) {\n\n\t\tvar boundUniforms = this.boundUniforms;\n\n\t\tfor ( var name in boundUniforms ) {\n\n\t\t\tvar boundUniform = boundUniforms[ name ];\n\n\t\t\tswitch ( boundUniform.semantic ) {\n\n\t\t\t\tcase \"MODELVIEW\":\n\n\t\t\t\t\tvar m4 = boundUniform.uniform.value;\n\t\t\t\t\tm4.multiplyMatrices( camera.matrixWorldInverse, boundUniform.sourceNode.matrixWorld );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"MODELVIEWINVERSETRANSPOSE\":\n\n\t\t\t\t\tvar m3 = boundUniform.uniform.value;\n\t\t\t\t\tthis._m4.multiplyMatrices( camera.matrixWorldInverse, boundUniform.sourceNode.matrixWorld );\n\t\t\t\t\tm3.getNormalMatrix( this._m4 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"PROJECTION\":\n\n\t\t\t\t\tvar m4 = boundUniform.uniform.value;\n\t\t\t\t\tm4.copy( camera.projectionMatrix );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"JOINTMATRIX\":\n\n\t\t\t\t\tvar m4v = boundUniform.uniform.value;\n\n\t\t\t\t\tfor ( var mi = 0; mi < m4v.length; mi ++ ) {\n\n\t\t\t\t\t\t// So it goes like this:\n\t\t\t\t\t\t// SkinnedMesh world matrix is already baked into MODELVIEW;\n\t\t\t\t\t\t// transform joints to local space,\n\t\t\t\t\t\t// then transform using joint's inverse\n\t\t\t\t\t\tm4v[ mi ]\n\t\t\t\t\t\t\t.getInverse( boundUniform.sourceNode.matrixWorld )\n\t\t\t\t\t\t\t.multiply( boundUniform.targetNode.skeleton.bones[ mi ].matrixWorld )\n\t\t\t\t\t\t\t.multiply( boundUniform.targetNode.skeleton.boneInverses[ mi ] )\n\t\t\t\t\t\t\t.multiply( boundUniform.targetNode.bindMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault :\n\n\t\t\t\t\tconsole.warn( \"Unhandled shader semantic: \" + boundUniform.semantic );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\t/* ANIMATION */\n\n\tLegacyGLTFLoader.Animations = {\n\n\t\tupdate: function () {\n\n\t\t\tconsole.warn( 'THREE.LegacyGLTFLoader.Animation has been deprecated. Use THREE.AnimationMixer instead.' );\n\n\t\t}\n\n\t};\n\n\t/*********************************/\n\t/********** EXTENSIONS ***********/\n\t/*********************************/\n\n\tvar EXTENSIONS = {\n\t\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\t\tKHR_MATERIALS_COMMON: 'KHR_materials_common'\n\t};\n\n\t/* MATERIALS COMMON EXTENSION */\n\n\tfunction GLTFMaterialsCommonExtension( json ) {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_COMMON;\n\n\t\tthis.lights = {};\n\n\t\tvar extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_MATERIALS_COMMON ] ) || {};\n\t\tvar lights = extension.lights || {};\n\n\t\tfor ( var lightId in lights ) {\n\n\t\t\tvar light = lights[ lightId ];\n\t\t\tvar lightNode;\n\n\t\t\tvar lightParams = light[ light.type ];\n\t\t\tvar color = new Color().fromArray( lightParams.color );\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase \"directional\":\n\t\t\t\t\tlightNode = new DirectionalLight( color );\n\t\t\t\t\tlightNode.position.set( 0, 0, 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"point\":\n\t\t\t\t\tlightNode = new PointLight( color );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"spot\":\n\t\t\t\t\tlightNode = new SpotLight( color );\n\t\t\t\t\tlightNode.position.set( 0, 0, 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ambient\":\n\t\t\t\t\tlightNode = new AmbientLight( color );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( lightNode ) {\n\n\t\t\t\tthis.lights[ lightId ] = lightNode;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* BINARY EXTENSION */\n\n\tvar BINARY_EXTENSION_BUFFER_NAME = 'binary_glTF';\n\n\tvar BINARY_EXTENSION_HEADER_DEFAULTS = { magic: 'glTF', version: 1, contentFormat: 0 };\n\n\tvar BINARY_EXTENSION_HEADER_LENGTH = 20;\n\n\tfunction GLTFBinaryExtension( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\n\t\tvar headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\n\t\tvar header = {\n\t\t\tmagic: LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true ),\n\t\t\tcontentLength: headerView.getUint32( 12, true ),\n\t\t\tcontentFormat: headerView.getUint32( 16, true )\n\t\t};\n\n\t\tfor ( var key in BINARY_EXTENSION_HEADER_DEFAULTS ) {\n\n\t\t\tvar value = BINARY_EXTENSION_HEADER_DEFAULTS[ key ];\n\n\t\t\tif ( header[ key ] !== value ) {\n\n\t\t\t\tthrow new Error( 'Unsupported glTF-Binary header: Expected \"%s\" to be \"%s\".', key, value );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH, header.contentLength );\n\n\t\tthis.header = header;\n\t\tthis.content = LoaderUtils.decodeText( contentArray );\n\t\tthis.body = data.slice( BINARY_EXTENSION_HEADER_LENGTH + header.contentLength, header.length );\n\n\t}\n\n\tGLTFBinaryExtension.prototype.loadShader = function ( shader, bufferViews ) {\n\n\t\tvar bufferView = bufferViews[ shader.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].bufferView ];\n\t\tvar array = new Uint8Array( bufferView );\n\n\t\treturn LoaderUtils.decodeText( array );\n\n\t};\n\n\t/*********************************/\n\t/********** INTERNALS ************/\n\t/*********************************/\n\n\t/* CONSTANTS */\n\n\tvar WEBGL_CONSTANTS = {\n\t\tFLOAT: 5126,\n\t\t//FLOAT_MAT2: 35674,\n\t\tFLOAT_MAT3: 35675,\n\t\tFLOAT_MAT4: 35676,\n\t\tFLOAT_VEC2: 35664,\n\t\tFLOAT_VEC3: 35665,\n\t\tFLOAT_VEC4: 35666,\n\t\tLINEAR: 9729,\n\t\tREPEAT: 10497,\n\t\tSAMPLER_2D: 35678,\n\t\tTRIANGLES: 4,\n\t\tLINES: 1,\n\t\tUNSIGNED_BYTE: 5121,\n\t\tUNSIGNED_SHORT: 5123,\n\n\t\tVERTEX_SHADER: 35633,\n\t\tFRAGMENT_SHADER: 35632\n\t};\n\n\tvar WEBGL_TYPE = {\n\t\t5126: Number,\n\t\t//35674: Matrix2,\n\t\t35675: Matrix3,\n\t\t35676: Matrix4,\n\t\t35664: Vector2,\n\t\t35665: Vector3,\n\t\t35666: Vector4,\n\t\t35678: Texture\n\t};\n\n\tvar WEBGL_COMPONENT_TYPES = {\n\t\t5120: Int8Array,\n\t\t5121: Uint8Array,\n\t\t5122: Int16Array,\n\t\t5123: Uint16Array,\n\t\t5125: Uint32Array,\n\t\t5126: Float32Array\n\t};\n\n\tvar WEBGL_FILTERS = {\n\t\t9728: NearestFilter,\n\t\t9729: LinearFilter,\n\t\t9984: NearestMipmapNearestFilter,\n\t\t9985: LinearMipmapNearestFilter,\n\t\t9986: NearestMipmapLinearFilter,\n\t\t9987: LinearMipmapLinearFilter\n\t};\n\n\tvar WEBGL_WRAPPINGS = {\n\t\t33071: ClampToEdgeWrapping,\n\t\t33648: MirroredRepeatWrapping,\n\t\t10497: RepeatWrapping\n\t};\n\n\tvar WEBGL_TEXTURE_FORMATS = {\n\t\t6406: AlphaFormat,\n\t\t6407: RGBFormat,\n\t\t6408: RGBAFormat,\n\t\t6409: LuminanceFormat,\n\t\t6410: LuminanceAlphaFormat\n\t};\n\n\tvar WEBGL_TEXTURE_DATATYPES = {\n\t\t5121: UnsignedByteType,\n\t\t32819: UnsignedShort4444Type,\n\t\t32820: UnsignedShort5551Type,\n\t\t33635: UnsignedShort565Type\n\t};\n\n\tvar WEBGL_SIDES = {\n\t\t1028: BackSide, // Culling front\n\t\t1029: FrontSide // Culling back\n\t\t//1032: NoSide   // Culling front and back, what to do?\n\t};\n\n\tvar WEBGL_DEPTH_FUNCS = {\n\t\t512: NeverDepth,\n\t\t513: LessDepth,\n\t\t514: EqualDepth,\n\t\t515: LessEqualDepth,\n\t\t516: GreaterEqualDepth,\n\t\t517: NotEqualDepth,\n\t\t518: GreaterEqualDepth,\n\t\t519: AlwaysDepth\n\t};\n\n\tvar WEBGL_BLEND_EQUATIONS = {\n\t\t32774: AddEquation,\n\t\t32778: SubtractEquation,\n\t\t32779: ReverseSubtractEquation\n\t};\n\n\tvar WEBGL_BLEND_FUNCS = {\n\t\t0: ZeroFactor,\n\t\t1: OneFactor,\n\t\t768: SrcColorFactor,\n\t\t769: OneMinusSrcColorFactor,\n\t\t770: SrcAlphaFactor,\n\t\t771: OneMinusSrcAlphaFactor,\n\t\t772: DstAlphaFactor,\n\t\t773: OneMinusDstAlphaFactor,\n\t\t774: DstColorFactor,\n\t\t775: OneMinusDstColorFactor,\n\t\t776: SrcAlphaSaturateFactor\n\t\t// The followings are not supported by Three.js yet\n\t\t//32769: CONSTANT_COLOR,\n\t\t//32770: ONE_MINUS_CONSTANT_COLOR,\n\t\t//32771: CONSTANT_ALPHA,\n\t\t//32772: ONE_MINUS_CONSTANT_COLOR\n\t};\n\n\tvar WEBGL_TYPE_SIZES = {\n\t\t'SCALAR': 1,\n\t\t'VEC2': 2,\n\t\t'VEC3': 3,\n\t\t'VEC4': 4,\n\t\t'MAT2': 4,\n\t\t'MAT3': 9,\n\t\t'MAT4': 16\n\t};\n\n\tvar PATH_PROPERTIES = {\n\t\tscale: 'scale',\n\t\ttranslation: 'position',\n\t\trotation: 'quaternion'\n\t};\n\n\tvar INTERPOLATION = {\n\t\tLINEAR: InterpolateLinear,\n\t\tSTEP: InterpolateDiscrete\n\t};\n\n\tvar STATES_ENABLES = {\n\t\t2884: 'CULL_FACE',\n\t\t2929: 'DEPTH_TEST',\n\t\t3042: 'BLEND',\n\t\t3089: 'SCISSOR_TEST',\n\t\t32823: 'POLYGON_OFFSET_FILL',\n\t\t32926: 'SAMPLE_ALPHA_TO_COVERAGE'\n\t};\n\n\t/* UTILITY FUNCTIONS */\n\n\tfunction _each( object, callback, thisObj ) {\n\n\t\tif ( ! object ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tvar results;\n\t\tvar fns = [];\n\n\t\tif ( Object.prototype.toString.call( object ) === '[object Array]' ) {\n\n\t\t\tresults = [];\n\n\t\t\tvar length = object.length;\n\n\t\t\tfor ( var idx = 0; idx < length; idx ++ ) {\n\n\t\t\t\tvar value = callback.call( thisObj || this, object[ idx ], idx );\n\n\t\t\t\tif ( value ) {\n\n\t\t\t\t\tfns.push( value );\n\n\t\t\t\t\tif ( value instanceof Promise ) {\n\n\t\t\t\t\t\tvalue.then( function ( key, value ) {\n\n\t\t\t\t\t\t\tresults[ key ] = value;\n\n\t\t\t\t\t\t}.bind( this, idx ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tresults[ idx ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tresults = {};\n\n\t\t\tfor ( var key in object ) {\n\n\t\t\t\tif ( object.hasOwnProperty( key ) ) {\n\n\t\t\t\t\tvar value = callback.call( thisObj || this, object[ key ], key );\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tfns.push( value );\n\n\t\t\t\t\t\tif ( value instanceof Promise ) {\n\n\t\t\t\t\t\t\tvalue.then( function ( key, value ) {\n\n\t\t\t\t\t\t\t\tresults[ key ] = value;\n\n\t\t\t\t\t\t\t}.bind( this, key ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tresults[ key ] = value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( fns ).then( function () {\n\n\t\t\treturn results;\n\n\t\t} );\n\n\t}\n\n\tfunction resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\treturn '';\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) {\n\n\t\t\treturn url;\n\n\t\t}\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) {\n\n\t\t\treturn url;\n\n\t\t}\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) {\n\n\t\t\treturn url;\n\n\t\t}\n\n\t\t// Relative URL\n\t\treturn ( path || '' ) + url;\n\n\t}\n\n\t// Three.js seems too dependent on attribute names so globally\n\t// replace those in the shader code\n\tfunction replaceTHREEShaderAttributes( shaderText, technique ) {\n\n\t\t// Expected technique attributes\n\t\tvar attributes = {};\n\n\t\tfor ( var attributeId in technique.attributes ) {\n\n\t\t\tvar pname = technique.attributes[ attributeId ];\n\n\t\t\tvar param = technique.parameters[ pname ];\n\t\t\tvar atype = param.type;\n\t\t\tvar semantic = param.semantic;\n\n\t\t\tattributes[ attributeId ] = {\n\t\t\t\ttype: atype,\n\t\t\t\tsemantic: semantic\n\t\t\t};\n\n\t\t}\n\n\t\t// Figure out which attributes to change in technique\n\n\t\tvar shaderParams = technique.parameters;\n\t\tvar shaderAttributes = technique.attributes;\n\t\tvar params = {};\n\n\t\tfor ( var attributeId in attributes ) {\n\n\t\t\tvar pname = shaderAttributes[ attributeId ];\n\t\t\tvar shaderParam = shaderParams[ pname ];\n\t\t\tvar semantic = shaderParam.semantic;\n\t\t\tif ( semantic ) {\n\n\t\t\t\tparams[ attributeId ] = shaderParam;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var pname in params ) {\n\n\t\t\tvar param = params[ pname ];\n\t\t\tvar semantic = param.semantic;\n\n\t\t\tvar regEx = new RegExp( \"\\\\b\" + pname + \"\\\\b\", \"g\" );\n\n\t\t\tswitch ( semantic ) {\n\n\t\t\t\tcase \"POSITION\":\n\n\t\t\t\t\tshaderText = shaderText.replace( regEx, 'position' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"NORMAL\":\n\n\t\t\t\t\tshaderText = shaderText.replace( regEx, 'normal' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TEXCOORD_0':\n\t\t\t\tcase 'TEXCOORD0':\n\t\t\t\tcase 'TEXCOORD':\n\n\t\t\t\t\tshaderText = shaderText.replace( regEx, 'uv' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TEXCOORD_1':\n\n\t\t\t\t\tshaderText = shaderText.replace( regEx, 'uv2' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'COLOR_0':\n\t\t\t\tcase 'COLOR0':\n\t\t\t\tcase 'COLOR':\n\n\t\t\t\t\tshaderText = shaderText.replace( regEx, 'color' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"WEIGHT\":\n\n\t\t\t\t\tshaderText = shaderText.replace( regEx, 'skinWeight' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"JOINT\":\n\n\t\t\t\t\tshaderText = shaderText.replace( regEx, 'skinIndex' );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shaderText;\n\n\t}\n\n\tfunction createDefaultMaterial() {\n\n\t\treturn new MeshPhongMaterial( {\n\t\t\tcolor: 0x00000,\n\t\t\temissive: 0x888888,\n\t\t\tspecular: 0x000000,\n\t\t\tshininess: 0,\n\t\t\ttransparent: false,\n\t\t\tdepthTest: true,\n\t\t\tside: FrontSide\n\t\t} );\n\n\t}\n\n\t// Deferred constructor for RawShaderMaterial types\n\tfunction DeferredShaderMaterial( params ) {\n\n\t\tthis.isDeferredShaderMaterial = true;\n\n\t\tthis.params = params;\n\n\t}\n\n\tDeferredShaderMaterial.prototype.create = function () {\n\n\t\tvar uniforms = UniformsUtils.clone( this.params.uniforms );\n\n\t\tfor ( var uniformId in this.params.uniforms ) {\n\n\t\t\tvar originalUniform = this.params.uniforms[ uniformId ];\n\n\t\t\tif ( originalUniform.value instanceof Texture ) {\n\n\t\t\t\tuniforms[ uniformId ].value = originalUniform.value;\n\t\t\t\tuniforms[ uniformId ].value.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tuniforms[ uniformId ].semantic = originalUniform.semantic;\n\t\t\tuniforms[ uniformId ].node = originalUniform.node;\n\n\t\t}\n\n\t\tthis.params.uniforms = uniforms;\n\n\t\treturn new RawShaderMaterial( this.params );\n\n\t};\n\n\t/* GLTF PARSER */\n\n\tfunction GLTFParser( json, extensions, options ) {\n\n\t\tthis.json = json || {};\n\t\tthis.extensions = extensions || {};\n\t\tthis.options = options || {};\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t}\n\n\tGLTFParser.prototype._withDependencies = function ( dependencies ) {\n\n\t\tvar _dependencies = {};\n\n\t\tfor ( var i = 0; i < dependencies.length; i ++ ) {\n\n\t\t\tvar dependency = dependencies[ i ];\n\t\t\tvar fnName = \"load\" + dependency.charAt( 0 ).toUpperCase() + dependency.slice( 1 );\n\n\t\t\tvar cached = this.cache.get( dependency );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\t_dependencies[ dependency ] = cached;\n\n\t\t\t} else if ( this[ fnName ] ) {\n\n\t\t\t\tvar fn = this[ fnName ]();\n\t\t\t\tthis.cache.add( dependency, fn );\n\n\t\t\t\t_dependencies[ dependency ] = fn;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn _each( _dependencies, function ( dependency ) {\n\n\t\t\treturn dependency;\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.parse = function ( callback ) {\n\n\t\tvar json = this.json;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\n\t\t// Fire the callback on complete\n\t\tthis._withDependencies( [\n\n\t\t\t\"scenes\",\n\t\t\t\"cameras\",\n\t\t\t\"animations\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar scenes = [];\n\n\t\t\tfor ( var name in dependencies.scenes ) {\n\n\t\t\t\tscenes.push( dependencies.scenes[ name ] );\n\n\t\t\t}\n\n\t\t\tvar scene = json.scene !== undefined ? dependencies.scenes[ json.scene ] : scenes[ 0 ];\n\n\t\t\tvar cameras = [];\n\n\t\t\tfor ( var name in dependencies.cameras ) {\n\n\t\t\t\tvar camera = dependencies.cameras[ name ];\n\t\t\t\tcameras.push( camera );\n\n\t\t\t}\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var name in dependencies.animations ) {\n\n\t\t\t\tanimations.push( dependencies.animations[ name ] );\n\n\t\t\t}\n\n\t\t\tcallback( scene, scenes, cameras, animations );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadShaders = function () {\n\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar options = this.options;\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"bufferViews\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.shaders, function ( shader ) {\n\n\t\t\t\tif ( shader.extensions && shader.extensions[ EXTENSIONS.KHR_BINARY_GLTF ] ) {\n\n\t\t\t\t\treturn extensions[ EXTENSIONS.KHR_BINARY_GLTF ].loadShader( shader, dependencies.bufferViews );\n\n\t\t\t\t}\n\n\t\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\t\tvar loader = new FileLoader( options.manager );\n\t\t\t\t\tloader.setResponseType( 'text' );\n\t\t\t\t\tloader.load( resolveURL( shader.uri, options.path ), function ( shaderText ) {\n\n\t\t\t\t\t\tresolve( shaderText );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadBuffers = function () {\n\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar options = this.options;\n\n\t\treturn _each( json.buffers, function ( buffer, name ) {\n\n\t\t\tif ( name === BINARY_EXTENSION_BUFFER_NAME ) {\n\n\t\t\t\treturn extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body;\n\n\t\t\t}\n\n\t\t\tif ( buffer.type === 'arraybuffer' || buffer.type === undefined ) {\n\n\t\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\t\tvar loader = new FileLoader( options.manager );\n\t\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\t\t\tloader.load( resolveURL( buffer.uri, options.path ), function ( buffer ) {\n\n\t\t\t\t\t\tresolve( buffer );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.LegacyGLTFLoader: ' + buffer.type + ' buffer type is not supported' );\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadBufferViews = function () {\n\n\t\tvar json = this.json;\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"buffers\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.bufferViews, function ( bufferView ) {\n\n\t\t\t\tvar arraybuffer = dependencies.buffers[ bufferView.buffer ];\n\n\t\t\t\tvar byteLength = bufferView.byteLength !== undefined ? bufferView.byteLength : 0;\n\n\t\t\t\treturn arraybuffer.slice( bufferView.byteOffset, bufferView.byteOffset + byteLength );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadAccessors = function () {\n\n\t\tvar json = this.json;\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"bufferViews\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.accessors, function ( accessor ) {\n\n\t\t\t\tvar arraybuffer = dependencies.bufferViews[ accessor.bufferView ];\n\t\t\t\tvar itemSize = WEBGL_TYPE_SIZES[ accessor.type ];\n\t\t\t\tvar TypedArray = WEBGL_COMPONENT_TYPES[ accessor.componentType ];\n\n\t\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\t\tvar elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\t\tvar itemBytes = elementBytes * itemSize;\n\n\t\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\t\tif ( accessor.byteStride && accessor.byteStride !== itemBytes ) {\n\n\t\t\t\t\t// Use the full buffer if it's interleaved.\n\t\t\t\t\tvar array = new TypedArray( arraybuffer );\n\n\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\tvar ib = new InterleavedBuffer( array, accessor.byteStride / elementBytes );\n\n\t\t\t\t\treturn new InterleavedBufferAttribute( ib, itemSize, accessor.byteOffset / elementBytes );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( arraybuffer, accessor.byteOffset, accessor.count * itemSize );\n\n\t\t\t\t\treturn new BufferAttribute( array, itemSize );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadTextures = function () {\n\n\t\tvar json = this.json;\n\t\tvar options = this.options;\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"bufferViews\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.textures, function ( texture ) {\n\n\t\t\t\tif ( texture.source ) {\n\n\t\t\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\t\t\tvar source = json.images[ texture.source ];\n\t\t\t\t\t\tvar sourceUri = source.uri;\n\t\t\t\t\t\tvar isObjectURL = false;\n\n\t\t\t\t\t\tif ( source.extensions && source.extensions[ EXTENSIONS.KHR_BINARY_GLTF ] ) {\n\n\t\t\t\t\t\t\tvar metadata = source.extensions[ EXTENSIONS.KHR_BINARY_GLTF ];\n\t\t\t\t\t\t\tvar bufferView = dependencies.bufferViews[ metadata.bufferView ];\n\t\t\t\t\t\t\tvar blob = new Blob( [ bufferView ], { type: metadata.mimeType } );\n\t\t\t\t\t\t\tsourceUri = URL.createObjectURL( blob );\n\t\t\t\t\t\t\tisObjectURL = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar textureLoader = Loader.Handlers.get( sourceUri );\n\n\t\t\t\t\t\tif ( textureLoader === null ) {\n\n\t\t\t\t\t\t\ttextureLoader = new TextureLoader( options.manager );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( options.crossOrigin );\n\n\t\t\t\t\t\ttextureLoader.load( resolveURL( sourceUri, options.path ), function ( _texture ) {\n\n\t\t\t\t\t\t\tif ( isObjectURL ) URL.revokeObjectURL( sourceUri );\n\n\t\t\t\t\t\t\t_texture.flipY = false;\n\n\t\t\t\t\t\t\tif ( texture.name !== undefined ) _texture.name = texture.name;\n\n\t\t\t\t\t\t\t_texture.format = texture.format !== undefined ? WEBGL_TEXTURE_FORMATS[ texture.format ] : RGBAFormat;\n\n\t\t\t\t\t\t\tif ( texture.internalFormat !== undefined && _texture.format !== WEBGL_TEXTURE_FORMATS[ texture.internalFormat ] ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.LegacyGLTFLoader: Three.js doesn\\'t support texture internalFormat which is different from texture format. ' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'internalFormat will be forced to be the same value as format.' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_texture.type = texture.type !== undefined ? WEBGL_TEXTURE_DATATYPES[ texture.type ] : UnsignedByteType;\n\n\t\t\t\t\t\t\tif ( texture.sampler ) {\n\n\t\t\t\t\t\t\t\tvar sampler = json.samplers[ texture.sampler ];\n\n\t\t\t\t\t\t\t\t_texture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || LinearFilter;\n\t\t\t\t\t\t\t\t_texture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || NearestMipmapLinearFilter;\n\t\t\t\t\t\t\t\t_texture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || RepeatWrapping;\n\t\t\t\t\t\t\t\t_texture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || RepeatWrapping;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tresolve( _texture );\n\n\t\t\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\t\t\tif ( isObjectURL ) URL.revokeObjectURL( sourceUri );\n\n\t\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadMaterials = function () {\n\n\t\tvar json = this.json;\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"shaders\",\n\t\t\t\"textures\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.materials, function ( material ) {\n\n\t\t\t\tvar materialType;\n\t\t\t\tvar materialValues = {};\n\t\t\t\tvar materialParams = {};\n\n\t\t\t\tvar khr_material;\n\n\t\t\t\tif ( material.extensions && material.extensions[ EXTENSIONS.KHR_MATERIALS_COMMON ] ) {\n\n\t\t\t\t\tkhr_material = material.extensions[ EXTENSIONS.KHR_MATERIALS_COMMON ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( khr_material ) {\n\n\t\t\t\t\t// don't copy over unused values to avoid material warning spam\n\t\t\t\t\tvar keys = [ 'ambient', 'emission', 'transparent', 'transparency', 'doubleSided' ];\n\n\t\t\t\t\tswitch ( khr_material.technique ) {\n\n\t\t\t\t\t\tcase 'BLINN' :\n\t\t\t\t\t\tcase 'PHONG' :\n\t\t\t\t\t\t\tmaterialType = MeshPhongMaterial;\n\t\t\t\t\t\t\tkeys.push( 'diffuse', 'specular', 'shininess' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LAMBERT' :\n\t\t\t\t\t\t\tmaterialType = MeshLambertMaterial;\n\t\t\t\t\t\t\tkeys.push( 'diffuse' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CONSTANT' :\n\t\t\t\t\t\tdefault :\n\t\t\t\t\t\t\tmaterialType = MeshBasicMaterial;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkeys.forEach( function ( v ) {\n\n\t\t\t\t\t\tif ( khr_material.values[ v ] !== undefined ) materialValues[ v ] = khr_material.values[ v ];\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( khr_material.doubleSided || materialValues.doubleSided ) {\n\n\t\t\t\t\t\tmaterialParams.side = DoubleSide;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( khr_material.transparent || materialValues.transparent ) {\n\n\t\t\t\t\t\tmaterialParams.transparent = true;\n\t\t\t\t\t\tmaterialParams.opacity = ( materialValues.transparency !== undefined ) ? materialValues.transparency : 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.technique === undefined ) {\n\n\t\t\t\t\tmaterialType = MeshPhongMaterial;\n\n\t\t\t\t\tObject.assign( materialValues, material.values );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialType = DeferredShaderMaterial;\n\n\t\t\t\t\tvar technique = json.techniques[ material.technique ];\n\n\t\t\t\t\tmaterialParams.uniforms = {};\n\n\t\t\t\t\tvar program = json.programs[ technique.program ];\n\n\t\t\t\t\tif ( program ) {\n\n\t\t\t\t\t\tmaterialParams.fragmentShader = dependencies.shaders[ program.fragmentShader ];\n\n\t\t\t\t\t\tif ( ! materialParams.fragmentShader ) {\n\n\t\t\t\t\t\t\tconsole.warn( \"ERROR: Missing fragment shader definition:\", program.fragmentShader );\n\t\t\t\t\t\t\tmaterialType = MeshPhongMaterial;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar vertexShader = dependencies.shaders[ program.vertexShader ];\n\n\t\t\t\t\t\tif ( ! vertexShader ) {\n\n\t\t\t\t\t\t\tconsole.warn( \"ERROR: Missing vertex shader definition:\", program.vertexShader );\n\t\t\t\t\t\t\tmaterialType = MeshPhongMaterial;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// IMPORTANT: FIX VERTEX SHADER ATTRIBUTE DEFINITIONS\n\t\t\t\t\t\tmaterialParams.vertexShader = replaceTHREEShaderAttributes( vertexShader, technique );\n\n\t\t\t\t\t\tvar uniforms = technique.uniforms;\n\n\t\t\t\t\t\tfor ( var uniformId in uniforms ) {\n\n\t\t\t\t\t\t\tvar pname = uniforms[ uniformId ];\n\t\t\t\t\t\t\tvar shaderParam = technique.parameters[ pname ];\n\n\t\t\t\t\t\t\tvar ptype = shaderParam.type;\n\n\t\t\t\t\t\t\tif ( WEBGL_TYPE[ ptype ] ) {\n\n\t\t\t\t\t\t\t\tvar pcount = shaderParam.count;\n\t\t\t\t\t\t\t\tvar value;\n\n\t\t\t\t\t\t\t\tif ( material.values !== undefined ) value = material.values[ pname ];\n\n\t\t\t\t\t\t\t\tvar uvalue = new WEBGL_TYPE[ ptype ]();\n\t\t\t\t\t\t\t\tvar usemantic = shaderParam.semantic;\n\t\t\t\t\t\t\t\tvar unode = shaderParam.node;\n\n\t\t\t\t\t\t\t\tswitch ( ptype ) {\n\n\t\t\t\t\t\t\t\t\tcase WEBGL_CONSTANTS.FLOAT:\n\n\t\t\t\t\t\t\t\t\t\tuvalue = shaderParam.value;\n\n\t\t\t\t\t\t\t\t\t\tif ( pname == \"transparency\" ) {\n\n\t\t\t\t\t\t\t\t\t\t\tmaterialParams.transparent = true;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\t\t\t\t\tuvalue = value;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase WEBGL_CONSTANTS.FLOAT_VEC2:\n\t\t\t\t\t\t\t\t\tcase WEBGL_CONSTANTS.FLOAT_VEC3:\n\t\t\t\t\t\t\t\t\tcase WEBGL_CONSTANTS.FLOAT_VEC4:\n\t\t\t\t\t\t\t\t\tcase WEBGL_CONSTANTS.FLOAT_MAT3:\n\n\t\t\t\t\t\t\t\t\t\tif ( shaderParam && shaderParam.value ) {\n\n\t\t\t\t\t\t\t\t\t\t\tuvalue.fromArray( shaderParam.value );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\t\t\t\t\t\tuvalue.fromArray( value );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase WEBGL_CONSTANTS.FLOAT_MAT2:\n\n\t\t\t\t\t\t\t\t\t\t// what to do?\n\t\t\t\t\t\t\t\t\t\tconsole.warn( \"FLOAT_MAT2 is not a supported uniform type\" );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase WEBGL_CONSTANTS.FLOAT_MAT4:\n\n\t\t\t\t\t\t\t\t\t\tif ( pcount ) {\n\n\t\t\t\t\t\t\t\t\t\t\tuvalue = new Array( pcount );\n\n\t\t\t\t\t\t\t\t\t\t\tfor ( var mi = 0; mi < pcount; mi ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tuvalue[ mi ] = new WEBGL_TYPE[ ptype ]();\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif ( shaderParam && shaderParam.value ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tvar m4v = shaderParam.value;\n\t\t\t\t\t\t\t\t\t\t\t\tuvalue.fromArray( m4v );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tuvalue.fromArray( value );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( shaderParam && shaderParam.value ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tvar m4 = shaderParam.value;\n\t\t\t\t\t\t\t\t\t\t\t\tuvalue.fromArray( m4 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tuvalue.fromArray( value );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase WEBGL_CONSTANTS.SAMPLER_2D:\n\n\t\t\t\t\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\t\t\t\t\tuvalue = dependencies.textures[ value ];\n\n\t\t\t\t\t\t\t\t\t\t} else if ( shaderParam.value !== undefined ) {\n\n\t\t\t\t\t\t\t\t\t\t\tuvalue = dependencies.textures[ shaderParam.value ];\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\tuvalue = null;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tmaterialParams.uniforms[ uniformId ] = {\n\t\t\t\t\t\t\t\t\tvalue: uvalue,\n\t\t\t\t\t\t\t\t\tsemantic: usemantic,\n\t\t\t\t\t\t\t\t\tnode: unode\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tthrow new Error( \"Unknown shader uniform param type: \" + ptype );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar states = technique.states || {};\n\t\t\t\t\t\tvar enables = states.enable || [];\n\t\t\t\t\t\tvar functions = states.functions || {};\n\n\t\t\t\t\t\tvar enableCullFace = false;\n\t\t\t\t\t\tvar enableDepthTest = false;\n\t\t\t\t\t\tvar enableBlend = false;\n\n\t\t\t\t\t\tfor ( var i = 0, il = enables.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar enable = enables[ i ];\n\n\t\t\t\t\t\t\tswitch ( STATES_ENABLES[ enable ] ) {\n\n\t\t\t\t\t\t\t\tcase 'CULL_FACE':\n\n\t\t\t\t\t\t\t\t\tenableCullFace = true;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'DEPTH_TEST':\n\n\t\t\t\t\t\t\t\t\tenableDepthTest = true;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'BLEND':\n\n\t\t\t\t\t\t\t\t\tenableBlend = true;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t// TODO: implement\n\t\t\t\t\t\t\t\tcase 'SCISSOR_TEST':\n\t\t\t\t\t\t\t\tcase 'POLYGON_OFFSET_FILL':\n\t\t\t\t\t\t\t\tcase 'SAMPLE_ALPHA_TO_COVERAGE':\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tthrow new Error( \"Unknown technique.states.enable: \" + enable );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( enableCullFace ) {\n\n\t\t\t\t\t\t\tmaterialParams.side = functions.cullFace !== undefined ? WEBGL_SIDES[ functions.cullFace ] : FrontSide;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterialParams.side = DoubleSide;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterialParams.depthTest = enableDepthTest;\n\t\t\t\t\t\tmaterialParams.depthFunc = functions.depthFunc !== undefined ? WEBGL_DEPTH_FUNCS[ functions.depthFunc ] : LessDepth;\n\t\t\t\t\t\tmaterialParams.depthWrite = functions.depthMask !== undefined ? functions.depthMask[ 0 ] : true;\n\n\t\t\t\t\t\tmaterialParams.blending = enableBlend ? CustomBlending : NoBlending;\n\t\t\t\t\t\tmaterialParams.transparent = enableBlend;\n\n\t\t\t\t\t\tvar blendEquationSeparate = functions.blendEquationSeparate;\n\n\t\t\t\t\t\tif ( blendEquationSeparate !== undefined ) {\n\n\t\t\t\t\t\t\tmaterialParams.blendEquation = WEBGL_BLEND_EQUATIONS[ blendEquationSeparate[ 0 ] ];\n\t\t\t\t\t\t\tmaterialParams.blendEquationAlpha = WEBGL_BLEND_EQUATIONS[ blendEquationSeparate[ 1 ] ];\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterialParams.blendEquation = AddEquation;\n\t\t\t\t\t\t\tmaterialParams.blendEquationAlpha = AddEquation;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar blendFuncSeparate = functions.blendFuncSeparate;\n\n\t\t\t\t\t\tif ( blendFuncSeparate !== undefined ) {\n\n\t\t\t\t\t\t\tmaterialParams.blendSrc = WEBGL_BLEND_FUNCS[ blendFuncSeparate[ 0 ] ];\n\t\t\t\t\t\t\tmaterialParams.blendDst = WEBGL_BLEND_FUNCS[ blendFuncSeparate[ 1 ] ];\n\t\t\t\t\t\t\tmaterialParams.blendSrcAlpha = WEBGL_BLEND_FUNCS[ blendFuncSeparate[ 2 ] ];\n\t\t\t\t\t\t\tmaterialParams.blendDstAlpha = WEBGL_BLEND_FUNCS[ blendFuncSeparate[ 3 ] ];\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterialParams.blendSrc = OneFactor;\n\t\t\t\t\t\t\tmaterialParams.blendDst = ZeroFactor;\n\t\t\t\t\t\t\tmaterialParams.blendSrcAlpha = OneFactor;\n\t\t\t\t\t\t\tmaterialParams.blendDstAlpha = ZeroFactor;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( Array.isArray( materialValues.diffuse ) ) {\n\n\t\t\t\t\tmaterialParams.color = new Color().fromArray( materialValues.diffuse );\n\n\t\t\t\t} else if ( typeof ( materialValues.diffuse ) === 'string' ) {\n\n\t\t\t\t\tmaterialParams.map = dependencies.textures[ materialValues.diffuse ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete materialParams.diffuse;\n\n\t\t\t\tif ( typeof ( materialValues.reflective ) === 'string' ) {\n\n\t\t\t\t\tmaterialParams.envMap = dependencies.textures[ materialValues.reflective ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( typeof ( materialValues.bump ) === 'string' ) {\n\n\t\t\t\t\tmaterialParams.bumpMap = dependencies.textures[ materialValues.bump ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( Array.isArray( materialValues.emission ) ) {\n\n\t\t\t\t\tif ( materialType === MeshBasicMaterial ) {\n\n\t\t\t\t\t\tmaterialParams.color = new Color().fromArray( materialValues.emission );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterialParams.emissive = new Color().fromArray( materialValues.emission );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( typeof ( materialValues.emission ) === 'string' ) {\n\n\t\t\t\t\tif ( materialType === MeshBasicMaterial ) {\n\n\t\t\t\t\t\tmaterialParams.map = dependencies.textures[ materialValues.emission ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterialParams.emissiveMap = dependencies.textures[ materialValues.emission ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( Array.isArray( materialValues.specular ) ) {\n\n\t\t\t\t\tmaterialParams.specular = new Color().fromArray( materialValues.specular );\n\n\t\t\t\t} else if ( typeof ( materialValues.specular ) === 'string' ) {\n\n\t\t\t\t\tmaterialParams.specularMap = dependencies.textures[ materialValues.specular ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialValues.shininess !== undefined ) {\n\n\t\t\t\t\tmaterialParams.shininess = materialValues.shininess;\n\n\t\t\t\t}\n\n\t\t\t\tvar _material = new materialType( materialParams );\n\t\t\t\tif ( material.name !== undefined ) _material.name = material.name;\n\n\t\t\t\treturn _material;\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadMeshes = function () {\n\n\t\tvar json = this.json;\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"accessors\",\n\t\t\t\"materials\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.meshes, function ( mesh ) {\n\n\t\t\t\tvar group = new Group();\n\t\t\t\tif ( mesh.name !== undefined ) group.name = mesh.name;\n\n\t\t\t\tif ( mesh.extras ) group.userData = mesh.extras;\n\n\t\t\t\tvar primitives = mesh.primitives || [];\n\n\t\t\t\tfor ( var name in primitives ) {\n\n\t\t\t\t\tvar primitive = primitives[ name ];\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === undefined ) {\n\n\t\t\t\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\t\t\t\tvar attributes = primitive.attributes;\n\n\t\t\t\t\t\tfor ( var attributeId in attributes ) {\n\n\t\t\t\t\t\t\tvar attributeEntry = attributes[ attributeId ];\n\n\t\t\t\t\t\t\tif ( ! attributeEntry ) return;\n\n\t\t\t\t\t\t\tvar bufferAttribute = dependencies.accessors[ attributeEntry ];\n\n\t\t\t\t\t\t\tswitch ( attributeId ) {\n\n\t\t\t\t\t\t\t\tcase 'POSITION':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'position', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'normal', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'TEXCOORD_0':\n\t\t\t\t\t\t\t\tcase 'TEXCOORD0':\n\t\t\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'uv', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'TEXCOORD_1':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'uv2', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'COLOR_0':\n\t\t\t\t\t\t\t\tcase 'COLOR0':\n\t\t\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'color', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'WEIGHT':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'skinWeight', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'JOINT':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'skinIndex', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tif ( ! primitive.material ) break;\n\n\t\t\t\t\t\t\t\t\tvar material = json.materials[ primitive.material ];\n\n\t\t\t\t\t\t\t\t\tif ( ! material.technique ) break;\n\n\t\t\t\t\t\t\t\t\tvar parameters = json.techniques[ material.technique ].parameters || {};\n\n\t\t\t\t\t\t\t\t\tfor ( var attributeName in parameters ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( parameters[ attributeName ][ 'semantic' ] === attributeId ) {\n\n\t\t\t\t\t\t\t\t\t\t\tgeometry.addAttribute( attributeName, bufferAttribute );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( primitive.indices ) {\n\n\t\t\t\t\t\t\tgeometry.setIndex( dependencies.accessors[ primitive.indices ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = dependencies.materials !== undefined ? dependencies.materials[ primitive.material ] : createDefaultMaterial();\n\n\t\t\t\t\t\tvar meshNode = new Mesh( geometry, material );\n\t\t\t\t\t\tmeshNode.castShadow = true;\n\t\t\t\t\t\tmeshNode.name = ( name === \"0\" ? group.name : group.name + name );\n\n\t\t\t\t\t\tif ( primitive.extras ) meshNode.userData = primitive.extras;\n\n\t\t\t\t\t\tgroup.add( meshNode );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\t\t\t\tvar attributes = primitive.attributes;\n\n\t\t\t\t\t\tfor ( var attributeId in attributes ) {\n\n\t\t\t\t\t\t\tvar attributeEntry = attributes[ attributeId ];\n\n\t\t\t\t\t\t\tif ( ! attributeEntry ) return;\n\n\t\t\t\t\t\t\tvar bufferAttribute = dependencies.accessors[ attributeEntry ];\n\n\t\t\t\t\t\t\tswitch ( attributeId ) {\n\n\t\t\t\t\t\t\t\tcase 'POSITION':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'position', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'COLOR_0':\n\t\t\t\t\t\t\t\tcase 'COLOR0':\n\t\t\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\t\t\tgeometry.addAttribute( 'color', bufferAttribute );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = dependencies.materials[ primitive.material ];\n\n\t\t\t\t\t\tvar meshNode;\n\n\t\t\t\t\t\tif ( primitive.indices ) {\n\n\t\t\t\t\t\t\tgeometry.setIndex( dependencies.accessors[ primitive.indices ] );\n\n\t\t\t\t\t\t\tmeshNode = new LineSegments( geometry, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmeshNode = new Line( geometry, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmeshNode.name = ( name === \"0\" ? group.name : group.name + name );\n\n\t\t\t\t\t\tif ( primitive.extras ) meshNode.userData = primitive.extras;\n\n\t\t\t\t\t\tgroup.add( meshNode );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( \"Only triangular and line primitives are supported\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadCameras = function () {\n\n\t\tvar json = this.json;\n\n\t\treturn _each( json.cameras, function ( camera ) {\n\n\t\t\tif ( camera.type == \"perspective\" && camera.perspective ) {\n\n\t\t\t\tvar yfov = camera.perspective.yfov;\n\t\t\t\tvar aspectRatio = camera.perspective.aspectRatio !== undefined ? camera.perspective.aspectRatio : 1;\n\n\t\t\t\t// According to COLLADA spec...\n\t\t\t\t// aspectRatio = xfov / yfov\n\t\t\t\tvar xfov = yfov * aspectRatio;\n\n\t\t\t\tvar _camera = new PerspectiveCamera( _Math.radToDeg( xfov ), aspectRatio, camera.perspective.znear || 1, camera.perspective.zfar || 2e6 );\n\t\t\t\tif ( camera.name !== undefined ) _camera.name = camera.name;\n\n\t\t\t\tif ( camera.extras ) _camera.userData = camera.extras;\n\n\t\t\t\treturn _camera;\n\n\t\t\t} else if ( camera.type == \"orthographic\" && camera.orthographic ) {\n\n\t\t\t\tvar _camera = new OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, camera.orthographic.znear, camera.orthographic.zfar );\n\t\t\t\tif ( camera.name !== undefined ) _camera.name = camera.name;\n\n\t\t\t\tif ( camera.extras ) _camera.userData = camera.extras;\n\n\t\t\t\treturn _camera;\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadSkins = function () {\n\n\t\tvar json = this.json;\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"accessors\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.skins, function ( skin ) {\n\n\t\t\t\tvar bindShapeMatrix = new Matrix4();\n\n\t\t\t\tif ( skin.bindShapeMatrix !== undefined ) bindShapeMatrix.fromArray( skin.bindShapeMatrix );\n\n\t\t\t\tvar _skin = {\n\t\t\t\t\tbindShapeMatrix: bindShapeMatrix,\n\t\t\t\t\tjointNames: skin.jointNames,\n\t\t\t\t\tinverseBindMatrices: dependencies.accessors[ skin.inverseBindMatrices ]\n\t\t\t\t};\n\n\t\t\t\treturn _skin;\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadAnimations = function () {\n\n\t\tvar json = this.json;\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"accessors\",\n\t\t\t\"nodes\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.animations, function ( animation, animationId ) {\n\n\t\t\t\tvar tracks = [];\n\n\t\t\t\tfor ( var channelId in animation.channels ) {\n\n\t\t\t\t\tvar channel = animation.channels[ channelId ];\n\t\t\t\t\tvar sampler = animation.samplers[ channel.sampler ];\n\n\t\t\t\t\tif ( sampler ) {\n\n\t\t\t\t\t\tvar target = channel.target;\n\t\t\t\t\t\tvar name = target.id;\n\t\t\t\t\t\tvar input = animation.parameters !== undefined ? animation.parameters[ sampler.input ] : sampler.input;\n\t\t\t\t\t\tvar output = animation.parameters !== undefined ? animation.parameters[ sampler.output ] : sampler.output;\n\n\t\t\t\t\t\tvar inputAccessor = dependencies.accessors[ input ];\n\t\t\t\t\t\tvar outputAccessor = dependencies.accessors[ output ];\n\n\t\t\t\t\t\tvar node = dependencies.nodes[ name ];\n\n\t\t\t\t\t\tif ( node ) {\n\n\t\t\t\t\t\t\tnode.updateMatrix();\n\t\t\t\t\t\t\tnode.matrixAutoUpdate = true;\n\n\t\t\t\t\t\t\tvar TypedKeyframeTrack = PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.rotation\n\t\t\t\t\t\t\t\t? QuaternionKeyframeTrack\n\t\t\t\t\t\t\t\t: VectorKeyframeTrack;\n\n\t\t\t\t\t\t\tvar targetName = node.name ? node.name : node.uuid;\n\t\t\t\t\t\t\tvar interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : InterpolateLinear;\n\n\t\t\t\t\t\t\t// KeyframeTrack.optimize() will modify given 'times' and 'values'\n\t\t\t\t\t\t\t// buffers before creating a truncated copy to keep. Because buffers may\n\t\t\t\t\t\t\t// be reused by other tracks, make copies here.\n\t\t\t\t\t\t\ttracks.push( new TypedKeyframeTrack(\n\t\t\t\t\t\t\t\ttargetName + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\t\t\t\t\tAnimationUtils.arraySlice( inputAccessor.array, 0 ),\n\t\t\t\t\t\t\t\tAnimationUtils.arraySlice( outputAccessor.array, 0 ),\n\t\t\t\t\t\t\t\tinterpolation\n\t\t\t\t\t\t\t) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar name = animation.name !== undefined ? animation.name : \"animation_\" + animationId;\n\n\t\t\t\treturn new AnimationClip( name, undefined, tracks );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadNodes = function () {\n\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar scope = this;\n\n\t\treturn _each( json.nodes, function ( node ) {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\tvar _node;\n\n\t\t\tif ( node.jointName ) {\n\n\t\t\t\t_node = new Bone();\n\t\t\t\t_node.name = node.name !== undefined ? node.name : node.jointName;\n\t\t\t\t_node.jointName = node.jointName;\n\n\t\t\t} else {\n\n\t\t\t\t_node = new Object3D();\n\t\t\t\tif ( node.name !== undefined ) _node.name = node.name;\n\n\t\t\t}\n\n\t\t\tif ( node.extras ) _node.userData = node.extras;\n\n\t\t\tif ( node.matrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( node.matrix );\n\t\t\t\t_node.applyMatrix( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( node.translation !== undefined ) {\n\n\t\t\t\t\t_node.position.fromArray( node.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( node.rotation !== undefined ) {\n\n\t\t\t\t\t_node.quaternion.fromArray( node.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( node.scale !== undefined ) {\n\n\t\t\t\t\t_node.scale.fromArray( node.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn _node;\n\n\t\t} ).then( function ( __nodes ) {\n\n\t\t\treturn scope._withDependencies( [\n\n\t\t\t\t\"meshes\",\n\t\t\t\t\"skins\",\n\t\t\t\t\"cameras\"\n\n\t\t\t] ).then( function ( dependencies ) {\n\n\t\t\t\treturn _each( __nodes, function ( _node, nodeId ) {\n\n\t\t\t\t\tvar node = json.nodes[ nodeId ];\n\n\t\t\t\t\tif ( node.meshes !== undefined ) {\n\n\t\t\t\t\t\tfor ( var meshId in node.meshes ) {\n\n\t\t\t\t\t\t\tvar mesh = node.meshes[ meshId ];\n\t\t\t\t\t\t\tvar group = dependencies.meshes[ mesh ];\n\n\t\t\t\t\t\t\tif ( group === undefined ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'LegacyGLTFLoader: Couldn\\'t find node \"' + mesh + '\".' );\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor ( var childrenId in group.children ) {\n\n\t\t\t\t\t\t\t\tvar child = group.children[ childrenId ];\n\n\t\t\t\t\t\t\t\t// clone Mesh to add to _node\n\n\t\t\t\t\t\t\t\tvar originalMaterial = child.material;\n\t\t\t\t\t\t\t\tvar originalGeometry = child.geometry;\n\t\t\t\t\t\t\t\tvar originalUserData = child.userData;\n\t\t\t\t\t\t\t\tvar originalName = child.name;\n\n\t\t\t\t\t\t\t\tvar material;\n\n\t\t\t\t\t\t\t\tif ( originalMaterial.isDeferredShaderMaterial ) {\n\n\t\t\t\t\t\t\t\t\toriginalMaterial = material = originalMaterial.create();\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tmaterial = originalMaterial;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tswitch ( child.type ) {\n\n\t\t\t\t\t\t\t\t\tcase 'LineSegments':\n\t\t\t\t\t\t\t\t\t\tchild = new LineSegments( originalGeometry, material );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'LineLoop':\n\t\t\t\t\t\t\t\t\t\tchild = new LineLoop( originalGeometry, material );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'Line':\n\t\t\t\t\t\t\t\t\t\tchild = new Line( originalGeometry, material );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tchild = new Mesh( originalGeometry, material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tchild.castShadow = true;\n\t\t\t\t\t\t\t\tchild.userData = originalUserData;\n\t\t\t\t\t\t\t\tchild.name = originalName;\n\n\t\t\t\t\t\t\t\tvar skinEntry;\n\n\t\t\t\t\t\t\t\tif ( node.skin ) {\n\n\t\t\t\t\t\t\t\t\tskinEntry = dependencies.skins[ node.skin ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Replace Mesh with SkinnedMesh in library\n\t\t\t\t\t\t\t\tif ( skinEntry ) {\n\n\t\t\t\t\t\t\t\t\tvar getJointNode = function ( jointId ) {\n\n\t\t\t\t\t\t\t\t\t\tvar keys = Object.keys( __nodes );\n\n\t\t\t\t\t\t\t\t\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar n = __nodes[ keys[ i ] ];\n\n\t\t\t\t\t\t\t\t\t\t\tif ( n.jointName === jointId ) return n;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tvar geometry = originalGeometry;\n\t\t\t\t\t\t\t\t\tvar material = originalMaterial;\n\t\t\t\t\t\t\t\t\tmaterial.skinning = true;\n\n\t\t\t\t\t\t\t\t\tchild = new SkinnedMesh( geometry, material );\n\t\t\t\t\t\t\t\t\tchild.castShadow = true;\n\t\t\t\t\t\t\t\t\tchild.userData = originalUserData;\n\t\t\t\t\t\t\t\t\tchild.name = originalName;\n\n\t\t\t\t\t\t\t\t\tvar bones = [];\n\t\t\t\t\t\t\t\t\tvar boneInverses = [];\n\n\t\t\t\t\t\t\t\t\tfor ( var i = 0, l = skinEntry.jointNames.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar jointId = skinEntry.jointNames[ i ];\n\t\t\t\t\t\t\t\t\t\tvar jointNode = getJointNode( jointId );\n\n\t\t\t\t\t\t\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\t\t\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\t\t\t\t\t\t\tvar m = skinEntry.inverseBindMatrices.array;\n\t\t\t\t\t\t\t\t\t\t\tvar mat = new Matrix4().fromArray( m, i * 16 );\n\t\t\t\t\t\t\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn( \"WARNING: joint: '\" + jointId + \"' could not be found\" );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tchild.bind( new Skeleton( bones, boneInverses ), skinEntry.bindShapeMatrix );\n\n\t\t\t\t\t\t\t\t\tvar buildBoneGraph = function ( parentJson, parentObject, property ) {\n\n\t\t\t\t\t\t\t\t\t\tvar children = parentJson[ property ];\n\n\t\t\t\t\t\t\t\t\t\tif ( children === undefined ) return;\n\n\t\t\t\t\t\t\t\t\t\tfor ( var i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar nodeId = children[ i ];\n\t\t\t\t\t\t\t\t\t\t\tvar bone = __nodes[ nodeId ];\n\t\t\t\t\t\t\t\t\t\t\tvar boneJson = json.nodes[ nodeId ];\n\n\t\t\t\t\t\t\t\t\t\t\tif ( bone !== undefined && bone.isBone === true && boneJson !== undefined ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tparentObject.add( bone );\n\t\t\t\t\t\t\t\t\t\t\t\tbuildBoneGraph( boneJson, bone, 'children' );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tbuildBoneGraph( node, child, 'skeletons' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_node.add( child );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( node.camera !== undefined ) {\n\n\t\t\t\t\t\tvar camera = dependencies.cameras[ node.camera ];\n\n\t\t\t\t\t\t_node.add( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( node.extensions\n\t\t\t\t\t\t\t && node.extensions[ EXTENSIONS.KHR_MATERIALS_COMMON ]\n\t\t\t\t\t\t\t && node.extensions[ EXTENSIONS.KHR_MATERIALS_COMMON ].light ) {\n\n\t\t\t\t\t\tvar extensionLights = extensions[ EXTENSIONS.KHR_MATERIALS_COMMON ].lights;\n\t\t\t\t\t\tvar light = extensionLights[ node.extensions[ EXTENSIONS.KHR_MATERIALS_COMMON ].light ];\n\n\t\t\t\t\t\t_node.add( light );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn _node;\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\tGLTFParser.prototype.loadScenes = function () {\n\n\t\tvar json = this.json;\n\n\t\t// scene node hierachy builder\n\n\t\tfunction buildNodeHierachy( nodeId, parentObject, allNodes ) {\n\n\t\t\tvar _node = allNodes[ nodeId ];\n\t\t\tparentObject.add( _node );\n\n\t\t\tvar node = json.nodes[ nodeId ];\n\n\t\t\tif ( node.children ) {\n\n\t\t\t\tvar children = node.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = children[ i ];\n\t\t\t\t\tbuildNodeHierachy( child, _node, allNodes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this._withDependencies( [\n\n\t\t\t\"nodes\"\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\treturn _each( json.scenes, function ( scene ) {\n\n\t\t\t\tvar _scene = new Scene();\n\t\t\t\tif ( scene.name !== undefined ) _scene.name = scene.name;\n\n\t\t\t\tif ( scene.extras ) _scene.userData = scene.extras;\n\n\t\t\t\tvar nodes = scene.nodes || [];\n\n\t\t\t\tfor ( var i = 0, l = nodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar nodeId = nodes[ i ];\n\t\t\t\t\tbuildNodeHierachy( nodeId, _scene, dependencies.nodes );\n\n\t\t\t\t}\n\n\t\t\t\t_scene.traverse( function ( child ) {\n\n\t\t\t\t\t// Register raw material meshes with LegacyGLTFLoader.Shaders\n\t\t\t\t\tif ( child.material && child.material.isRawShaderMaterial ) {\n\n\t\t\t\t\t\tchild.gltfShader = new GLTFShader( child, dependencies.nodes );\n\t\t\t\t\t\tchild.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\t\tthis.gltfShader.update( scene, camera );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn _scene;\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\treturn LegacyGLTFLoader;\n\n} )();\n\nexport { LegacyGLTFLoader };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA,IAAI,mBAAqB,WAAY;AAEpC,6BAA2B,SAAU;AAEpC,SAAK,UAAY,YAAY,SAAc,UAAU;AAAA;AAItD,oBAAiB,YAAY;AAAA,IAE5B,aAAa;AAAA,IAEb,aAAa;AAAA,IAEb,MAAM,SAAW,KAAK,QAAQ,YAAY,SAAU;AAEnD,UAAI,QAAQ;AAEZ,UAAI;AAEJ,UAAK,KAAK,iBAAiB,QAAY;AAEtC,uBAAe,KAAK;AAAA,iBAET,KAAK,SAAS,QAAY;AAErC,uBAAe,KAAK;AAAA,aAEd;AAEN,uBAAe,YAAY,eAAgB;AAAA;AAI5C,UAAI,SAAS,IAAI,WAAY,MAAM;AAEnC,aAAO,QAAS,KAAK;AACrB,aAAO,gBAAiB;AAExB,aAAO,KAAM,KAAK,SAAW,MAAO;AAEnC,cAAM,MAAO,MAAM,cAAc;AAAA,SAE/B,YAAY;AAAA;AAAA,IAIhB,gBAAgB,SAAW,OAAQ;AAElC,WAAK,cAAc;AACnB,aAAO;AAAA;AAAA,IAIR,SAAS,SAAW,OAAQ;AAE3B,WAAK,OAAO;AAAA;AAAA,IAIb,iBAAiB,SAAW,OAAQ;AAEnC,WAAK,eAAe;AACpB,aAAO;AAAA;AAAA,IAIR,OAAO,SAAW,MAAM,MAAM,UAAW;AAExC,UAAI;AACJ,UAAI,aAAa;AAEjB,UAAI,QAAQ,YAAY,WAAY,IAAI,WAAY,MAAM,GAAG;AAE7D,UAAK,UAAU,iCAAiC,OAAQ;AAEvD,mBAAY,WAAW,mBAAoB,IAAI,oBAAqB;AACpE,kBAAU,WAAY,WAAW,iBAAkB;AAAA,aAE7C;AAEN,kBAAU,YAAY,WAAY,IAAI,WAAY;AAAA;AAInD,UAAI,OAAO,KAAK,MAAO;AAEvB,UAAK,KAAK,kBAAkB,KAAK,eAAe,QAAS,WAAW,yBAA0B,GAAI;AAEjG,mBAAY,WAAW,wBAAyB,IAAI,6BAA8B;AAAA;AAInF,UAAI,SAAS,IAAI,WAAY,MAAM,YAAY;AAAA,QAE9C,aAAa,KAAK;AAAA,QAClB,SAAS,KAAK;AAAA,QACd,MAAM,QAAQ,KAAK,gBAAgB;AAAA;AAIpC,aAAO,MAAO,SAAW,OAAO,QAAQ,SAAS,YAAa;AAE7D,YAAI,OAAO;AAAA,UACV,SAAS;AAAA,UACT,UAAU;AAAA,UACV,WAAW;AAAA,UACX,cAAc;AAAA;AAGf,iBAAU;AAAA;AAAA;AAAA;AAUb,0BAAwB;AAEvB,QAAI,UAAU;AAEd,WAAO;AAAA,MAEN,KAAK,SAAW,KAAM;AAErB,eAAO,QAAS;AAAA;AAAA,MAIjB,KAAK,SAAW,KAAK,QAAS;AAE7B,gBAAS,OAAQ;AAAA;AAAA,MAIlB,QAAQ,SAAW,KAAM;AAExB,eAAO,QAAS;AAAA;AAAA,MAIjB,WAAW,WAAY;AAEtB,kBAAU;AAAA;AAAA,MAIX,QAAQ,SAAW,OAAO,QAAS;AAElC,iBAAU,QAAQ,SAAU;AAE3B,cAAI,SAAS,QAAS;AAEtB,cAAK,OAAO,QAAS;AAEpB,mBAAO,OAAQ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAc3B,oBAAiB,UAAU;AAAA,IAE1B,QAAQ,WAAY;AAEnB,cAAQ,KAAM;AAAA;AAAA;AAQhB,sBAAqB,YAAY,UAAW;AAE3C,QAAI,gBAAgB;AAIpB,QAAI,WAAW,WAAW,SAAS;AAEnC,aAAU,aAAa,UAAW;AAEjC,UAAI,UAAU,SAAU;AAExB,UAAK,QAAQ,UAAW;AAEvB,YAAI,gBAAgB,QAAQ;AAE5B,YAAI,aAAa;AAEjB,YAAK,eAAgB;AAEpB,uBAAa,SAAU;AAAA;AAIxB,sBAAe,aAAc;AAAA,UAC5B,UAAU,QAAQ;AAAA,UAClB;AAAA,UACA;AAAA,UACA;AAAA;AAAA;AAAA;AAOH,SAAK,gBAAgB;AACrB,SAAK,MAAM,IAAI;AAAA;AAKhB,aAAW,UAAU,SAAS,SAAW,OAAO,QAAS;AAExD,QAAI,gBAAgB,KAAK;AAEzB,aAAU,QAAQ,eAAgB;AAEjC,UAAI,eAAe,cAAe;AAElC,cAAS,aAAa;AAAA,aAEhB;AAEJ,cAAI,KAAK,aAAa,QAAQ;AAC9B,aAAG,iBAAkB,OAAO,oBAAoB,aAAa,WAAW;AACxE;AAAA,aAEI;AAEJ,cAAI,KAAK,aAAa,QAAQ;AAC9B,eAAK,IAAI,iBAAkB,OAAO,oBAAoB,aAAa,WAAW;AAC9E,aAAG,gBAAiB,KAAK;AACzB;AAAA,aAEI;AAEJ,cAAI,KAAK,aAAa,QAAQ;AAC9B,aAAG,KAAM,OAAO;AAChB;AAAA,aAEI;AAEJ,cAAI,MAAM,aAAa,QAAQ;AAE/B,mBAAU,KAAK,GAAG,KAAK,IAAI,QAAQ,MAAQ;AAM1C,gBAAK,IACH,WAAY,aAAa,WAAW,aACpC,SAAU,aAAa,WAAW,SAAS,MAAO,IAAK,aACvD,SAAU,aAAa,WAAW,SAAS,aAAc,KACzD,SAAU,aAAa,WAAW;AAAA;AAIrC;AAAA;AAIA,kBAAQ,KAAM,gCAAgC,aAAa;AAC3D;AAAA;AAAA;AAAA;AAWJ,oBAAiB,aAAa;AAAA,IAE7B,QAAQ,WAAY;AAEnB,cAAQ,KAAM;AAAA;AAAA;AAUhB,MAAI,aAAa;AAAA,IAChB,iBAAiB;AAAA,IACjB,sBAAsB;AAAA;AAKvB,wCAAuC,MAAO;AAE7C,SAAK,OAAO,WAAW;AAEvB,SAAK,SAAS;AAEd,QAAI,YAAc,KAAK,cAAc,KAAK,WAAY,WAAW,yBAA4B;AAC7F,QAAI,SAAS,UAAU,UAAU;AAEjC,aAAU,WAAW,QAAS;AAE7B,UAAI,QAAQ,OAAQ;AACpB,UAAI;AAEJ,UAAI,cAAc,MAAO,MAAM;AAC/B,UAAI,QAAQ,IAAI,QAAQ,UAAW,YAAY;AAE/C,cAAS,MAAM;AAAA,aAET;AACJ,sBAAY,IAAI,iBAAkB;AAClC,oBAAU,SAAS,IAAK,GAAG,GAAG;AAC9B;AAAA,aAEI;AACJ,sBAAY,IAAI,WAAY;AAC5B;AAAA,aAEI;AACJ,sBAAY,IAAI,UAAW;AAC3B,oBAAU,SAAS,IAAK,GAAG,GAAG;AAC9B;AAAA,aAEI;AACJ,sBAAY,IAAI,aAAc;AAC9B;AAAA;AAIF,UAAK,WAAY;AAEhB,aAAK,OAAQ,WAAY;AAAA;AAAA;AAAA;AAU5B,MAAI,+BAA+B;AAEnC,MAAI,mCAAmC,EAAE,OAAO,QAAQ,SAAS,GAAG,eAAe;AAEnF,MAAI,iCAAiC;AAErC,+BAA8B,MAAO;AAEpC,SAAK,OAAO,WAAW;AAEvB,QAAI,aAAa,IAAI,SAAU,MAAM,GAAG;AAExC,QAAI,SAAS;AAAA,MACZ,OAAO,YAAY,WAAY,IAAI,WAAY,KAAK,MAAO,GAAG;AAAA,MAC9D,SAAS,WAAW,UAAW,GAAG;AAAA,MAClC,QAAQ,WAAW,UAAW,GAAG;AAAA,MACjC,eAAe,WAAW,UAAW,IAAI;AAAA,MACzC,eAAe,WAAW,UAAW,IAAI;AAAA;AAG1C,aAAU,OAAO,kCAAmC;AAEnD,UAAI,QAAQ,iCAAkC;AAE9C,UAAK,OAAQ,SAAU,OAAQ;AAE9B,cAAM,IAAI,MAAO,6DAA6D,KAAK;AAAA;AAAA;AAMrF,QAAI,eAAe,IAAI,WAAY,MAAM,gCAAgC,OAAO;AAEhF,SAAK,SAAS;AACd,SAAK,UAAU,YAAY,WAAY;AACvC,SAAK,OAAO,KAAK,MAAO,iCAAiC,OAAO,eAAe,OAAO;AAAA;AAIvF,sBAAoB,UAAU,aAAa,SAAW,QAAQ,aAAc;AAE3E,QAAI,aAAa,YAAa,OAAO,WAAY,WAAW,iBAAkB;AAC9E,QAAI,QAAQ,IAAI,WAAY;AAE5B,WAAO,YAAY,WAAY;AAAA;AAUhC,MAAI,kBAAkB;AAAA,IACrB,OAAO;AAAA,IAEP,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,OAAO;AAAA,IACP,eAAe;AAAA,IACf,gBAAgB;AAAA,IAEhB,eAAe;AAAA,IACf,iBAAiB;AAAA;AAGlB,MAAI,aAAa;AAAA,IAChB,MAAM;AAAA,IAEN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA;AAGR,MAAI,wBAAwB;AAAA,IAC3B,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA;AAGP,MAAI,gBAAgB;AAAA,IACnB,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA;AAGP,MAAI,kBAAkB;AAAA,IACrB,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA;AAGR,MAAI,wBAAwB;AAAA,IAC3B,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA;AAGP,MAAI,0BAA0B;AAAA,IAC7B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA;AAGR,MAAI,cAAc;AAAA,IACjB,MAAM;AAAA,IACN,MAAM;AAAA;AAIP,MAAI,oBAAoB;AAAA,IACvB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA;AAGN,MAAI,wBAAwB;AAAA,IAC3B,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA;AAGR,MAAI,oBAAoB;AAAA,IACvB,GAAG;AAAA,IACH,GAAG;AAAA,IACH,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA;AAQN,MAAI,mBAAmB;AAAA,IACtB,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA;AAGT,MAAI,kBAAkB;AAAA,IACrB,OAAO;AAAA,IACP,aAAa;AAAA,IACb,UAAU;AAAA;AAGX,MAAI,gBAAgB;AAAA,IACnB,QAAQ;AAAA,IACR,MAAM;AAAA;AAGP,MAAI,iBAAiB;AAAA,IACpB,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA;AAKR,iBAAgB,QAAQ,UAAU,SAAU;AAE3C,QAAK,CAAE,QAAS;AAEf,aAAO,QAAQ;AAAA;AAIhB,QAAI;AACJ,QAAI,MAAM;AAEV,QAAK,OAAO,UAAU,SAAS,KAAM,YAAa,kBAAmB;AAEpE,gBAAU;AAEV,UAAI,SAAS,OAAO;AAEpB,eAAU,MAAM,GAAG,MAAM,QAAQ,OAAS;AAEzC,YAAI,QAAQ,SAAS,KAAM,WAAW,MAAM,OAAQ,MAAO;AAE3D,YAAK,OAAQ;AAEZ,cAAI,KAAM;AAEV,cAAK,iBAAiB,SAAU;AAE/B,kBAAM,KAAM,SAAW,MAAK,QAAQ;AAEnC,sBAAS,QAAQ;AAAA,cAEhB,KAAM,MAAM;AAAA,iBAER;AAEN,oBAAS,OAAQ;AAAA;AAAA;AAAA;AAAA,WAQd;AAEN,gBAAU;AAEV,eAAU,OAAO,QAAS;AAEzB,YAAK,OAAO,eAAgB,MAAQ;AAEnC,cAAI,QAAQ,SAAS,KAAM,WAAW,MAAM,OAAQ,MAAO;AAE3D,cAAK,OAAQ;AAEZ,gBAAI,KAAM;AAEV,gBAAK,iBAAiB,SAAU;AAE/B,oBAAM,KAAM,SAAW,MAAK,QAAQ;AAEnC,wBAAS,QAAQ;AAAA,gBAEhB,KAAM,MAAM;AAAA,mBAER;AAEN,sBAAS,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAYtB,WAAO,QAAQ,IAAK,KAAM,KAAM,WAAY;AAE3C,aAAO;AAAA;AAAA;AAMT,sBAAqB,KAAK,MAAO;AAGhC,QAAK,OAAO,QAAQ,YAAY,QAAQ;AACvC,aAAO;AAGR,QAAK,mBAAmB,KAAM,MAAQ;AAErC,aAAO;AAAA;AAKR,QAAK,gBAAgB,KAAM,MAAQ;AAElC,aAAO;AAAA;AAKR,QAAK,aAAa,KAAM,MAAQ;AAE/B,aAAO;AAAA;AAKR,WAAS,SAAQ,MAAO;AAAA;AAMzB,wCAAuC,YAAY,WAAY;AAG9D,QAAI,aAAa;AAEjB,aAAU,eAAe,UAAU,YAAa;AAE/C,UAAI,QAAQ,UAAU,WAAY;AAElC,UAAI,QAAQ,UAAU,WAAY;AAClC,UAAI,QAAQ,MAAM;AAClB,UAAI,WAAW,MAAM;AAErB,iBAAY,eAAgB;AAAA,QAC3B,MAAM;AAAA,QACN;AAAA;AAAA;AAOF,QAAI,eAAe,UAAU;AAC7B,QAAI,mBAAmB,UAAU;AACjC,QAAI,SAAS;AAEb,aAAU,eAAe,YAAa;AAErC,UAAI,QAAQ,iBAAkB;AAC9B,UAAI,cAAc,aAAc;AAChC,UAAI,WAAW,YAAY;AAC3B,UAAK,UAAW;AAEf,eAAQ,eAAgB;AAAA;AAAA;AAM1B,aAAU,SAAS,QAAS;AAE3B,UAAI,QAAQ,OAAQ;AACpB,UAAI,WAAW,MAAM;AAErB,UAAI,QAAQ,IAAI,OAAQ,QAAQ,QAAQ,OAAO;AAE/C,cAAS;AAAA,aAEH;AAEJ,uBAAa,WAAW,QAAS,OAAO;AACxC;AAAA,aAEI;AAEJ,uBAAa,WAAW,QAAS,OAAO;AACxC;AAAA,aAEI;AAAA,aACA;AAAA,aACA;AAEJ,uBAAa,WAAW,QAAS,OAAO;AACxC;AAAA,aAEI;AAEJ,uBAAa,WAAW,QAAS,OAAO;AACxC;AAAA,aAEI;AAAA,aACA;AAAA,aACA;AAEJ,uBAAa,WAAW,QAAS,OAAO;AACxC;AAAA,aAEI;AAEJ,uBAAa,WAAW,QAAS,OAAO;AACxC;AAAA,aAEI;AAEJ,uBAAa,WAAW,QAAS,OAAO;AACxC;AAAA;AAAA;AAMH,WAAO;AAAA;AAIR,mCAAiC;AAEhC,WAAO,IAAI,kBAAmB;AAAA,MAC7B,OAAO;AAAA,MACP,UAAU;AAAA,MACV,UAAU;AAAA,MACV,WAAW;AAAA,MACX,aAAa;AAAA,MACb,WAAW;AAAA,MACX,MAAM;AAAA;AAAA;AAMR,kCAAiC,QAAS;AAEzC,SAAK,2BAA2B;AAEhC,SAAK,SAAS;AAAA;AAIf,yBAAuB,UAAU,SAAS,WAAY;AAErD,QAAI,WAAW,cAAc,MAAO,KAAK,OAAO;AAEhD,aAAU,aAAa,KAAK,OAAO,UAAW;AAE7C,UAAI,kBAAkB,KAAK,OAAO,SAAU;AAE5C,UAAK,gBAAgB,iBAAiB,SAAU;AAE/C,iBAAU,WAAY,QAAQ,gBAAgB;AAC9C,iBAAU,WAAY,MAAM,cAAc;AAAA;AAI3C,eAAU,WAAY,WAAW,gBAAgB;AACjD,eAAU,WAAY,OAAO,gBAAgB;AAAA;AAI9C,SAAK,OAAO,WAAW;AAEvB,WAAO,IAAI,kBAAmB,KAAK;AAAA;AAMpC,sBAAqB,MAAM,YAAY,SAAU;AAEhD,SAAK,OAAO,QAAQ;AACpB,SAAK,aAAa,cAAc;AAChC,SAAK,UAAU,WAAW;AAG1B,SAAK,QAAQ,IAAI;AAAA;AAIlB,aAAW,UAAU,oBAAoB,SAAW,cAAe;AAElE,QAAI,gBAAgB;AAEpB,aAAU,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAO;AAEhD,UAAI,aAAa,aAAc;AAC/B,UAAI,SAAS,SAAS,WAAW,OAAQ,GAAI,gBAAgB,WAAW,MAAO;AAE/E,UAAI,SAAS,KAAK,MAAM,IAAK;AAE7B,UAAK,WAAW,QAAY;AAE3B,sBAAe,cAAe;AAAA,iBAEnB,KAAM,SAAW;AAE5B,YAAI,KAAK,KAAM;AACf,aAAK,MAAM,IAAK,YAAY;AAE5B,sBAAe,cAAe;AAAA;AAAA;AAMhC,WAAO,MAAO,eAAe,SAAW,aAAa;AAEpD,aAAO;AAAA;AAAA;AAMT,aAAW,UAAU,QAAQ,SAAW,UAAW;AAElD,QAAI,OAAO,KAAK;AAGhB,SAAK,MAAM;AAGX,SAAK,kBAAmB;AAAA,MAEvB;AAAA,MACA;AAAA,MACA;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,UAAI,SAAS;AAEb,eAAU,QAAQ,aAAa,QAAS;AAEvC,eAAO,KAAM,aAAa,OAAQ;AAAA;AAInC,UAAI,QAAQ,KAAK,UAAU,SAAY,aAAa,OAAQ,KAAK,SAAU,OAAQ;AAEnF,UAAI,UAAU;AAEd,eAAU,QAAQ,aAAa,SAAU;AAExC,YAAI,SAAS,aAAa,QAAS;AACnC,gBAAQ,KAAM;AAAA;AAIf,UAAI,aAAa;AAEjB,eAAU,QAAQ,aAAa,YAAa;AAE3C,mBAAW,KAAM,aAAa,WAAY;AAAA;AAI3C,eAAU,OAAO,QAAQ,SAAS;AAAA;AAAA;AAMpC,aAAW,UAAU,cAAc,WAAY;AAE9C,QAAI,OAAO,KAAK;AAChB,QAAI,aAAa,KAAK;AACtB,QAAI,UAAU,KAAK;AAEnB,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,SAAS,SAAW,QAAS;AAE/C,YAAK,OAAO,cAAc,OAAO,WAAY,WAAW,kBAAoB;AAE3E,iBAAO,WAAY,WAAW,iBAAkB,WAAY,QAAQ,aAAa;AAAA;AAIlF,eAAO,IAAI,QAAS,SAAW,SAAU;AAExC,cAAI,SAAS,IAAI,WAAY,QAAQ;AACrC,iBAAO,gBAAiB;AACxB,iBAAO,KAAM,WAAY,OAAO,KAAK,QAAQ,OAAQ,SAAW,YAAa;AAE5E,oBAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAYd,aAAW,UAAU,cAAc,WAAY;AAE9C,QAAI,OAAO,KAAK;AAChB,QAAI,aAAa,KAAK;AACtB,QAAI,UAAU,KAAK;AAEnB,WAAO,MAAO,KAAK,SAAS,SAAW,QAAQ,MAAO;AAErD,UAAK,SAAS,8BAA+B;AAE5C,eAAO,WAAY,WAAW,iBAAkB;AAAA;AAIjD,UAAK,OAAO,SAAS,iBAAiB,OAAO,SAAS,QAAY;AAEjE,eAAO,IAAI,QAAS,SAAW,SAAU;AAExC,cAAI,SAAS,IAAI,WAAY,QAAQ;AACrC,iBAAO,gBAAiB;AACxB,iBAAO,KAAM,WAAY,OAAO,KAAK,QAAQ,OAAQ,SAAW,SAAS;AAExE,oBAAS;AAAA;AAAA;AAAA,aAML;AAEN,gBAAQ,KAAM,6BAA6B,OAAO,OAAO;AAAA;AAAA;AAAA;AAQ5D,aAAW,UAAU,kBAAkB,WAAY;AAElD,QAAI,OAAO,KAAK;AAEhB,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,aAAa,SAAW,YAAa;AAEvD,YAAI,cAAc,aAAa,QAAS,WAAW;AAEnD,YAAI,aAAa,WAAW,eAAe,SAAY,WAAW,aAAa;AAE/E,eAAO,YAAY,MAAO,WAAW,YAAY,WAAW,aAAa;AAAA;AAAA;AAAA;AAQ5E,aAAW,UAAU,gBAAgB,WAAY;AAEhD,QAAI,OAAO,KAAK;AAEhB,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,WAAW,SAAW,UAAW;AAEnD,YAAI,cAAc,aAAa,YAAa,SAAS;AACrD,YAAI,WAAW,iBAAkB,SAAS;AAC1C,YAAI,aAAa,sBAAuB,SAAS;AAGjD,YAAI,eAAe,WAAW;AAC9B,YAAI,YAAY,eAAe;AAG/B,YAAK,SAAS,cAAc,SAAS,eAAe,WAAY;AAG/D,cAAI,QAAQ,IAAI,WAAY;AAG5B,cAAI,KAAK,IAAI,kBAAmB,OAAO,SAAS,aAAa;AAE7D,iBAAO,IAAI,2BAA4B,IAAI,UAAU,SAAS,aAAa;AAAA,eAErE;AAEN,kBAAQ,IAAI,WAAY,aAAa,SAAS,YAAY,SAAS,QAAQ;AAE3E,iBAAO,IAAI,gBAAiB,OAAO;AAAA;AAAA;AAAA;AAAA;AAUvC,aAAW,UAAU,eAAe,WAAY;AAE/C,QAAI,OAAO,KAAK;AAChB,QAAI,UAAU,KAAK;AAEnB,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,UAAU,SAAW,SAAU;AAEjD,YAAK,QAAQ,QAAS;AAErB,iBAAO,IAAI,QAAS,SAAW,SAAU;AAExC,gBAAI,SAAS,KAAK,OAAQ,QAAQ;AAClC,gBAAI,YAAY,OAAO;AACvB,gBAAI,cAAc;AAElB,gBAAK,OAAO,cAAc,OAAO,WAAY,WAAW,kBAAoB;AAE3E,kBAAI,WAAW,OAAO,WAAY,WAAW;AAC7C,kBAAI,aAAa,aAAa,YAAa,SAAS;AACpD,kBAAI,OAAO,IAAI,KAAM,CAAE,aAAc,EAAE,MAAM,SAAS;AACtD,0BAAY,IAAI,gBAAiB;AACjC,4BAAc;AAAA;AAIf,gBAAI,gBAAgB,OAAO,SAAS,IAAK;AAEzC,gBAAK,kBAAkB,MAAO;AAE7B,8BAAgB,IAAI,cAAe,QAAQ;AAAA;AAI5C,0BAAc,eAAgB,QAAQ;AAEtC,0BAAc,KAAM,WAAY,WAAW,QAAQ,OAAQ,SAAW,UAAW;AAEhF,kBAAK;AAAc,oBAAI,gBAAiB;AAExC,uBAAS,QAAQ;AAEjB,kBAAK,QAAQ,SAAS;AAAY,yBAAS,OAAO,QAAQ;AAE1D,uBAAS,SAAS,QAAQ,WAAW,SAAY,sBAAuB,QAAQ,UAAW;AAE3F,kBAAK,QAAQ,mBAAmB,UAAa,SAAS,WAAW,sBAAuB,QAAQ,iBAAmB;AAElH,wBAAQ,KAAM;AAAA;AAKf,uBAAS,OAAO,QAAQ,SAAS,SAAY,wBAAyB,QAAQ,QAAS;AAEvF,kBAAK,QAAQ,SAAU;AAEtB,oBAAI,UAAU,KAAK,SAAU,QAAQ;AAErC,yBAAS,YAAY,cAAe,QAAQ,cAAe;AAC3D,yBAAS,YAAY,cAAe,QAAQ,cAAe;AAC3D,yBAAS,QAAQ,gBAAiB,QAAQ,UAAW;AACrD,yBAAS,QAAQ,gBAAiB,QAAQ,UAAW;AAAA;AAItD,sBAAS;AAAA,eAEP,QAAW,WAAY;AAEzB,kBAAK;AAAc,oBAAI,gBAAiB;AAExC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcN,aAAW,UAAU,gBAAgB,WAAY;AAEhD,QAAI,OAAO,KAAK;AAEhB,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,MACA;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,WAAW,SAAW,UAAW;AAEnD,YAAI;AACJ,YAAI,iBAAiB;AACrB,YAAI,iBAAiB;AAErB,YAAI;AAEJ,YAAK,SAAS,cAAc,SAAS,WAAY,WAAW,uBAAyB;AAEpF,yBAAe,SAAS,WAAY,WAAW;AAAA;AAIhD,YAAK,cAAe;AAGnB,cAAI,OAAO,CAAE,WAAW,YAAY,eAAe,gBAAgB;AAEnE,kBAAS,aAAa;AAAA,iBAEhB;AAAA,iBACA;AACJ,6BAAe;AACf,mBAAK,KAAM,WAAW,YAAY;AAClC;AAAA,iBAEI;AACJ,6BAAe;AACf,mBAAK,KAAM;AACX;AAAA,iBAEI;AAAA;AAEJ,6BAAe;AACf;AAAA;AAIF,eAAK,QAAS,SAAW,GAAI;AAE5B,gBAAK,aAAa,OAAQ,OAAQ;AAAY,6BAAgB,KAAM,aAAa,OAAQ;AAAA;AAI1F,cAAK,aAAa,eAAe,eAAe,aAAc;AAE7D,2BAAe,OAAO;AAAA;AAIvB,cAAK,aAAa,eAAe,eAAe,aAAc;AAE7D,2BAAe,cAAc;AAC7B,2BAAe,UAAY,eAAe,iBAAiB,SAAc,eAAe,eAAe;AAAA;AAAA,mBAI7F,SAAS,cAAc,QAAY;AAE9C,yBAAe;AAEf,iBAAO,OAAQ,gBAAgB,SAAS;AAAA,eAElC;AAEN,yBAAe;AAEf,cAAI,YAAY,KAAK,WAAY,SAAS;AAE1C,yBAAe,WAAW;AAE1B,cAAI,UAAU,KAAK,SAAU,UAAU;AAEvC,cAAK,SAAU;AAEd,2BAAe,iBAAiB,aAAa,QAAS,QAAQ;AAE9D,gBAAK,CAAE,eAAe,gBAAiB;AAEtC,sBAAQ,KAAM,8CAA8C,QAAQ;AACpE,6BAAe;AAAA;AAIhB,gBAAI,eAAe,aAAa,QAAS,QAAQ;AAEjD,gBAAK,CAAE,cAAe;AAErB,sBAAQ,KAAM,4CAA4C,QAAQ;AAClE,6BAAe;AAAA;AAKhB,2BAAe,eAAe,6BAA8B,cAAc;AAE1E,gBAAI,WAAW,UAAU;AAEzB,qBAAU,aAAa,UAAW;AAEjC,kBAAI,QAAQ,SAAU;AACtB,kBAAI,cAAc,UAAU,WAAY;AAExC,kBAAI,QAAQ,YAAY;AAExB,kBAAK,WAAY,QAAU;AAE1B,oBAAI,SAAS,YAAY;AACzB,oBAAI;AAEJ,oBAAK,SAAS,WAAW;AAAY,0BAAQ,SAAS,OAAQ;AAE9D,oBAAI,SAAS,IAAI,WAAY;AAC7B,oBAAI,YAAY,YAAY;AAC5B,oBAAI,QAAQ,YAAY;AAExB,wBAAS;AAAA,uBAEH,gBAAgB;AAEpB,6BAAS,YAAY;AAErB,wBAAK,SAAS,gBAAiB;AAE9B,qCAAe,cAAc;AAAA;AAI9B,wBAAK,UAAU,QAAY;AAE1B,+BAAS;AAAA;AAIV;AAAA,uBAEI,gBAAgB;AAAA,uBAChB,gBAAgB;AAAA,uBAChB,gBAAgB;AAAA,uBAChB,gBAAgB;AAEpB,wBAAK,eAAe,YAAY,OAAQ;AAEvC,6BAAO,UAAW,YAAY;AAAA;AAI/B,wBAAK,OAAQ;AAEZ,6BAAO,UAAW;AAAA;AAInB;AAAA,uBAEI,gBAAgB;AAGpB,4BAAQ,KAAM;AACd;AAAA,uBAEI,gBAAgB;AAEpB,wBAAK,QAAS;AAEb,+BAAS,IAAI,MAAO;AAEpB,+BAAU,KAAK,GAAG,KAAK,QAAQ,MAAQ;AAEtC,+BAAQ,MAAO,IAAI,WAAY;AAAA;AAIhC,0BAAK,eAAe,YAAY,OAAQ;AAEvC,4BAAI,MAAM,YAAY;AACtB,+BAAO,UAAW;AAAA;AAInB,0BAAK,OAAQ;AAEZ,+BAAO,UAAW;AAAA;AAAA,2BAIb;AAEN,0BAAK,eAAe,YAAY,OAAQ;AAEvC,4BAAI,KAAK,YAAY;AACrB,+BAAO,UAAW;AAAA;AAInB,0BAAK,OAAQ;AAEZ,+BAAO,UAAW;AAAA;AAAA;AAMpB;AAAA,uBAEI,gBAAgB;AAEpB,wBAAK,UAAU,QAAY;AAE1B,+BAAS,aAAa,SAAU;AAAA,+BAErB,YAAY,UAAU,QAAY;AAE7C,+BAAS,aAAa,SAAU,YAAY;AAAA,2BAEtC;AAEN,+BAAS;AAAA;AAIV;AAAA;AAIF,+BAAe,SAAU,aAAc;AAAA,kBACtC,OAAO;AAAA,kBACP,UAAU;AAAA,kBACV,MAAM;AAAA;AAAA,qBAGD;AAEN,sBAAM,IAAI,MAAO,wCAAwC;AAAA;AAAA;AAM3D,gBAAI,SAAS,UAAU,UAAU;AACjC,gBAAI,UAAU,OAAO,UAAU;AAC/B,gBAAI,YAAY,OAAO,aAAa;AAEpC,gBAAI,iBAAiB;AACrB,gBAAI,kBAAkB;AACtB,gBAAI,cAAc;AAElB,qBAAU,IAAI,GAAG,KAAK,QAAQ,QAAQ,IAAI,IAAI,KAAO;AAEpD,kBAAI,SAAS,QAAS;AAEtB,sBAAS,eAAgB;AAAA,qBAEnB;AAEJ,mCAAiB;AAEjB;AAAA,qBAEI;AAEJ,oCAAkB;AAElB;AAAA,qBAEI;AAEJ,gCAAc;AAEd;AAAA,qBAGI;AAAA,qBACA;AAAA,qBACA;AAEJ;AAAA;AAIA,wBAAM,IAAI,MAAO,sCAAsC;AAAA;AAAA;AAM1D,gBAAK,gBAAiB;AAErB,6BAAe,OAAO,UAAU,aAAa,SAAY,YAAa,UAAU,YAAa;AAAA,mBAEvF;AAEN,6BAAe,OAAO;AAAA;AAIvB,2BAAe,YAAY;AAC3B,2BAAe,YAAY,UAAU,cAAc,SAAY,kBAAmB,UAAU,aAAc;AAC1G,2BAAe,aAAa,UAAU,cAAc,SAAY,UAAU,UAAW,KAAM;AAE3F,2BAAe,WAAW,cAAc,iBAAiB;AACzD,2BAAe,cAAc;AAE7B,gBAAI,wBAAwB,UAAU;AAEtC,gBAAK,0BAA0B,QAAY;AAE1C,6BAAe,gBAAgB,sBAAuB,sBAAuB;AAC7E,6BAAe,qBAAqB,sBAAuB,sBAAuB;AAAA,mBAE5E;AAEN,6BAAe,gBAAgB;AAC/B,6BAAe,qBAAqB;AAAA;AAIrC,gBAAI,oBAAoB,UAAU;AAElC,gBAAK,sBAAsB,QAAY;AAEtC,6BAAe,WAAW,kBAAmB,kBAAmB;AAChE,6BAAe,WAAW,kBAAmB,kBAAmB;AAChE,6BAAe,gBAAgB,kBAAmB,kBAAmB;AACrE,6BAAe,gBAAgB,kBAAmB,kBAAmB;AAAA,mBAE/D;AAEN,6BAAe,WAAW;AAC1B,6BAAe,WAAW;AAC1B,6BAAe,gBAAgB;AAC/B,6BAAe,gBAAgB;AAAA;AAAA;AAAA;AAQlC,YAAK,MAAM,QAAS,eAAe,UAAY;AAE9C,yBAAe,QAAQ,IAAI,QAAQ,UAAW,eAAe;AAAA,mBAElD,OAAS,eAAe,YAAc,UAAW;AAE5D,yBAAe,MAAM,aAAa,SAAU,eAAe;AAAA;AAI5D,eAAO,eAAe;AAEtB,YAAK,OAAS,eAAe,eAAiB,UAAW;AAExD,yBAAe,SAAS,aAAa,SAAU,eAAe;AAAA;AAI/D,YAAK,OAAS,eAAe,SAAW,UAAW;AAElD,yBAAe,UAAU,aAAa,SAAU,eAAe;AAAA;AAIhE,YAAK,MAAM,QAAS,eAAe,WAAa;AAE/C,cAAK,iBAAiB,mBAAoB;AAEzC,2BAAe,QAAQ,IAAI,QAAQ,UAAW,eAAe;AAAA,iBAEvD;AAEN,2BAAe,WAAW,IAAI,QAAQ,UAAW,eAAe;AAAA;AAAA,mBAItD,OAAS,eAAe,aAAe,UAAW;AAE7D,cAAK,iBAAiB,mBAAoB;AAEzC,2BAAe,MAAM,aAAa,SAAU,eAAe;AAAA,iBAErD;AAEN,2BAAe,cAAc,aAAa,SAAU,eAAe;AAAA;AAAA;AAMrE,YAAK,MAAM,QAAS,eAAe,WAAa;AAE/C,yBAAe,WAAW,IAAI,QAAQ,UAAW,eAAe;AAAA,mBAErD,OAAS,eAAe,aAAe,UAAW;AAE7D,yBAAe,cAAc,aAAa,SAAU,eAAe;AAAA;AAIpE,YAAK,eAAe,cAAc,QAAY;AAE7C,yBAAe,YAAY,eAAe;AAAA;AAI3C,YAAI,YAAY,IAAI,aAAc;AAClC,YAAK,SAAS,SAAS;AAAY,oBAAU,OAAO,SAAS;AAE7D,eAAO;AAAA;AAAA;AAAA;AAQV,aAAW,UAAU,aAAa,WAAY;AAE7C,QAAI,OAAO,KAAK;AAEhB,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,MACA;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,QAAQ,SAAW,MAAO;AAE5C,YAAI,QAAQ,IAAI;AAChB,YAAK,KAAK,SAAS;AAAY,gBAAM,OAAO,KAAK;AAEjD,YAAK,KAAK;AAAS,gBAAM,WAAW,KAAK;AAEzC,YAAI,aAAa,KAAK,cAAc;AAEpC,iBAAU,QAAQ,YAAa;AAE9B,cAAI,YAAY,WAAY;AAE5B,cAAK,UAAU,SAAS,gBAAgB,aAAa,UAAU,SAAS,QAAY;AAEnF,gBAAI,WAAW,IAAI;AAEnB,gBAAI,aAAa,UAAU;AAE3B,qBAAU,eAAe,YAAa;AAErC,kBAAI,iBAAiB,WAAY;AAEjC,kBAAK,CAAE;AAAiB;AAExB,kBAAI,kBAAkB,aAAa,UAAW;AAE9C,sBAAS;AAAA,qBAEH;AACJ,2BAAS,aAAc,YAAY;AACnC;AAAA,qBAEI;AACJ,2BAAS,aAAc,UAAU;AACjC;AAAA,qBAEI;AAAA,qBACA;AAAA,qBACA;AACJ,2BAAS,aAAc,MAAM;AAC7B;AAAA,qBAEI;AACJ,2BAAS,aAAc,OAAO;AAC9B;AAAA,qBAEI;AAAA,qBACA;AAAA,qBACA;AACJ,2BAAS,aAAc,SAAS;AAChC;AAAA,qBAEI;AACJ,2BAAS,aAAc,cAAc;AACrC;AAAA,qBAEI;AACJ,2BAAS,aAAc,aAAa;AACpC;AAAA;AAIA,sBAAK,CAAE,UAAU;AAAW;AAE5B,sBAAI,WAAW,KAAK,UAAW,UAAU;AAEzC,sBAAK,CAAE,SAAS;AAAY;AAE5B,sBAAI,aAAa,KAAK,WAAY,SAAS,WAAY,cAAc;AAErE,2BAAU,iBAAiB,YAAa;AAEvC,wBAAK,WAAY,eAAiB,gBAAiB,aAAc;AAEhE,+BAAS,aAAc,eAAe;AAAA;AAAA;AAAA;AAAA;AAU3C,gBAAK,UAAU,SAAU;AAExB,uBAAS,SAAU,aAAa,UAAW,UAAU;AAAA;AAItD,gBAAI,WAAW,aAAa,cAAc,SAAY,aAAa,UAAW,UAAU,YAAa;AAErG,gBAAI,WAAW,IAAI,KAAM,UAAU;AACnC,qBAAS,aAAa;AACtB,qBAAS,OAAS,SAAS,MAAM,MAAM,OAAO,MAAM,OAAO;AAE3D,gBAAK,UAAU;AAAS,uBAAS,WAAW,UAAU;AAEtD,kBAAM,IAAK;AAAA,qBAEA,UAAU,SAAS,gBAAgB,OAAQ;AAEtD,gBAAI,WAAW,IAAI;AAEnB,gBAAI,aAAa,UAAU;AAE3B,qBAAU,eAAe,YAAa;AAErC,kBAAI,iBAAiB,WAAY;AAEjC,kBAAK,CAAE;AAAiB;AAExB,kBAAI,kBAAkB,aAAa,UAAW;AAE9C,sBAAS;AAAA,qBAEH;AACJ,2BAAS,aAAc,YAAY;AACnC;AAAA,qBAEI;AAAA,qBACA;AAAA,qBACA;AACJ,2BAAS,aAAc,SAAS;AAChC;AAAA;AAAA;AAMH,gBAAI,WAAW,aAAa,UAAW,UAAU;AAEjD,gBAAI;AAEJ,gBAAK,UAAU,SAAU;AAExB,uBAAS,SAAU,aAAa,UAAW,UAAU;AAErD,yBAAW,IAAI,aAAc,UAAU;AAAA,mBAEjC;AAEN,yBAAW,IAAI,KAAM,UAAU;AAAA;AAIhC,qBAAS,OAAS,SAAS,MAAM,MAAM,OAAO,MAAM,OAAO;AAE3D,gBAAK,UAAU;AAAS,uBAAS,WAAW,UAAU;AAEtD,kBAAM,IAAK;AAAA,iBAEL;AAEN,oBAAQ,KAAM;AAAA;AAAA;AAMhB,eAAO;AAAA;AAAA;AAAA;AAQV,aAAW,UAAU,cAAc,WAAY;AAE9C,QAAI,OAAO,KAAK;AAEhB,WAAO,MAAO,KAAK,SAAS,SAAW,QAAS;AAE/C,UAAK,OAAO,QAAQ,iBAAiB,OAAO,aAAc;AAEzD,YAAI,OAAO,OAAO,YAAY;AAC9B,YAAI,cAAc,OAAO,YAAY,gBAAgB,SAAY,OAAO,YAAY,cAAc;AAIlG,YAAI,OAAO,OAAO;AAElB,YAAI,UAAU,IAAI,kBAAmB,MAAM,SAAU,OAAQ,aAAa,OAAO,YAAY,SAAS,GAAG,OAAO,YAAY,QAAQ;AACpI,YAAK,OAAO,SAAS;AAAY,kBAAQ,OAAO,OAAO;AAEvD,YAAK,OAAO;AAAS,kBAAQ,WAAW,OAAO;AAE/C,eAAO;AAAA,iBAEI,OAAO,QAAQ,kBAAkB,OAAO,cAAe;AAElE,YAAI,UAAU,IAAI,mBAAoB,OAAO,aAAa,IAAK,OAAO,aAAa,GAAG,OAAO,cAAc,GAAG,OAAO,cAAc,IAAK,OAAO,aAAa,OAAO,OAAO,aAAa;AACvL,YAAK,OAAO,SAAS;AAAY,kBAAQ,OAAO,OAAO;AAEvD,YAAK,OAAO;AAAS,kBAAQ,WAAW,OAAO;AAE/C,eAAO;AAAA;AAAA;AAAA;AAQV,aAAW,UAAU,YAAY,WAAY;AAE5C,QAAI,OAAO,KAAK;AAEhB,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,OAAO,SAAW,MAAO;AAE3C,YAAI,kBAAkB,IAAI;AAE1B,YAAK,KAAK,oBAAoB;AAAY,0BAAgB,UAAW,KAAK;AAE1E,YAAI,QAAQ;AAAA,UACX;AAAA,UACA,YAAY,KAAK;AAAA,UACjB,qBAAqB,aAAa,UAAW,KAAK;AAAA;AAGnD,eAAO;AAAA;AAAA;AAAA;AAQV,aAAW,UAAU,iBAAiB,WAAY;AAEjD,QAAI,OAAO,KAAK;AAEhB,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,MACA;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,YAAY,SAAW,WAAW,aAAc;AAElE,YAAI,SAAS;AAEb,iBAAU,aAAa,UAAU,UAAW;AAE3C,cAAI,UAAU,UAAU,SAAU;AAClC,cAAI,UAAU,UAAU,SAAU,QAAQ;AAE1C,cAAK,SAAU;AAEd,gBAAI,SAAS,QAAQ;AACrB,gBAAI,OAAO,OAAO;AAClB,gBAAI,QAAQ,UAAU,eAAe,SAAY,UAAU,WAAY,QAAQ,SAAU,QAAQ;AACjG,gBAAI,SAAS,UAAU,eAAe,SAAY,UAAU,WAAY,QAAQ,UAAW,QAAQ;AAEnG,gBAAI,gBAAgB,aAAa,UAAW;AAC5C,gBAAI,iBAAiB,aAAa,UAAW;AAE7C,gBAAI,OAAO,aAAa,MAAO;AAE/B,gBAAK,MAAO;AAEX,mBAAK;AACL,mBAAK,mBAAmB;AAExB,kBAAI,qBAAqB,gBAAiB,OAAO,UAAW,gBAAgB,WACzE,0BACA;AAEH,kBAAI,aAAa,KAAK,OAAO,KAAK,OAAO,KAAK;AAC9C,kBAAI,gBAAgB,QAAQ,kBAAkB,SAAY,cAAe,QAAQ,iBAAkB;AAKnG,qBAAO,KAAM,IAAI,mBAChB,aAAa,MAAM,gBAAiB,OAAO,OAC3C,eAAe,WAAY,cAAc,OAAO,IAChD,eAAe,WAAY,eAAe,OAAO,IACjD;AAAA;AAAA;AAAA;AASJ,YAAI,OAAO,UAAU,SAAS,SAAY,UAAU,OAAO,eAAe;AAE1E,eAAO,IAAI,cAAe,MAAM,QAAW;AAAA;AAAA;AAAA;AAQ9C,aAAW,UAAU,YAAY,WAAY;AAE5C,QAAI,OAAO,KAAK;AAChB,QAAI,aAAa,KAAK;AACtB,QAAI,QAAQ;AAEZ,WAAO,MAAO,KAAK,OAAO,SAAW,MAAO;AAE3C,UAAI,SAAS,IAAI;AAEjB,UAAI;AAEJ,UAAK,KAAK,WAAY;AAErB,gBAAQ,IAAI;AACZ,cAAM,OAAO,KAAK,SAAS,SAAY,KAAK,OAAO,KAAK;AACxD,cAAM,YAAY,KAAK;AAAA,aAEjB;AAEN,gBAAQ,IAAI;AACZ,YAAK,KAAK,SAAS;AAAY,gBAAM,OAAO,KAAK;AAAA;AAIlD,UAAK,KAAK;AAAS,cAAM,WAAW,KAAK;AAEzC,UAAK,KAAK,WAAW,QAAY;AAEhC,eAAO,UAAW,KAAK;AACvB,cAAM,YAAa;AAAA,aAEb;AAEN,YAAK,KAAK,gBAAgB,QAAY;AAErC,gBAAM,SAAS,UAAW,KAAK;AAAA;AAIhC,YAAK,KAAK,aAAa,QAAY;AAElC,gBAAM,WAAW,UAAW,KAAK;AAAA;AAIlC,YAAK,KAAK,UAAU,QAAY;AAE/B,gBAAM,MAAM,UAAW,KAAK;AAAA;AAAA;AAM9B,aAAO;AAAA,OAEJ,KAAM,SAAW,SAAU;AAE9B,aAAO,MAAM,kBAAmB;AAAA,QAE/B;AAAA,QACA;AAAA,QACA;AAAA,SAEG,KAAM,SAAW,cAAe;AAEnC,eAAO,MAAO,SAAS,SAAW,OAAO,QAAS;AAEjD,cAAI,OAAO,KAAK,MAAO;AAEvB,cAAK,KAAK,WAAW,QAAY;AAEhC,qBAAU,UAAU,KAAK,QAAS;AAEjC,kBAAI,OAAO,KAAK,OAAQ;AACxB,kBAAI,QAAQ,aAAa,OAAQ;AAEjC,kBAAK,UAAU,QAAY;AAE1B,wBAAQ,KAAM,2CAA4C,OAAO;AACjE;AAAA;AAID,uBAAU,cAAc,MAAM,UAAW;AAExC,oBAAI,QAAQ,MAAM,SAAU;AAI5B,oBAAI,mBAAmB,MAAM;AAC7B,oBAAI,mBAAmB,MAAM;AAC7B,oBAAI,mBAAmB,MAAM;AAC7B,oBAAI,eAAe,MAAM;AAEzB,oBAAI;AAEJ,oBAAK,iBAAiB,0BAA2B;AAEhD,qCAAmB,WAAW,iBAAiB;AAAA,uBAEzC;AAEN,6BAAW;AAAA;AAIZ,wBAAS,MAAM;AAAA,uBAET;AACJ,4BAAQ,IAAI,aAAc,kBAAkB;AAC5C;AAAA,uBAEI;AACJ,4BAAQ,IAAI,SAAU,kBAAkB;AACxC;AAAA,uBAEI;AACJ,4BAAQ,IAAI,KAAM,kBAAkB;AACpC;AAAA;AAGA,4BAAQ,IAAI,KAAM,kBAAkB;AAAA;AAItC,sBAAM,aAAa;AACnB,sBAAM,WAAW;AACjB,sBAAM,OAAO;AAEb,oBAAI;AAEJ,oBAAK,KAAK,MAAO;AAEhB,8BAAY,aAAa,MAAO,KAAK;AAAA;AAKtC,oBAAK,WAAY;AAEhB,sBAAI,eAAe,SAAW,UAAU;AAEvC,wBAAI,OAAO,OAAO,KAAM;AAExB,6BAAU,KAAI,GAAG,KAAK,KAAK,QAAQ,KAAI,IAAI,MAAO;AAEjD,0BAAI,IAAI,QAAS,KAAM;AAEvB,0BAAK,EAAE,cAAc;AAAU,+BAAO;AAAA;AAIvC,2BAAO;AAAA;AAIR,sBAAI,WAAW;AACf,sBAAI,WAAW;AACf,2BAAS,WAAW;AAEpB,0BAAQ,IAAI,YAAa,UAAU;AACnC,wBAAM,aAAa;AACnB,wBAAM,WAAW;AACjB,wBAAM,OAAO;AAEb,sBAAI,QAAQ;AACZ,sBAAI,eAAe;AAEnB,2BAAU,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ,IAAI,GAAG,KAAO;AAE/D,wBAAI,UAAU,UAAU,WAAY;AACpC,wBAAI,YAAY,aAAc;AAE9B,wBAAK,WAAY;AAEhB,4BAAM,KAAM;AAEZ,0BAAI,IAAI,UAAU,oBAAoB;AACtC,0BAAI,MAAM,IAAI,UAAU,UAAW,GAAG,IAAI;AAC1C,mCAAa,KAAM;AAAA,2BAEb;AAEN,8BAAQ,KAAM,sBAAsB,UAAU;AAAA;AAAA;AAMhD,wBAAM,KAAM,IAAI,SAAU,OAAO,eAAgB,UAAU;AAE3D,sBAAI,iBAAiB,SAAW,YAAY,cAAc,UAAW;AAEpE,wBAAI,WAAW,WAAY;AAE3B,wBAAK,aAAa;AAAY;AAE9B,6BAAU,KAAI,GAAG,KAAK,SAAS,QAAQ,KAAI,IAAI,MAAO;AAErD,0BAAI,UAAS,SAAU;AACvB,0BAAI,OAAO,QAAS;AACpB,0BAAI,WAAW,KAAK,MAAO;AAE3B,0BAAK,SAAS,UAAa,KAAK,WAAW,QAAQ,aAAa,QAAY;AAE3E,qCAAa,IAAK;AAClB,uCAAgB,UAAU,MAAM;AAAA;AAAA;AAAA;AAQnC,iCAAgB,MAAM,OAAO;AAAA;AAI9B,sBAAM,IAAK;AAAA;AAAA;AAAA;AAQd,cAAK,KAAK,WAAW,QAAY;AAEhC,gBAAI,SAAS,aAAa,QAAS,KAAK;AAExC,kBAAM,IAAK;AAAA;AAIZ,cAAK,KAAK,cACJ,KAAK,WAAY,WAAW,yBAC5B,KAAK,WAAY,WAAW,sBAAuB,OAAQ;AAEhE,gBAAI,kBAAkB,WAAY,WAAW,sBAAuB;AACpE,gBAAI,QAAQ,gBAAiB,KAAK,WAAY,WAAW,sBAAuB;AAEhF,kBAAM,IAAK;AAAA;AAIZ,iBAAO;AAAA;AAAA;AAAA;AAAA;AAUX,aAAW,UAAU,aAAa,WAAY;AAE7C,QAAI,OAAO,KAAK;AAIhB,+BAA4B,QAAQ,cAAc,UAAW;AAE5D,UAAI,QAAQ,SAAU;AACtB,mBAAa,IAAK;AAElB,UAAI,OAAO,KAAK,MAAO;AAEvB,UAAK,KAAK,UAAW;AAEpB,YAAI,WAAW,KAAK;AAEpB,iBAAU,IAAI,GAAG,IAAI,SAAS,QAAQ,IAAI,GAAG,KAAO;AAEnD,cAAI,QAAQ,SAAU;AACtB,4BAAmB,OAAO,OAAO;AAAA;AAAA;AAAA;AAQpC,WAAO,KAAK,kBAAmB;AAAA,MAE9B;AAAA,OAEG,KAAM,SAAW,cAAe;AAEnC,aAAO,MAAO,KAAK,QAAQ,SAAW,OAAQ;AAE7C,YAAI,SAAS,IAAI;AACjB,YAAK,MAAM,SAAS;AAAY,iBAAO,OAAO,MAAM;AAEpD,YAAK,MAAM;AAAS,iBAAO,WAAW,MAAM;AAE5C,YAAI,QAAQ,MAAM,SAAS;AAE3B,iBAAU,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,KAAO;AAEhD,cAAI,SAAS,MAAO;AACpB,4BAAmB,QAAQ,QAAQ,aAAa;AAAA;AAIjD,eAAO,SAAU,SAAW,OAAQ;AAGnC,cAAK,MAAM,YAAY,MAAM,SAAS,qBAAsB;AAE3D,kBAAM,aAAa,IAAI,WAAY,OAAO,aAAa;AACvD,kBAAM,iBAAiB,SAAW,UAAU,QAAO,QAAS;AAE3D,mBAAK,WAAW,OAAQ,QAAO;AAAA;AAAA;AAAA;AAQlC,eAAO;AAAA;AAAA;AAAA;AAQV,SAAO;AAAA;",
  "names": []
}
